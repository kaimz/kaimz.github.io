<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>喃声细语</title>
  <subtitle>一个人的独白，成为最好的自己，遇到最好的那个人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wuwii.com/"/>
  <updated>2017-12-13T15:53:35.134Z</updated>
  <id>http://blog.wuwii.com/</id>
  
  <author>
    <name>Slience</name>
    <email>k@wuwii.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>某一个安静的寒冷的夜晚</title>
    <link href="http://blog.wuwii.com/20171213.html"/>
    <id>http://blog.wuwii.com/20171213.html</id>
    <published>2017-12-13T15:08:03.000Z</published>
    <updated>2017-12-13T15:53:35.134Z</updated>
    
    <content type="html"><![CDATA[<p>感觉最近很迷。</p>
<p>一种不知所措的迷。</p>
<p>也许这就是活着，遇到，离开；没有一个人能够保持着这份单纯持续下去，这就是成长的代价。</p>
<p>相信每一天的太阳都是新的，每处总是充满了希望。</p>
<p>毕竟每个人都有自己的目的地，一个又一个的终点，每一次去触摸它的时候，都会有新的成长，也会失去某些东西。慢慢的就像一棵树，逐渐成长起来，最终都会明白，自己想要的是什么，想成为什么样子，但是来不及回忆以前的模样，只能更加用力的成长。</p>
<p>在这场旅行中，每段故事都交错在不同时空，最终，都将到达终点，我们将会找到自己的答案。</p>
<p>那个答案一定藏在我现在的目光无法企及的某个角落；带上草帽，有一颗真挚的内心去寻找它。</p>
<p>晚安……<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉最近很迷。&lt;/p&gt;
&lt;p&gt;一种不知所措的迷。&lt;/p&gt;
&lt;p&gt;也许这就是活着，遇到，离开；没有一个人能够保持着这份单纯持续下去，这就是成长的代价。&lt;/p&gt;
&lt;p&gt;相信每一天的太阳都是新的，每处总是充满了希望。&lt;/p&gt;
&lt;p&gt;毕竟每个人都有自己的目的地，一个又一个的终点，每一次去触摸它的时候，都会有新的成长，也会失去某些东西。慢慢的就像一棵树，逐渐成长起来，最终都会明白，自己想要的是什么，想成为什么样子，但是来不及回忆以前的模样，只能更加用力的成长。&lt;/p&gt;
&lt;p&gt;在这场旅行中，每段故事都交错在不同时空，最终，都将到达终点，我们将会找到自己的答案。&lt;/p&gt;
&lt;p&gt;那个答案一定藏在我现在的目光无法企及的某个角落；带上草帽，有一颗真挚的内心去寻找它。&lt;/p&gt;
&lt;p&gt;晚安……&lt;br&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>No Dialect mapping for JDBC type 的问题</title>
    <link href="http://blog.wuwii.com/java-no-dialect-mapping.html"/>
    <id>http://blog.wuwii.com/java-no-dialect-mapping.html</id>
    <published>2017-12-11T10:38:03.000Z</published>
    <updated>2017-12-11T10:37:36.994Z</updated>
    
    <content type="html"><![CDATA[<p>问题很简单，就是方言不能把该数据库类型映射到Java中， 方言不认识这个数据库类型。</p>
<h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><ol>
<li>数据库字段类型和JAVA类型不匹配。</li>
<li>错误地配置了数据库方言。</li>
</ol>
<a id="more"></a>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先查看java.sql.Types类型，以及各种错误代码。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型</th>
<th>状态码</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>ARRAY</td>
<td>2003</td>
</tr>
<tr>
<td>2</td>
<td>BIGINT</td>
<td>-5</td>
</tr>
<tr>
<td>3</td>
<td>BINARY</td>
<td>-2</td>
</tr>
<tr>
<td>4</td>
<td>BIT</td>
<td>-7</td>
</tr>
<tr>
<td>5</td>
<td>BLOB</td>
<td>2004</td>
</tr>
<tr>
<td>6</td>
<td>BOOLEAN</td>
<td>16</td>
</tr>
<tr>
<td>7</td>
<td>CHAR</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>CLOB</td>
<td>2005</td>
</tr>
<tr>
<td>9</td>
<td>DATALINK</td>
<td>70</td>
</tr>
<tr>
<td>10</td>
<td>DATE</td>
<td>91</td>
</tr>
<tr>
<td>11</td>
<td>DECIMAL</td>
<td>3</td>
</tr>
<tr>
<td>12</td>
<td>DISTINCT</td>
<td>2001</td>
</tr>
<tr>
<td>13</td>
<td>DOUBLE</td>
<td>8</td>
</tr>
<tr>
<td>14</td>
<td>FLOAT</td>
<td>6</td>
</tr>
<tr>
<td>15</td>
<td>INTEGER</td>
<td>4</td>
</tr>
<tr>
<td>16</td>
<td>JAVA_OBJECT</td>
<td>2000</td>
</tr>
<tr>
<td>17</td>
<td>LONGNVARCHAR</td>
<td>-16</td>
</tr>
<tr>
<td>18</td>
<td>LONGVARBINARY</td>
<td>-4</td>
</tr>
<tr>
<td>19</td>
<td>LONGVARCHAR</td>
<td>-1</td>
</tr>
<tr>
<td>20</td>
<td>NCHAR</td>
<td>-15</td>
</tr>
<tr>
<td>21</td>
<td>NCLOB</td>
<td>2011</td>
</tr>
<tr>
<td>22</td>
<td>NULL</td>
<td>0</td>
</tr>
<tr>
<td>23</td>
<td>NUMERIC</td>
<td>2</td>
</tr>
<tr>
<td>24</td>
<td>NVARCHAR</td>
<td>-9</td>
</tr>
<tr>
<td>25</td>
<td>OTHER</td>
<td>1111</td>
</tr>
<tr>
<td>26</td>
<td>REAL</td>
<td>7</td>
</tr>
<tr>
<td>27</td>
<td>REF</td>
<td>2006</td>
</tr>
<tr>
<td>28</td>
<td>ROWID</td>
<td>-8</td>
</tr>
<tr>
<td>29</td>
<td>SMALLINT</td>
<td>5</td>
</tr>
<tr>
<td>30</td>
<td>SQLXML</td>
<td>2009</td>
</tr>
<tr>
<td>31</td>
<td>STRUCT</td>
<td>2002</td>
</tr>
<tr>
<td>32</td>
<td>TIME</td>
<td>92</td>
</tr>
<tr>
<td>33</td>
<td>TIMESTAMP</td>
<td>93</td>
</tr>
<tr>
<td>34</td>
<td>TINYINT</td>
<td>-6</td>
</tr>
<tr>
<td>35</td>
<td>VARBINARY</td>
<td>-3</td>
</tr>
<tr>
<td>36</td>
<td>VARCHAR</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>根据错误代码就可以找到我们是哪一种错误。</p>
<p>比如：我这次出现的错误的是No Dialect mapping for JDBC type: 1111<br>输入 序号25 中的 other 。<br>复制sql 执行查询发现，它查出的数据库类型是<code>unknown</code>。</p>
<p>现在知道了问题所在，可以执行sql 的时候指定数据类型，各种数据库都有相应的函数或方法转换。</p>
<p>例外，如果是方言配置错误，需要配置正确的方言。</p>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>既然是方言的问题，我们可以取看下方言的实现，我使用的是postgresql，就以它为例，它的实现其实就是这样的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostgreSQL81Dialect</span> <span class="keyword">extends</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * Constructs a PostgreSQL81Dialect</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PostgreSQL81Dialect</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		registerColumnType( Types.BIT, <span class="string">"bool"</span> );</div><div class="line">		registerColumnType( Types.BIGINT, <span class="string">"int8"</span> );</div><div class="line">		registerColumnType( Types.SMALLINT, <span class="string">"int2"</span> );</div><div class="line">		registerColumnType( Types.TINYINT, <span class="string">"int2"</span> );</div><div class="line">		registerColumnType( Types.INTEGER, <span class="string">"int4"</span> );</div><div class="line">		registerColumnType( Types.CHAR, <span class="string">"char(1)"</span> );</div><div class="line">		registerColumnType( Types.VARCHAR, <span class="string">"varchar($l)"</span> );</div><div class="line">		registerColumnType( Types.FLOAT, <span class="string">"float4"</span> );</div><div class="line">		registerColumnType( Types.DOUBLE, <span class="string">"float8"</span> );</div><div class="line">		registerColumnType( Types.DATE, <span class="string">"date"</span> );</div><div class="line">		registerColumnType( Types.TIME, <span class="string">"time"</span> );</div><div class="line">		registerColumnType( Types.TIMESTAMP, <span class="string">"timestamp"</span> );</div><div class="line">		registerColumnType( Types.VARBINARY, <span class="string">"bytea"</span> );</div><div class="line">		registerColumnType( Types.BINARY, <span class="string">"bytea"</span> );</div><div class="line">		registerColumnType( Types.LONGVARCHAR, <span class="string">"text"</span> );</div><div class="line">		registerColumnType( Types.LONGVARBINARY, <span class="string">"bytea"</span> );</div><div class="line">		registerColumnType( Types.CLOB, <span class="string">"text"</span> );</div><div class="line">		registerColumnType( Types.BLOB, <span class="string">"oid"</span> );</div><div class="line">		registerColumnType( Types.NUMERIC, <span class="string">"numeric($p, $s)"</span> );</div><div class="line">		registerColumnType( Types.OTHER, <span class="string">"uuid"</span> );</div><div class="line"></div><div class="line">		registerFunction( <span class="string">"abs"</span>, <span class="keyword">new</span> StandardSQLFunction(<span class="string">"abs"</span>) );</div><div class="line">		registerFunction( <span class="string">"sign"</span>, <span class="keyword">new</span> StandardSQLFunction(<span class="string">"sign"</span>, StandardBasicTypes.INTEGER) );</div><div class="line">        </div><div class="line">       <span class="comment">//  ……太多了，</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>去看下 java.sql.Types的定义<br><img src="http://image.wuwii.com/java-types.png" alt="image"></p>
<p>明白了它是我们上面表格中状态码定义的地方。</p>
<p>所以我们做一个方言，只要在构造函数中实现相应类型码的对应类类型就可以了，上面是<code>1111</code> 出现错误，我只要将它的类型重新定义为<code>text</code>即可，就是它怎么写的我们就怎么写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.dialect.PostgreSQLDialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.sql.Types.OTHER;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 重写方言，指定代码相应的数据库类型</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/12/11 14:28&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPostgreSQLDialect</span> <span class="keyword">extends</span> <span class="title">PostgreSQLDialect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserPostgreSQLDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        registerColumnType(OTHER, <span class="string">"text"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在数据库的配置文件中，将方言的类改成我们自定义的就OK了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题很简单，就是方言不能把该数据库类型映射到Java中， 方言不认识这个数据库类型。&lt;/p&gt;
&lt;h4 id=&quot;出现原因&quot;&gt;&lt;a href=&quot;#出现原因&quot; class=&quot;headerlink&quot; title=&quot;出现原因&quot;&gt;&lt;/a&gt;出现原因&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;数据库字段类型和JAVA类型不匹配。&lt;/li&gt;
&lt;li&gt;错误地配置了数据库方言。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leaflet加载谷歌地图</title>
    <link href="http://blog.wuwii.com/leaflet-load-googlemap.html"/>
    <id>http://blog.wuwii.com/leaflet-load-googlemap.html</id>
    <published>2017-12-07T15:08:03.000Z</published>
    <updated>2017-12-08T00:36:32.282Z</updated>
    
    <content type="html"><![CDATA[<p>主要是使用： <a rel="external nofollow" target="_blank" href="https://github.com/htoooth/Leaflet.ChineseTmsProviders">ChineseTmsProviders</a> 插件完成的，详细使用可以进入它的文档了解，它还封装加载各种在线地图的方法，以谷歌地图为例。</p>
<ul>
<li><strong>Leaflet</strong>  <em>v-1.2.0</em> </li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Leaflet&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">    &lt;link rel="stylesheet" href="css/</span>leaflet.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body style="</span>position:absolute; left:<span class="number">0</span>; top:<span class="number">0</span>; display:block; width:<span class="number">100</span>%; height:<span class="number">100</span>%; overflow:hidden;<span class="string">"&gt;</span></div><div class="line"><span class="string">&lt;div style="</span>width:<span class="number">100</span>%; height:<span class="number">100</span>%<span class="string">" id="</span>map<span class="string">"&gt;&lt;/div&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;script src="</span>js/leaflet.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">&lt;script src="</span>js/leaflet.ChineseTmsProviders.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;script type='text/javascript'&gt;</span></div><div class="line"><span class="string">    /**</span></div><div class="line"><span class="string">     * 获取谷歌切片图层</span></div><div class="line"><span class="string">     */</span></div><div class="line"><span class="string">    var normalMap = L.tileLayer.chinaProvider('Google.Normal.Map', &#123;</span></div><div class="line"><span class="string">            maxZoom: 18,</span></div><div class="line"><span class="string">            minZoom: 5</span></div><div class="line"><span class="string">        &#125;),</span></div><div class="line"><span class="string">        satelliteMap = L.tileLayer.chinaProvider('Google.Satellite.Map', &#123;</span></div><div class="line"><span class="string">            maxZoom: 18,</span></div><div class="line"><span class="string">            minZoom: 5</span></div><div class="line"><span class="string">        &#125;);</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    var map = L.map("</span>map<span class="string">", &#123;</span></div><div class="line"><span class="string">        center: [30.460742, 114.416269],</span></div><div class="line"><span class="string">        zoom: 15,</span></div><div class="line"><span class="string">        layers: [satelliteMap],</span></div><div class="line"><span class="string">        zoomControl: false</span></div><div class="line"><span class="string">    &#125;);</span></div><div class="line"><span class="string">    /**</span></div><div class="line"><span class="string">     * 图层组</span></div><div class="line"><span class="string">     */</span></div><div class="line"><span class="string">    var baseLayers = &#123;</span></div><div class="line"><span class="string">        "</span>Google <span class="built_in">Map</span><span class="string">": normalMap,</span></div><div class="line"><span class="string">        "</span>Google Image<span class="string">": satelliteMap</span></div><div class="line"><span class="string">    &#125;;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    L.control.layers(baseLayers, null).addTo(map);</span></div><div class="line"><span class="string">    L.control.zoom(&#123;</span></div><div class="line"><span class="string">        zoomInTitle: '放大',</span></div><div class="line"><span class="string">        zoomOutTitle: '缩小'</span></div><div class="line"><span class="string">    &#125;).addTo(map);</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure>
<p>地图：<br><img src="https://i.loli.net/2017/12/07/5a28ab3e0175b.png" alt="image"><br>影像：<br><img src="https://i.loli.net/2017/12/07/5a28ab3f4c7ee.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是使用： &lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;https://github.com/htoooth/Leaflet.ChineseTmsProviders&quot;&gt;ChineseTmsProviders&lt;/a&gt; 插件完成的，详细使用可以进入它的文档了解，它还封装加载各种在线地图的方法，以谷歌地图为例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Leaflet&lt;/strong&gt;  &lt;em&gt;v-1.2.0&lt;/em&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://blog.wuwii.com/tags/js/"/>
    
      <category term="leaflet" scheme="http://blog.wuwii.com/tags/leaflet/"/>
    
  </entry>
  
  <entry>
    <title>并发容器ConcurrentHashMap</title>
    <link href="http://blog.wuwii.com/java-concurrenthashmap.html"/>
    <id>http://blog.wuwii.com/java-concurrenthashmap.html</id>
    <published>2017-12-06T10:22:03.000Z</published>
    <updated>2017-12-07T00:45:54.762Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文出处：<a rel="external nofollow" target="_blank" href="http://pettyandydog.com/2017/07/27/concurrentHashMap/">pettyandydog</a></p>
</blockquote>
<p>HashMap在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触发扩容操作，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，所以HashMap是线程不安全的。<br>我们来了解另一个键值存储集合HashTable，它是线程安全的，它在所有涉及到多线程操作的都加上了synchronized关键字来锁住整个table，这就意味着所有的线程都在竞争一把锁，在多线程的环境下，它是安全的，但是无疑是效率低下的。<br>其实HashTable有很多的优化空间，锁住整个table这么粗暴的方法可以变相的柔和点，比如在多线程的环境下，对不同的数据集进行操作时其实根本就不需要去竞争一个锁，因为他们不同hash值，不会因为rehash造成线程不安全，所以互不影响，这就是锁分离技术，将锁的粒度降低，利用多个锁来控制多个小的table，这就是这篇文章的主角ConcurrentHashMap JDK1.7版本的核心思想。</p>
<p>ConcurrentHashMap可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个ConcurrentHashMap加锁。</p>
<a id="more"></a>
<p>　</p>
<h3 id="JDK1-7的实现"><a href="#JDK1-7的实现" class="headerlink" title="JDK1.7的实现"></a>JDK1.7的实现</h3><p>在java 8 以前ConcurrentHashMap使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p>
<p>java 8 中。实现线程安全的思想已经完全变了，它摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法。它沿用了与它同时期的HashMap版本的思想，底层依然由“数组”+链表+红黑树的方式思想，但是为了做到并发，又增加了很多辅助的类，例如TreeBin，Traverser等对象内部类。</p>
<p>ConcurrentHashMap为了提高本身的并发能力，在内部采用了一个叫做Segment的结构，一个Segment其实就是一个类Hash Table的结构，Segment内部维护了一个链表数组，我们用下面这一幅图来看下ConcurrentHashMap的内部结构：<br>　<br><img src="http://image.wuwii.com/concurrenthashmap1.png" alt="image"><br>　<br>从图中可以看到，ConcurrentHashMap内部分为很多个Segment，每一个Segment拥有一把锁，然后每个Segment（继承ReentrantLock）下面包含很多个HashEntry列表数组。对于一个key，需要经过三次（为什么要hash三次下文会详细讲解）hash操作，才能最终定位这个元素的位置，这三次hash分别为：</p>
<ol>
<li>对于一个key，先进行一次hash操作，得到hash值h1，也即h1 = hash1(key)；</li>
<li>将得到的h1的高几位进行第二次hash，得到hash值h2，也即h2 = hash2(h1高几位)，通过h2能够确定该元素的放在哪个Segment；</li>
<li>将得到的h1进行第三次hash，得到hash值h3，也即h3 = hash3(h1)，通过h3能够确定该元素放置在哪个HashEntry。
　<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4>ConcurrentHashMap的初始化是会通过位与运算来初始化Segment的大小，用ssize来表示，如下所示<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</div><div class="line">    ++sshift;</div><div class="line">    ssize &lt;&lt;= <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如上所示，因为ssize用位于运算来计算（<code>ssize &lt;&lt;=1</code>），所以Segment的大小取值都是以2的N次方，无关concurrencyLevel的取值，当然concurrencyLevel最大只能用16位的二进制来表示，即65536，换句话说，Segment的大小最多65536个，没有指定concurrencyLevel元素初始化，Segment的大小ssize默认为16</p>
<p>每一个Segment元素下的HashEntry的初始化也是按照位于运算来计算，用cap来表示，如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int cap = 1;</div><div class="line">while (cap &lt; c)</div><div class="line">    cap &lt;&lt;= 1;</div></pre></td></tr></table></figure>
<p>如上所示，HashEntry大小的计算也是2的N次方（<code>cap &lt;&lt;=1</code>）， cap的初始值为1，所以HashEntry最小的容量为2</p>
<h4 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h4><p>对于ConcurrentHashMap的数据插入，这里要进行两次Hash去定位数据的存储位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div></pre></td></tr></table></figure></p>
<p>从上Segment的继承体系可以看出，Segment实现了ReentrantLock,也就带有锁的功能，当执行put操作时，会进行第一次key的hash来定位Segment的位置，如果该Segment还没有初始化，即通过CAS操作进行赋值，然后进行第二次hash操作，找到相应的HashEntry的位置，这里会利用继承过来的锁的特性，在将数据插入指定的HashEntry位置时（链表的尾端），会通过继承ReentrantLock的tryLock（）方法尝试去获取锁，如果获取成功就直接插入相应的位置，如果已经有线程获取该Segment的锁，那当前线程会以自旋的方式去继续的调用tryLock（）方法去获取锁，超过指定次数就挂起，等待唤醒。</p>
<h4 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h4><p>ConcurrentHashMap的get操作跟HashMap类似，只是ConcurrentHashMap第一次需要经过一次hash定位到Segment的位置，然后再hash定位到指定的HashEntry，遍历该HashEntry下的链表进行对比，成功就返回，不成功就返回null。</p>
<h4 id="size操作"><a href="#size操作" class="headerlink" title="size操作"></a>size操作</h4><p>计算ConcurrentHashMap的元素大小是一个有趣的问题，因为他是并发操作的，就是在你计算size的时候，他还在并发的插入数据，可能会导致你计算出来的size和你实际的size有相差（在你return size的时候，插入了多个数据），要解决这个问题，JDK1.7版本用两种方案。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) ensureSegment(j).lock(); <span class="comment">// force creation</span></div><div class="line">        &#125;</div><div class="line">        sum = <span class="number">0L</span>;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        overflow = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</div><div class="line">            Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class="line">            <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123; sum += seg.modCount; <span class="keyword">int</span> c = seg.count; <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</div><div class="line">               overflow = <span class="keyword">true</span>;</div><div class="line">            &#125; &#125;</div><div class="line">        <span class="keyword">if</span> (sum == last) <span class="keyword">break</span>;</div><div class="line">        last = sum; &#125; &#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</div><div class="line">            segmentAt(segments, j).unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>第一种方案他会使用不加锁的模式去尝试多次计算ConcurrentHashMap的size，最多三次，比较前后两次计算的结果，结果一致就认为当前没有元素加入，计算的结果是准确的；</li>
<li>第二种方案是如果第一种方案不符合，他就会给每个Segment加上锁，然后计算ConcurrentHashMap的size返回。</li>
</ol>
<h3 id="JDK1-8的实现"><a href="#JDK1-8的实现" class="headerlink" title="JDK1.8的实现"></a>JDK1.8的实现</h3><p>JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap，虽然在JDK1.8中还能看到Segment的数据结构，但是已经简化了属性，只是为了兼容旧版本。<br><img src="http://image.wuwii.com/concurrenthashmap2.png" alt="image"></p>
<p>在深入JDK1.8的put和get实现之前要知道一些常量设计和数据结构，这些是构成ConcurrentHashMap实现结构的基础，下面看一下基本属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// node数组最大容量：2^30=1073741824</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"><span class="comment">// 默认初始值，必须是2的幕数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</div><div class="line"><span class="comment">//数组可能最大值，需要与toArray（）相关方法关联</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"><span class="comment">//并发级别，遗留下来的，为兼容以前的版本</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</div><div class="line"><span class="comment">// 负载因子</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"><span class="comment">// 链表转红黑树阀值,&gt; 8 链表转换为红黑树</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line"><span class="comment">//树转链表阀值，小于等于6（tranfer时，lc、hc=0两个计数器分别++记录原bin、新binTreeNode数量，&lt;=UNTREEIFY_THRESHOLD 则untreeify(lo)）</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</div><div class="line"><span class="comment">// 2^15-1，help resize的最大线程数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</div><div class="line"><span class="comment">// 32-16=16，sizeCtl中记录size大小的偏移量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</div><div class="line"><span class="comment">// forwarding nodes的hash值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; </div><div class="line"><span class="comment">// 树根节点的hash值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; </div><div class="line"><span class="comment">// ReservationNode的hash值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; </div><div class="line"><span class="comment">// 可用处理器数量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</div><div class="line"><span class="comment">//存放node的数组</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</div><div class="line"><span class="comment">/*控制标识符，用来控制table的初始化和扩容的操作，不同的值有不同的含义</span></div><div class="line"><span class="comment"> *当为负数时：-1代表正在初始化，-N代表有N-1个线程正在 进行扩容</span></div><div class="line"><span class="comment"> *当为0时：代表当时的table还没有被初始化</span></div><div class="line"><span class="comment"> *当为正数时：表示初始化或者下一次进行扩容的大小</span></div><div class="line"><span class="comment">private transient volatile int sizeCtl;</span></div></pre></td></tr></table></figure>
<p>基本属性定义了ConcurrentHashMap的一些边界以及操作时的一些控制，下面看一些内部的一些结构组成，这些是整个ConcurrentHashMap整个数据结构的核心。</p>
<h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node是ConcurrentHashMap存储结构的基本单元，继承于HashMap中的Entry，用于存储数据，源代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//链表的数据结构</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    <span class="comment">//val和next都会在扩容时发生变化，所以加上volatile来保持可见性和禁止重排序</span></div><div class="line">    <span class="keyword">volatile</span> V val;</div><div class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</div><div class="line">    Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + val; &#125;</div><div class="line">    <span class="comment">//不允许更新value  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</div><div class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</div><div class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                (k == key || k.equals(key)) &amp;&amp;</div><div class="line">                (v == (u = val) || v.equals(u)));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//用于map中的get（）方法，子类重写</span></div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                K ek;</div><div class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Node数据结构很简单，从上可知，就是一个链表，但是只允许对数据进行查找，不允许进行修改。</p>
<h4 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h4><p>TreeNode继承与Node，但是数据结构换成了二叉树结构，它是红黑树的数据的存储结构，用于红黑树中存储数据，当链表的节点数大于8时会转换成红黑树的结构，他就是通过TreeNode作为存储结构代替Node来转换成黑红树源代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//树形结构的属性定义</span></div><div class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></div><div class="line">    TreeNode&lt;K,V&gt; left;</div><div class="line">    TreeNode&lt;K,V&gt; right;</div><div class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></div><div class="line">    <span class="keyword">boolean</span> red; <span class="comment">//标志红黑树的红节点</span></div><div class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</div><div class="line">             TreeNode&lt;K,V&gt; parent) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, val, next);</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> findTreeNode(h, k, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//根据key查找 从根节点开始找出相应的TreeNode，</span></div><div class="line">    <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">findTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">do</span>  &#123;</div><div class="line">                <span class="keyword">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</div><div class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</div><div class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">                    p = pl;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                    p = pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</div><div class="line">                    <span class="keyword">return</span> p;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</div><div class="line">                    p = pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</div><div class="line">                    p = pl;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</div><div class="line">                          (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                         (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</div><div class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> q;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    p = pl;</div><div class="line">            &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h4><p>TreeBin从字面含义中可以理解为存储树形结构的容器，而树形结构就是指TreeNode，所以TreeBin就是封装TreeNode的容器，它提供转换黑红树的一些条件和锁的控制，部分源码结构如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//指向TreeNode列表和根节点</span></div><div class="line">    TreeNode&lt;K,V&gt; root;</div><div class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</div><div class="line">    <span class="keyword">volatile</span> Thread waiter;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</div><div class="line">    <span class="comment">// 读写锁状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// 获取写锁的状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// 等待写锁的状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// 增加数据时读锁的状态</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化红黑树</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    TreeBin(TreeNode&lt;K,V&gt; b) &#123;</div><div class="line">        <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">this</span>.first = b;</div><div class="line">        TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;</div><div class="line">            next = (TreeNode&lt;K,V&gt;)x.next;</div><div class="line">            x.left = x.right = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</div><div class="line">                x.parent = <span class="keyword">null</span>;</div><div class="line">                x.red = <span class="keyword">false</span>;</div><div class="line">                r = x;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                K k = x.key;</div><div class="line">                <span class="keyword">int</span> h = x.hash;</div><div class="line">                Class&lt;?&gt; kc = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</div><div class="line">                    <span class="keyword">int</span> dir, ph;</div><div class="line">                    K pk = p.key;</div><div class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">                        dir = -<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                        dir = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</div><div class="line">                              (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</div><div class="line">                             (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</div><div class="line">                        dir = tieBreakOrder(k, pk);</div><div class="line">                        TreeNode&lt;K,V&gt; xp = p;</div><div class="line">                    <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</div><div class="line">                        x.parent = xp;</div><div class="line">                        <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</div><div class="line">                            xp.left = x;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            xp.right = x;</div><div class="line">                        r = balanceInsertion(r, x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.root = r;</div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><p>通过一个简单的例子以debug的视角看看ConcurrentHashMap的具体操作细节。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConcurrentHashMap</span></span>&#123;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        ConcurrentHashMap&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap(); <span class="comment">//初始化ConcurrentHashMap</span></div><div class="line">        <span class="comment">//新增个人信息</span></div><div class="line">        map.put(<span class="string">"id"</span>,<span class="string">"1"</span>);</div><div class="line">        map.put(<span class="string">"name"</span>,<span class="string">"andy"</span>);</div><div class="line">        map.put(<span class="string">"sex"</span>,<span class="string">"男"</span>);</div><div class="line">        <span class="comment">//获取姓名</span></div><div class="line">        String name = map.get(<span class="string">"name"</span>);</div><div class="line">        Assert.assertEquals(name,<span class="string">"andy"</span>);</div><div class="line">        <span class="comment">//计算大小</span></div><div class="line">        <span class="keyword">int</span> size = map.size();</div><div class="line">        Assert.assertEquals(size,<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过new ConcurrentHashMap()来进行初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由上你会发现ConcurrentHashMap的初始化其实是一个空实现，并没有做任何事，这里后面会讲到，这也是和其他的集合类有区别的地方，初始化操作并不是在构造函数实现的，而是在put操作中实现，当然ConcurrentHashMap还提供了其他的构造函数，有指定容量大小或者指定负载因子，跟HashMap一样，这里就不做介绍了。</p>
<h4 id="put操作-1"><a href="#put操作-1" class="headerlink" title="put操作"></a>put操作</h4><p>在上面的例子中我们新增个人信息会调用put方法，我们来看下它的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">int</span> hash = spread(key.hashCode()); <span class="comment">//两次hash，减少hash冲突，可以均匀分布</span></div><div class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123; <span class="comment">//对这个table进行迭代</span></div><div class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</div><div class="line">        <span class="comment">//这里就是上面构造方法没有进行初始化，在这里进行判断，为null就调用initTable进行初始化，属于懒汉模式初始化</span></div><div class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">            tab = initTable();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;<span class="comment">//如果i位置没有数据，就直接无锁插入</span></div><div class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</div><div class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</div><div class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)<span class="comment">//如果在进行扩容，则先进行扩容操作</span></div><div class="line">            tab = helpTransfer(tab, f);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            V oldVal = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">//如果以上条件都不满足，那就要进行加锁操作，也就是存在hash冲突，锁住链表或者红黑树的头结点</span></div><div class="line">            <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">//表示该节点是链表结构</span></div><div class="line">                        binCount = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                            K ek;</div><div class="line">                            <span class="comment">//这里涉及到相同的key进行put就会覆盖原先的value</span></div><div class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                                ((ek = e.key) == key ||</div><div class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                                oldVal = e.val;</div><div class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                    e.val = value;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                            Node&lt;K,V&gt; pred = e;</div><div class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;  <span class="comment">//插入链表尾部</span></div><div class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</div><div class="line">                                                          value, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;<span class="comment">//红黑树结构</span></div><div class="line">                        Node&lt;K,V&gt; p;</div><div class="line">                        binCount = <span class="number">2</span>;</div><div class="line">                        <span class="comment">//红黑树结构旋转插入</span></div><div class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</div><div class="line">                            oldVal = p.val;</div><div class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                p.val = value;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123; </div><div class="line">            <span class="comment">// 如果链表的长度大于8时就会进行红黑树的转换</span></div><div class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">                    treeifyBin(tab, i);</div><div class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> oldVal;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    addCount(<span class="number">1L</span>, binCount);<span class="comment">//统计size，并且检查是否需要扩容</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个put的过程很清晰，对当前的table进行无条件自循环直到put成功，可以分成以下六步流程来概述。</p>
<ol>
<li>如果没有初始化就先调用initTable（）方法来进行初始化过程</li>
<li>如果没有hash冲突就直接CAS插入</li>
<li>如果还在进行扩容操作就先进行扩容</li>
<li>如果存在hash冲突，就加锁来保证线程安全，这里有两种情况，一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入，</li>
<li>最后一个如果该链表的数量大于阈值8，就要先转换成黑红树的结构，break再一次进入循环</li>
<li>如果添加成功就调用addCount（）方法统计size，并且检查是否需要扩容</li>
</ol>
<h5 id="第一步-initTable（）"><a href="#第一步-initTable（）" class="headerlink" title="第一步 initTable（）"></a>第一步 initTable（）</h5><p>现在我们来对每一步的细节进行源码分析，在第一步中，符合条件会进行初始化操作，我们来看看initTable（）方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Initializes table, using the size recorded in sizeCtl.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;<span class="comment">//空的table才能进入初始化操作</span></div><div class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>) <span class="comment">//sizeCtl&lt;0表示其他线程已经在初始化了或者扩容了，挂起当前线程 </span></div><div class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;<span class="comment">//CAS操作SIZECTL为-1，表示初始化状态</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];<span class="comment">//初始化</span></div><div class="line">                    table = tab = nt;</div><div class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);<span class="comment">//记录下次扩容的大小</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="第二步-Unsafe"><a href="#第二步-Unsafe" class="headerlink" title="第二步 Unsafe"></a>第二步 Unsafe</h5><p>在第二步中没有hash冲突就直接调用Unsafe的方法CAS插入该元素，进入第三步如果容器正在扩容，则会调用helpTransfer（）方法帮助扩容，现在我们跟进helpTransfer（）方法看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *帮助从旧的table的元素复制到新的table中</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</div><div class="line">    Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</div><div class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123; <span class="comment">//新的table nextTba已经存在前提下才能帮助扩容</span></div><div class="line">        <span class="keyword">int</span> rs = resizeStamp(tab.length);</div><div class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</div><div class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</div><div class="line">                transfer(tab, nextTab);<span class="comment">//调用扩容方法</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nextTab;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> table;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实helpTransfer（）方法的目的就是调用多个工作线程一起帮助进行扩容，这样的效率就会更高，而不是只有检查到要扩容的那个线程进行扩容操作，其他线程就要等待扩容操作完成才能工作。</p>
<h5 id="第三步-扩容transfer（）"><a href="#第三步-扩容transfer（）" class="headerlink" title="第三步 扩容transfer（）"></a>第三步 扩容transfer（）</h5><p>既然这里涉及到扩容的操作，我们也一起来看看扩容方法transfer（）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = tab.length, stride;</div><div class="line">        <span class="comment">// 每核处理的量小于16，则强制赋值16</span></div><div class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></div><div class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];        <span class="comment">//构建一个nextTable对象，其容量为原来容量的两倍</span></div><div class="line">                nextTab = nt;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></div><div class="line">                sizeCtl = Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            nextTable = nextTab;</div><div class="line">            transferIndex = n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> nextn = nextTab.length;</div><div class="line">        <span class="comment">// 连接点指针，用于标志位（fwd的hash值为-1，fwd.nextTable=nextTab）</span></div><div class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</div><div class="line">        <span class="comment">// 当advance == true时，表明该节点已经处理过了</span></div><div class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</div><div class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</div><div class="line">            <span class="comment">// 控制 --i ,遍历原hash表中的节点</span></div><div class="line">            <span class="keyword">while</span> (advance) &#123;</div><div class="line">                <span class="keyword">int</span> nextIndex, nextBound;</div><div class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    i = -<span class="number">1</span>;</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 用CAS计算得到的transferIndex</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</div><div class="line">                        (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</div><div class="line">                                nextBound = (nextIndex &gt; stride ?</div><div class="line">                                        nextIndex - stride : <span class="number">0</span>))) &#123;</div><div class="line">                    bound = nextBound;</div><div class="line">                    i = nextIndex - <span class="number">1</span>;</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class="line">                <span class="keyword">int</span> sc;</div><div class="line">                <span class="comment">// 已经完成所有节点复制了</span></div><div class="line">                <span class="keyword">if</span> (finishing) &#123;</div><div class="line">                    nextTable = <span class="keyword">null</span>;</div><div class="line">                    table = nextTab;        <span class="comment">// table 指向nextTable</span></div><div class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);     <span class="comment">// sizeCtl阈值为原来的1.5倍</span></div><div class="line">                    <span class="keyword">return</span>;     <span class="comment">// 跳出死循环，</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">// CAS 更扩容阈值，在这里面sizectl值减一，说明新加入一个线程参与到扩容操作</span></div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    finishing = advance = <span class="keyword">true</span>;</div><div class="line">                    i = n; <span class="comment">// recheck before commit</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 遍历的节点为null，则放入到ForwardingNode 指针节点</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</div><div class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</div><div class="line">            <span class="comment">// f.hash == -1 表示遍历到了ForwardingNode节点，意味着该节点已经处理过了</span></div><div class="line">            <span class="comment">// 这里是控制并发扩容的核心</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 节点加锁</span></div><div class="line">                <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                    <span class="comment">// 节点复制工作</span></div><div class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                        Node&lt;K,V&gt; ln, hn;</div><div class="line">                        <span class="comment">// fh &gt;= 0 ,表示为链表节点</span></div><div class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// 构造两个链表  一个是原链表  另一个是原链表的反序排列</span></div><div class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</div><div class="line">                            Node&lt;K,V&gt; lastRun = f;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</div><div class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</div><div class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</div><div class="line">                                    runBit = b;</div><div class="line">                                    lastRun = p;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</div><div class="line">                                ln = lastRun;</div><div class="line">                                hn = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                hn = lastRun;</div><div class="line">                                ln = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</div><div class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">// 在nextTable i 位置处插上链表</span></div><div class="line">                            setTabAt(nextTab, i, ln);</div><div class="line">                            <span class="comment">// 在nextTable i + n 位置处插上链表</span></div><div class="line">                            setTabAt(nextTab, i + n, hn);</div><div class="line">                            <span class="comment">// 在table i 位置处插上ForwardingNode 表示该节点已经处理过了</span></div><div class="line">                            setTabAt(tab, i, fwd);</div><div class="line">                            <span class="comment">// advance = true 可以执行--i动作，遍历节点</span></div><div class="line">                            advance = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 如果是TreeBin，则按照红黑树进行处理，处理逻辑与上面一致</span></div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                                <span class="keyword">int</span> h = e.hash;</div><div class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</div><div class="line">                                        (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</div><div class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                                        lo = p;</div><div class="line">                                    <span class="keyword">else</span></div><div class="line">                                        loTail.next = p;</div><div class="line">                                    loTail = p;</div><div class="line">                                    ++lc;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                                        hi = p;</div><div class="line">                                    <span class="keyword">else</span></div><div class="line">                                        hiTail.next = p;</div><div class="line">                                    hiTail = p;</div><div class="line">                                    ++hc;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">// 扩容后树节点个数若&lt;=6，将树转链表</span></div><div class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class="line">                                    (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</div><div class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class="line">                                    (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</div><div class="line">                            setTabAt(nextTab, i, ln);</div><div class="line">                            setTabAt(nextTab, i + n, hn);</div><div class="line">                            setTabAt(tab, i, fwd);</div><div class="line">                            advance = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>扩容过程有点复杂，这里主要涉及到多线程并发扩容,ForwardingNode的作用就是支持扩容操作，将已处理的节点和空节点置为ForwardingNode，并发处理时多个线程经过ForwardingNode就表示已经遍历了，就往后遍历，下图是多线程合作扩容的过程：<br><img src="http://image.wuwii.com/concurrenthashmap1.png" alt="image"></p>
<h5 id="第四步-加入"><a href="#第四步-加入" class="headerlink" title="第四步 加入"></a>第四步 加入</h5><p>向链表或者红黑树里加节点</p>
<h5 id="第五步-链表转红黑树"><a href="#第五步-链表转红黑树" class="headerlink" title="第五步 链表转红黑树"></a>第五步 链表转红黑树</h5><p>介绍完扩容过程，我们再次回到put流程，在第四步中是向链表或者红黑树里加节点，到第五步，会调用treeifyBin（）方法进行链表转红黑树的过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//如果整个table的数量小于64，就扩容至原来的一倍，不转红黑树了</span></div><div class="line">        <span class="comment">//因为这个阈值扩容可以减少hash冲突，不必要去转红黑树</span></div><div class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY) </div><div class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (b) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</div><div class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                        <span class="comment">//封装成TreeNode</span></div><div class="line">                        TreeNode&lt;K,V&gt; p =</div><div class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</div><div class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</div><div class="line">                            hd = p;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            tl.next = p;</div><div class="line">                        tl = p;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//通过TreeBin对象对TreeNode转换成红黑树</span></div><div class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="第六步-添加成功addCount（）"><a href="#第六步-添加成功addCount（）" class="headerlink" title="第六步 添加成功addCount（）"></a>第六步 添加成功addCount（）</h5><p>到第六步表示已经数据加入成功了，现在调用addCount()方法计算ConcurrentHashMap的size，在原来的基础上加一，现在来看看addCount()方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</div><div class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</div><div class="line">    <span class="comment">//更新baseCount，table的数量，counterCells表示元素个数的变化</span></div><div class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</div><div class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</div><div class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</div><div class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//如果多个线程都在执行，则CAS失败，执行fullAddCount，全部加入count</span></div><div class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> || </div><div class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</div><div class="line">            !(uncontended =</div><div class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</div><div class="line">            fullAddCount(x, uncontended);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        s = sumCount();</div><div class="line">    &#125;</div><div class="line">     <span class="comment">//check&gt;=0表示需要进行扩容操作</span></div><div class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</div><div class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</div><div class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</div><div class="line">                    transferIndex &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</div><div class="line">                    transfer(tab, nt);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//当前线程发起库哦哦让操作，nextTable=null</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</div><div class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</div><div class="line">                transfer(tab, <span class="keyword">null</span>);</div><div class="line">            s = sumCount();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>put的流程现在已经分析完了，你可以从中发现，他在并发处理中使用的是乐观锁，当有冲突的时候才进行并发处理，而且流程步骤很清晰，但是细节设计的很复杂，毕竟多线程的场景也复杂。</p>
<h4 id="get操作-1"><a href="#get操作-1" class="headerlink" title="get操作"></a>get操作</h4><p>我们现在要回到开始的例子中，我们对个人信息进行了新增之后，我们要获取所新增的信息，使用String name = map.get(“name”)获取新增的name信息，现在我们依旧用debug的方式来分析下ConcurrentHashMap的获取方法get()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</div><div class="line">    <span class="keyword">int</span> h = spread(key.hashCode()); <span class="comment">//计算两次hash</span></div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;<span class="comment">//读取首节点的Node元素</span></div><div class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123; <span class="comment">//如果该节点就是首节点就返回</span></div><div class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</div><div class="line">                <span class="keyword">return</span> e.val;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//hash值为负值表示正在扩容，这个时候查的是ForwardingNode的find方法来定位到nextTable来</span></div><div class="line">        <span class="comment">//查找，查找到就返回</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;<span class="comment">//既不是首节点也不是ForwardingNode，那就往下遍历</span></div><div class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</div><div class="line">                <span class="keyword">return</span> e.val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ConcurrentHashMap的get操作的流程很简单，也很清晰，可以分为三个步骤来描述</p>
<ol>
<li>计算hash值，定位到该table索引位置，如果是首节点符合就返回；</li>
<li>如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回；</li>
<li>以上都不符合的话，就往下遍历节点，匹配就返回，否则最后就返回null。</li>
</ol>
<h4 id="size操作-1"><a href="#size操作-1" class="headerlink" title="size操作"></a>size操作</h4><p>最后我们来看下例子中最后获取size的方式<code>int size = map.size()</code>;，现在让我们看下size()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> n = sumCount();</div><div class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</div><div class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</div><div class="line">            (<span class="keyword">int</span>)n);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    CounterCell[] as = counterCells; CounterCell a; <span class="comment">//变化的数量</span></div><div class="line">    <span class="keyword">long</span> sum = baseCount;</div><div class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</div><div class="line">                sum += a.value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JDK1.8版本中，对于size的计算，在扩容和addCount()方法就已经有处理了，JDK1.7是在调用size()方法才去计算，其实在并发集合中去计算size是没有多大的意义的，因为size是实时在变的，只能计算某一刻的大小，但是某一刻太快了，人的感知是一个时间段，所以并不是很精确。</p>
<h3 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h3><p>其实可以看出JDK1.8版本的ConcurrentHashMap的数据结构已经接近HashMap，相对而言，ConcurrentHashMap只是增加了同步的操作来控制并发，从JDK1.7版本的ReentrantLock+Segment+HashEntry，到JDK1.8版本中synchronized+CAS+HashEntry+红黑树,相对而言，总结如下思考：</p>
<ol>
<li>JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li>
<li>JDK1.8版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构了，由于粒度的降低，实现的复杂度也增加了</li>
<li>JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</li>
<li>JDK1.8为什么使用内置锁synchronized来代替重入锁ReentrantLock，我觉得有以下几点：</li>
</ol>
<ul>
<li>因为粒度降低了，在相对而言的低粒度加锁方式，synchronized并不比ReentrantLock差，在粗粒度加锁中ReentrantLock可能通过Condition来控制各个低粒度的边界，更加的灵活，而在低粒度中，Condition的优势就没有了;  </li>
<li>JVM的开发团队从来都没有放弃synchronized，而且基于JVM的synchronized优化空间更大，使用内嵌的关键字比使用API更加自然</li>
<li>在大量的数据操作下，对于JVM的内存压力，基于API的ReentrantLock会开销更多的内存，虽然不是瓶颈，但是也是一个选择依据</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/u010412719/article/details/52145145">http://blog.csdn.net/u010412719/article/details/52145145</a></li>
<li><a rel="external nofollow" target="_blank" href="http://www.jianshu.com/p/e694f1e868ec">http://www.jianshu.com/p/e694f1e868ec</a></li>
<li><a rel="external nofollow" target="_blank" href="https://my.oschina.net/liuxiaomian/blog/880088">https://my.oschina.net/liuxiaomian/blog/880088</a></li>
<li><a rel="external nofollow" target="_blank" href="https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/">https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/</a></li>
<li><a rel="external nofollow" target="_blank" href="http://cmsblogs.com/?p=2283">http://cmsblogs.com/?p=2283</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文出处：&lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;http://pettyandydog.com/2017/07/27/concurrentHashMap/&quot;&gt;pettyandydog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HashMap在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触发扩容操作，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，所以HashMap是线程不安全的。&lt;br&gt;我们来了解另一个键值存储集合HashTable，它是线程安全的，它在所有涉及到多线程操作的都加上了synchronized关键字来锁住整个table，这就意味着所有的线程都在竞争一把锁，在多线程的环境下，它是安全的，但是无疑是效率低下的。&lt;br&gt;其实HashTable有很多的优化空间，锁住整个table这么粗暴的方法可以变相的柔和点，比如在多线程的环境下，对不同的数据集进行操作时其实根本就不需要去竞争一个锁，因为他们不同hash值，不会因为rehash造成线程不安全，所以互不影响，这就是锁分离技术，将锁的粒度降低，利用多个锁来控制多个小的table，这就是这篇文章的主角ConcurrentHashMap JDK1.7版本的核心思想。&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个ConcurrentHashMap加锁。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://blog.wuwii.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition</title>
    <link href="http://blog.wuwii.com/java-thread-cooperation.html"/>
    <id>http://blog.wuwii.com/java-thread-cooperation.html</id>
    <published>2017-12-06T09:28:03.000Z</published>
    <updated>2017-12-06T09:25:03.157Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接 <a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920385.html">Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition</a></p>
<p>在前面我们将了很多关于同步的问题，然而在现实中，需要线程之间的协作。比如说最经典的生产者-消费者模型：当队列满时，生产者需要等待队列有空间才能继续往里面放入商品，而在等待的期间内，生产者必须释放对临界资源（即队列）的占用权。因为生产者如果不释放对临界资源的占用权，那么消费者就无法消费队列中的商品，就不会让队列有空间，那么生产者就会一直无限等待下去。因此，一般情况下，当队列满时，会让生产者交出对临界资源的占用权，并进入挂起状态。然后等待消费者消费了商品，然后消费者通知生产者队列有空间了。同样地，当队列空时，消费者也必须等待，等待生产者通知它队列中有商品了。这种互相通信的过程就是线程间的协作。</p>
<a id="more"></a>
<p>今天我们就来探讨一下Java中线程协作的最常见的两种方式：利用Object.wait()、Object.notify()和使用Condition。</p>
<h3 id="wait-、notify-和notifyAll"><a href="#wait-、notify-和notifyAll" class="headerlink" title="wait()、notify()和notifyAll()"></a>wait()、notify()和notifyAll()</h3><p>wait()、notify()和notifyAll()是Object类中的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Wakes up a single thread that is waiting on this object's</span></div><div class="line"><span class="comment"> * monitor. If any threads are waiting on this object, one of them</span></div><div class="line"><span class="comment"> * is chosen to be awakened. The choice is arbitrary and occurs at</span></div><div class="line"><span class="comment"> * the discretion of the implementation. A thread waits on an object's</span></div><div class="line"><span class="comment"> * monitor by calling one of the wait methods</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Wakes up all threads that are waiting on this object's monitor. A</span></div><div class="line"><span class="comment"> * thread waits on an object's monitor by calling one of the</span></div><div class="line"><span class="comment"> * wait methods.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Causes the current thread to wait until either another thread invokes the</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.lang.Object#notify()&#125; method or the</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.lang.Object#notifyAll()&#125; method for this object, or a</span></div><div class="line"><span class="comment"> * specified amount of time has elapsed.</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * The current thread must own this object's monitor.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</div></pre></td></tr></table></figure></p>
<p>从这三个方法的文字描述可以知道以下几点信息：</p>
<p>　　1. wait()、notify()和notifyAll()方法是本地方法，并且为final方法，无法被重写。</p>
<p>　　2. 调用某个对象的wait()方法能让当前线程阻塞，并且当前线程必须拥有此对象的monitor（即锁）</p>
<p>　　3. 调用某个对象的notify()方法能够唤醒一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；</p>
<p>　　4. 调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程；</p>
<p>　　有朋友可能会有疑问：为何这三个不是Thread类声明中的方法，而是Object类中声明的方法（当然由于Thread类继承了Object类，所以Thread也可以调用者三个方法）？其实这个问题很简单，由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。而不是用当前线程来操作，因为当前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂了。</p>
<p>　　上面已经提到，如果调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</p>
<p>　　调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁）；</p>
<p>　　notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。</p>
<p>　　同样地，调用某个对象的notify()方法，当前线程也必须拥有这个对象的monitor，因此调用notify()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</p>
<p>　　nofityAll()方法能够唤醒所有正在等待该对象的monitor的线程，这一点与notify()方法是不同的。</p>
<p>　　这里要注意一点：notify()和notifyAll()方法只是唤醒等待该对象的monitor的线程，并不决定哪个线程能够获取到monitor。</p>
<p>　　举个简单的例子：假如有三个线程Thread1、Thread2和Thread3都在等待对象objectA的monitor，此时Thread4拥有对象objectA的monitor，当在Thread4中调用objectA.notify()方法之后，Thread1、Thread2和Thread3只有一个能被唤醒。注意，被唤醒不等于立刻就获取了objectA的monitor。假若在Thread4中调用objectA.notifyAll()方法，则Thread1、Thread2和Thread3三个线程都会被唤醒，至于哪个线程接下来能够获取到objectA的monitor就具体依赖于操作系统的调度了。</p>
<p>　　上面尤其要注意一点，一个线程被唤醒不代表立即获取了对象的monitor，只有等调用完notify()或者notifyAll()并退出synchronized块，释放对象锁后，其余线程才可获得锁执行。</p>
<p>下面看一个例子就明白了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</div><div class="line">        Thread2 thread2 = <span class="keyword">new</span> Thread2();</div><div class="line">         </div><div class="line">        thread1.start();</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">200</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (object) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    object.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"获取到了锁"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (object) &#123;</div><div class="line">                object.notify();</div><div class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"调用了object.notify()"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"释放了锁"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无论运行多少次，运行结果必定是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">线程Thread-1调用了object.notify()</div><div class="line">线程Thread-1释放了锁</div><div class="line">线程Thread-0获取到了锁</div></pre></td></tr></table></figure></p>
<h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>Condition是在java 1.5中才出现的，它用来替代传统的Object的wait()、notify()实现线程间的协作，相比使用Object的wait()、notify()，使用Condition1的await()、signal()这种方式实现线程间协作更加安全和高效。因此通常来说比较推荐使用Condition，在阻塞队列那一篇博文中就讲述到了，阻塞队列实际上是使用了Condition来模拟线程间协作。</p>
<ul>
<li>Condition是个接口，基本的方法就是await()和signal()方法；</li>
<li>Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition()；</li>
<li>调用Condition的await()和signal()方法，都必须在lock保护之内，就是说必须在lock.lock()和lock.unlock之间才可以使用。</li>
</ul>
<p>Conditon中的await()对应Object的wait()；</p>
<p>Condition中的signal()对应Object的notify()；</p>
<p>Condition中的signalAll()对应Object的notifyAll()。
　　</p>
<h3 id="生产者-消费者模型的实现"><a href="#生产者-消费者模型的实现" class="headerlink" title="生产者-消费者模型的实现"></a>生产者-消费者模型的实现</h3><h4 id="使用Object的wait-和notify-实现"><a href="#使用Object的wait-和notify-实现" class="headerlink" title="使用Object的wait()和notify()实现"></a>使用Object的wait()和notify()实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        Producer producer = test.new Producer();</div><div class="line">        Consumer consumer = test.new Consumer();</div><div class="line">          </div><div class="line">        producer.start();</div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            consume();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">synchronized</span> (queue) &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列空，等待数据"</span>);</div><div class="line">                            queue.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                            queue.notify();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.poll();          <span class="comment">//每次移走队首元素</span></div><div class="line">                    queue.notify();</div><div class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            produce();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">synchronized</span> (queue) &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == queueSize)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列满，等待有空余空间"</span>);</div><div class="line">                            queue.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                            queue.notify();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.offer(<span class="number">1</span>);        <span class="comment">//每次插入一个元素</span></div><div class="line">                    queue.notify();</div><div class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用Condition实现"><a href="#使用Condition实现" class="headerlink" title="使用Condition实现"></a>使用Condition实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</div><div class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> Condition notFull = lock.newCondition();</div><div class="line">    <span class="keyword">private</span> Condition notEmpty = lock.newCondition();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        Producer producer = test.new Producer();</div><div class="line">        Consumer consumer = test.new Consumer();</div><div class="line">          </div><div class="line">        producer.start();</div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            consume();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                lock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列空，等待数据"</span>);</div><div class="line">                            notEmpty.await();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.poll();                <span class="comment">//每次移走队首元素</span></div><div class="line">                    notFull.signal();</div><div class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</div><div class="line">                &#125; <span class="keyword">finally</span>&#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            produce();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                lock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == queueSize)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列满，等待有空余空间"</span>);</div><div class="line">                            notFull.await();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.offer(<span class="number">1</span>);        <span class="comment">//每次插入一个元素</span></div><div class="line">                    notEmpty.signal();</div><div class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</div><div class="line">                &#125; <span class="keyword">finally</span>&#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>《Java编程思想》</li>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/ns_code/article/details/17225469">http://blog.csdn.net/ns_code/article/details/17225469</a></li>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/ghsau/article/details/7481142">http://blog.csdn.net/ghsau/article/details/7481142</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接 &lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;http://www.cnblogs.com/dolphin0520/p/3920385.html&quot;&gt;Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在前面我们将了很多关于同步的问题，然而在现实中，需要线程之间的协作。比如说最经典的生产者-消费者模型：当队列满时，生产者需要等待队列有空间才能继续往里面放入商品，而在等待的期间内，生产者必须释放对临界资源（即队列）的占用权。因为生产者如果不释放对临界资源的占用权，那么消费者就无法消费队列中的商品，就不会让队列有空间，那么生产者就会一直无限等待下去。因此，一般情况下，当队列满时，会让生产者交出对临界资源的占用权，并进入挂起状态。然后等待消费者消费了商品，然后消费者通知生产者队列有空间了。同样地，当队列空时，消费者也必须等待，等待生产者通知它队列中有商品了。这种互相通信的过程就是线程间的协作。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://blog.wuwii.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Java开发手册中容易踩的坑</title>
    <link href="http://blog.wuwii.com/alibaba-java-prochip.html"/>
    <id>http://blog.wuwii.com/alibaba-java-prochip.html</id>
    <published>2017-12-06T03:48:03.000Z</published>
    <updated>2017-12-06T09:43:13.654Z</updated>
    
    <content type="html"><![CDATA[<p>阿里巴巴Java开发手册地址：<a rel="external nofollow" target="_blank" href="https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BA%AA%E5%BF%B5%E7%89%88%EF%BC%89.pdf">阿里巴巴Java开发手册（纪念版）.pdf</a></p>
<p>开始看的时候还是<strong>终极版</strong>，不知道什么时候又出到了<strong>纪念版</strong>，听说之前还有个<strong>完美版</strong>，感觉词穷了，期待下一版本<strong>狗年限定版</strong>。<br>撇开了，<strong>很实用的规范内容，值得看</strong>。</p>
<p>记录下个人需要重点学习的地方，以及平时容易忽略的问题。</p>
<a id="more"></a>
<hr>
<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><h4 id="各层命名规约"><a href="#各层命名规约" class="headerlink" title="各层命名规约"></a>各层命名规约</h4><h5 id="Service-DAO-层方法命名规约"><a href="#Service-DAO-层方法命名规约" class="headerlink" title="Service/DAO 层方法命名规约"></a>Service/DAO 层方法命名规约</h5><ol>
<li>获取单个对象的方法用 get 做前缀。   </li>
<li>获取多个对象的方法用 list 做前缀。  </li>
<li>获取统计值的方法用 count 做前缀。   </li>
<li>插入的方法用 save/insert 做前缀。   </li>
<li>删除的方法用 remove/delete 做前缀。    </li>
<li>修改的方法用 update 做前缀。 </li>
</ol>
<h5 id="领域模型命名规约"><a href="#领域模型命名规约" class="headerlink" title="领域模型命名规约"></a>领域模型命名规约</h5><ol>
<li>数据对象：xxxDO，xxx 即为数据表名。    </li>
<li>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。 </li>
<li>展示对象：xxxVO，xxx 一般为网页名称。  </li>
<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。 </li>
</ol>
<h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><ol>
<li>不允许任何魔法值（即未经定义的常量）直接出现在代码中。 </li>
<li>将包或者工程内部的共享变量，放在相应的constant 下，例如，一个模块下的常量：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 常量</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2016年11月15日 下午1:23:52</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constant</span> </span>&#123;</div><div class="line">	<span class="comment">/** 超级管理员ID */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUPER_ADMIN = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 菜单类型</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@date</span> 2016年11月15日 下午1:24:29</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> MenuType &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 目录</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    	CATALOG(<span class="number">0</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 菜单</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        MENU(<span class="number">1</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 按钮</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        BUTTON(<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MenuType</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 定时任务状态</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ScheduleStatus &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 正常</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    	NORMAL(<span class="number">0</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 暂停</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    	PAUSE(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ScheduleStatus</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 云服务商</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> CloudService &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 七牛云</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        QINIU(<span class="number">1</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 阿里云</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        ALIYUN(<span class="number">2</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 腾讯云</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        QCLOUD(<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CloudService</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="OOP归约"><a href="#OOP归约" class="headerlink" title="OOP归约"></a>OOP归约</h3><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p>
<ul>
<li>正例：”test”.equals(object); </li>
<li>反例：object.equals(“test”); </li>
<li>说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）。</li>
</ul>
<hr>
<p>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。 </p>
<ul>
<li>说明：对于 Integer var = ?  在-128 至 127 范围内的赋值，Integer 对象是在<br>IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑， 推荐使用 equals 方法进行判断。</li>
</ul>
<hr>
<p>关于基本数据类型与包装数据类型的使用标准如下： </p>
<ul>
<li>【强制】所有的 POJO 类属性必须使用包装数据类型。</li>
<li>【强制】RPC 方法的返回值和参数必须使用包装数据类型。 </li>
<li><p>【推荐】所有的局部变量使用基本数据类型。</p>
<ul>
<li>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</li>
<li>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。  </li>
<li>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用 不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装 数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。 </li>
</ul>
</li>
</ul>
<hr>
<p> 【强制】POJO 类必须写 toString 方法。使用 IDE 的中工具：source&gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>
<p> 说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排 查问题。 </p>
<hr>
<p> 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无 内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。 </p>
<p> 说明：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"a,b,c,,"</span>; </div><div class="line">String[] ary = str.split(<span class="string">","</span>); </div><div class="line"><span class="comment">// 预期大于 3，结果是 3</span></div><div class="line">System.out.println(ary.length);</div></pre></td></tr></table></figure></p>
<hr>
<p> 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字： </p>
<ol>
<li>不允许被继承的类，如：String 类。 </li>
<li>不允许修改引用的域对象，如：POJO 类的域变量。  </li>
<li>不允许被重写的方法，如：POJO 类的 setter 方法。 </li>
<li>不允许运行过程中重新赋值的局部变量。</li>
<li>避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好 地进行重构。 </li>
</ol>
<hr>
<p>【推荐】类成员与方法访问控制从严： </p>
<ol>
<li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。  </li>
<li>工具类不允许有 public 或 default 构造方法。  </li>
<li>类非 static 成员变量并且与子类共享，必须是 protected。  </li>
<li>类非 static 成员变量并且仅在本类使用，必须是 private。</li>
<li>类 static 成员变量如果仅在本类使用，必须是 private。 </li>
<li>若是 static 成员变量，必须考虑是否为 final。  </li>
<li>类成员方法只供类内部调用，必须是 private。</li>
<li>类成员方法只对继承类公开，那么限制为 protected。 </li>
</ol>
<ul>
<li>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者 一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的 视线内，变量作用域太大，无限制的到处跑，那么你会担心的。 </li>
</ul>
<h3 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h3><p>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</p>
<ol>
<li>只要重写 equals，就必须重写 hashCode。 </li>
<li>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的 对象必须重写这两个方法。</li>
<li>如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。 说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象 作为 key 来使用。</li>
</ol>
<p>没有特需要求，使用编辑器自动生成的就好，这个对Hash表相关的数据结构的存储和读取有着很大的影响，重写的好，可以减少Hash碰撞。</p>
<hr>
<ul>
<li>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全 一样的数组，大小就是 list.size()。 </li>
<li>说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配 内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[ list.size() ]的数组 元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素 个数一致。 </li>
<li>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它 类型数组将出现 ClassCastException 错误。 </li>
<li>正例： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);   </div><div class="line">list.add(<span class="string">"guan"</span>);      </div><div class="line">list.add(<span class="string">"bao"</span>);      </div><div class="line">String[] array = <span class="keyword">new</span> String[list.size()];    </div><div class="line">array = list.toArray(array);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方 法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。 说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] str = new String[] &#123; &quot;you&quot;, &quot;wu&quot; &#125;;  </div><div class="line">List list = Arrays.asList(str);</div></pre></td></tr></table></figure></p>
<ul>
<li>第一种情况：list.add(“yangguanbao”); 运行时异常。</li>
<li>第二种情况：str[0] = “gujin”; 那么 list.get(0)也会随之修改。 </li>
</ul>
<hr>
<p>【强制】泛型通配符<code>&lt;? extends T&gt;</code>来接收返回的数据，此写法的泛型集合不能使用 add 方 法，而<code>&lt;? super T&gt;</code>不能使用 get 方法，做为接口调用赋值时易出错。 </p>
<hr>
<p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。 </p>
<ul>
<li>正例： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = list.iterator();  </div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;              </div><div class="line">    String item = iterator.next();                       </div><div class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;                              </div><div class="line">        iterator.remove();                 </div><div class="line">    &#125;      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【强制】 在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort， Collections.sort 会报 IllegalArgumentException 异常。 说明：三个条件如下</p>
<ol>
<li>x，y 的比较结果和 y，x 的比较结果相反。 </li>
<li>x&gt;y，y&gt;z，则 x&gt;z。 </li>
<li>x=y，则 x，z 比较结果和 y，z 比较结果相同。 </li>
</ol>
<ul>
<li>反例：下例中没有处理相等的情况，实际使用中可能会出现异常： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;      </div><div class="line">    <span class="meta">@Override</span>         </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>;        </div><div class="line">    &#125;      </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。 </p>
<ul>
<li>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效 率更高。如果是 JDK8，使用 Map.foreach 方法。 </li>
<li>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是 一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。 </li>
</ul>
<hr>
<p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格： </p>
<table>
<thead>
<tr>
<th>集合类</th>
<th>Key</th>
<th>Value</th>
<th>Super</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hashtable</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>Dictionary</td>
<td>线程安全 </td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>AbstractMap</td>
<td>锁分段技术（JDK8:CAS） </td>
</tr>
<tr>
<td>TreeMap</td>
<td>不允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全 </td>
</tr>
<tr>
<td>HashMap</td>
<td>允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全 </td>
</tr>
</tbody>
</table>
<ul>
<li>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上， 存储 null 值时会抛出 NPE 异常。 </li>
</ul>
<hr>
<p>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和 不稳定性(unorder)带来的负面影响。 </p>
<ul>
<li>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次 序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。 </li>
</ul>
<hr>
<p>【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains 方法进行遍历、对比、去重操作。 </p>
<h3 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h3><p>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。 说明：资源驱动类、工具类、单例工厂类都需要注意。 </p>
<hr>
<p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors 返回的线程池对象的弊端如下：</p>
<ol>
<li>FixedThreadPool 和 SingleThreadPool:   允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 </li>
<li>CachedThreadPool 和 ScheduledThreadPool:   允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。 </li>
</ol>
<hr>
<p>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能 锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 </p>
<hr>
<p> 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造 成死锁。 </p>
<ul>
<li>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序 也必须是 A、B、C，否则可能出现死锁。</li>
</ul>
<hr>
<p>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行 至 await 方法，直到超时才返回结果。</p>
<ul>
<li>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</li>
</ul>
<hr>
<p>【推荐】在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优 化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解 决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。 </p>
<hr>
<p>【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题， 但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现： AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推 荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。 </p>
<hr>
<p>【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static 修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享 此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只 要是这个线程内定义的)都可以操控这个变量。 </p>
<hr>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>【强制】在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免采用 单行的编码方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (condition) statements;</div></pre></td></tr></table></figure></p>
<hr>
<p>超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现</p>
<hr>
<p>【参考】下列情形，需要进行参数校验： </p>
<ol>
<li>调用频次低的方法。  </li>
<li>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参 数错误导致中间执行回退，或者错误，那得不偿失。  </li>
<li>需要极高稳定性和可用性的方法。 </li>
<li>对外提供的开放接口，不管是 RPC/API/HTTP 接口。  </li>
<li>敏感权限入口。 </li>
</ol>
<hr>
<p>【参考】下列情形，不需要进行参数校验： </p>
<ol>
<li>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。  </li>
<li>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底 层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所 以 DAO 的参数校验，可以省略。 </li>
<li>被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参 数已经做过检查或者肯定不会有问题，此时可以不校验参数。 </li>
</ol>
<h3 id="注释归约"><a href="#注释归约" class="headerlink" title="注释归约"></a>注释归约</h3><p>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描， 经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p>
<ol>
<li>待办事宜<code>（TODO）</code>:<code>（ 标记人，标记时间，[预计处理时间]）</code>    表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</li>
<li>错误，不能工作<code>（FIXME）</code>:<code>（标记人，标记时间，[预计处理时间]）</code>    在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。 </li>
</ol>
<hr>
<p>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分 说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。 说明：本手册明确<strong>防止 NPE 是调用者的责任</strong>。即使被调用方法返回空集合或者空对象，对调用<br>者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。 </p>
<hr>
<p> 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：  </p>
<ol>
<li>返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。     反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 </li>
<li>数据库的查询结果可能为 null。  </li>
<li>集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。  </li>
<li>远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>
<li>对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</li>
<li>级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。 </li>
</ol>
<ul>
<li>正例：<strong>使用 JDK8 的 Optional 类来防止 NPE 问题。</strong></li>
</ul>
<hr>
<p>【推荐】定义时区分 unchecked / checked 异常，<strong>避免直接抛出 new RuntimeException()， 更不允许抛出 Exception 或者 Throwable</strong>，应使用有业务含义的自定义异常。推荐业界已定义 过的自定义异常，如：DAOException / ServiceException 等。 </p>
<hr>
<p>【参考】<strong>避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则</strong>。</p>
<ul>
<li>说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副 本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。 </li>
<li>正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取</li>
</ul>
<h2 id="日志规约"><a href="#日志规约" class="headerlink" title="日志规约"></a>日志规约</h2><p>【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架 SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger; </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</div></pre></td></tr></table></figure></p>
<hr>
<p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方 式。 </p>
<ul>
<li>说明：logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol); 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象， 会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。 </li>
<li><p>正例：（条件） </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;    </div><div class="line">    logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正例：（占位符） </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 <code>additivity=false</code></p>
<hr>
<p>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过 关键字 throws 往上抛出。 </p>
<ul>
<li>正例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.error(各类参数或者对象 toString + <span class="string">"_"</span> + e.getMessage(), e);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适 从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必 要，请不要在此场景打出 error 级别。 </p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>【强制】好的单元测试必须遵守<code>AIR 原则</code>。 说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上， 却是非常关键的。好的单元测试宏观上来说，<strong>具有自动化、独立性、可重复执行的特点。</strong></p>
<ul>
<li><code>A</code>：Automatic（自动化） </li>
<li><code>I</code>：Independent（独立性） </li>
<li><code>R</code>：Repeatable（可重复） </li>
</ul>
<hr>
<p>【强制】单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行 过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。<strong>单元测 试中不准使用 <code>System.out</code>来进行人肉验证，必须使用 <code>assert</code> 来验证。</strong> </p>
<hr>
<p>【推荐】单元测试的基本目标：<strong>语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都 要达到 100%</strong></p>
<ul>
<li>说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该 进行单元测试。 </li>
</ul>
<hr>
<p>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。 </p>
<ul>
<li><strong>B</strong>：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li>
<li><strong>C</strong>：Correct，正确的输入，并得到预期的结果。 </li>
<li><strong>D</strong>：Design，与设计文档相结合，来编写单元测试。 </li>
<li><strong>E</strong>：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得 到预期的结果。</li>
</ul>
<hr>
<p>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的， 或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。 </p>
<ul>
<li>反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这 一行新增数据并不符合业务插入规则，导致测试结果异常。</li>
</ul>
<hr>
<p>【推荐】<strong>和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者 对单元测试产生的数据有明确的前后缀标识</strong>。 </p>
<ul>
<li>正例：在 RDC 内部单元测试中，使用 RDC_UNIT<em>TEST</em>的前缀标识数据。 </li>
</ul>
<hr>
<p>【推荐】<strong>对于不可测的代码建议做必要的重构，使代码变得可测</strong>，避免为了达到测试要求而 书写不规范测试代码。 </p>
<hr>
<p>【参考】为了更方便地进行单元测试，业务代码应避免以下情况： </p>
<ul>
<li>构造方法中做的事情过多。 </li>
<li>存在过多的全局变量和静态方法。 </li>
<li>存在过多的外部依赖。</li>
<li>存在过多的条件语句。</li>
</ul>
<p><strong>说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</strong> </p>
<hr>
<p>【参考】不要对单元测试存在如下误解： </p>
<ul>
<li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。 </li>
<li>单元测试代码是多余的。汽车的整体功能与各单元部件的测试正常与否是强相关的。 </li>
<li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>
<li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。 </li>
</ul>
<h2 id="安全规约"><a href="#安全规约" class="headerlink" title="安全规约"></a>安全规约</h2><p>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</p>
<ul>
<li>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信 内容、修改他人的订单。 </li>
</ul>
<hr>
<p>【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。 </p>
<ul>
<li>说明：查看个人手机号码会显示成:<code>158****9119</code>，隐藏中间 4 位，防止隐私泄露。 </li>
</ul>
<hr>
<p> 【强制】用户请求传入的任何参数必须做有效性验证。</p>
<ul>
<li>说明：忽略参数校验可能导致的问题： <ul>
<li>page size 过大导致内存溢出 </li>
<li>恶意 order by 导致数据库慢查询 </li>
<li>任意重定向  </li>
<li>SQL 注入 </li>
<li>反序列化注入 </li>
<li>正则输入源串拒绝服务 ReDoS </li>
</ul>
</li>
</ul>
<p><strong>说明</strong>：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题， 但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p>
<hr>
<p>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的<strong>防重放限制</strong>， 如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。 </p>
<ul>
<li>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其 它用户，并造成短信平台资源浪费。</li>
</ul>
<hr>
<p>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须<strong>实现防刷、文本内容违禁词过 滤等风控策略</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿里巴巴Java开发手册地址：&lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BA%AA%E5%BF%B5%E7%89%88%EF%BC%89.pdf&quot;&gt;阿里巴巴Java开发手册（纪念版）.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开始看的时候还是&lt;strong&gt;终极版&lt;/strong&gt;，不知道什么时候又出到了&lt;strong&gt;纪念版&lt;/strong&gt;，听说之前还有个&lt;strong&gt;完美版&lt;/strong&gt;，感觉词穷了，期待下一版本&lt;strong&gt;狗年限定版&lt;/strong&gt;。&lt;br&gt;撇开了，&lt;strong&gt;很实用的规范内容，值得看&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;记录下个人需要重点学习的地方，以及平时容易忽略的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>BeanUtils的复制</title>
    <link href="http://blog.wuwii.com/spring-beanutils.html"/>
    <id>http://blog.wuwii.com/spring-beanutils.html</id>
    <published>2017-12-03T14:08:03.000Z</published>
    <updated>2017-12-05T03:08:13.981Z</updated>
    
    <content type="html"><![CDATA[<p>有一个子类继承了父类的属性，但是有很多属性值需要复制，单纯的靠set 或者构造函数肯定很不美观，出于“懒”的目的，了解到spring beans里面提供了BeanUtils工具类，看下copyProperties方法满足需要，是用反射做的。</p>
<a id="more"></a>
<h4 id="方法源码"><a href="#方法源码" class="headerlink" title="方法源码"></a>方法源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">	 * Copy the property values of the given source bean into the given target bean.</span></div><div class="line"><span class="comment">	 * &lt;p&gt;Note: The source and target classes do not have to match or even be derived</span></div><div class="line"><span class="comment">	 * from each other, as long as the properties match. Any bean properties that the</span></div><div class="line"><span class="comment">	 * source bean exposes but the target bean does not will silently be ignored.</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> source the source bean</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> target the target bean</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> editable the class (or interface) to restrict property setting to</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> ignoreProperties array of property names to ignore</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> BeansException if the copying failed</span></div><div class="line"><span class="comment">	 * <span class="doctag">@see</span> BeanWrapper</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Object source, Object target, Class&lt;?&gt; editable, String... ignoreProperties)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"></div><div class="line">		Assert.notNull(source, <span class="string">"Source must not be null"</span>);</div><div class="line">		Assert.notNull(target, <span class="string">"Target must not be null"</span>);</div><div class="line"></div><div class="line">		Class&lt;?&gt; actualEditable = target.getClass();</div><div class="line">		<span class="keyword">if</span> (editable != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!editable.isInstance(target)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Target class ["</span> + target.getClass().getName() +</div><div class="line">						<span class="string">"] not assignable to Editable class ["</span> + editable.getName() + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			actualEditable = editable;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//获取targetCLass所有属性及属性的它set,get的方法，描述属性</span></div><div class="line">		PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);</div><div class="line">		List&lt;String&gt; ignoreList = (ignoreProperties != <span class="keyword">null</span> ? Arrays.asList(ignoreProperties) : <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="comment">//遍历每个属性</span></div><div class="line">		<span class="keyword">for</span> (PropertyDescriptor targetPd : targetPds) &#123;</div><div class="line">		    <span class="comment">//根据 这个属性 获取目标类的set方法</span></div><div class="line">			Method writeMethod = targetPd.getWriteMethod();</div><div class="line">			<span class="comment">//检测</span></div><div class="line">			<span class="keyword">if</span> (writeMethod != <span class="keyword">null</span> &amp;&amp; (ignoreList == <span class="keyword">null</span> || !ignoreList.contains(targetPd.getName()))) &#123;</div><div class="line">				<span class="comment">// 获取 源类 的相应的描述属性</span></div><div class="line">				PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());</div><div class="line">				<span class="keyword">if</span> (sourcePd != <span class="keyword">null</span>) &#123;</div><div class="line">				    <span class="comment">// 获取源类的get方法</span></div><div class="line">					Method readMethod = sourcePd.getReadMethod();</div><div class="line">					<span class="comment">//检测方法，然后获取值，写入</span></div><div class="line">					<span class="keyword">if</span> (readMethod != <span class="keyword">null</span> &amp;&amp;</div><div class="line">							ClassUtils.isAssignable(writeMethod.getParameterTypes()[<span class="number">0</span>], readMethod.getReturnType())) &#123;</div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							<span class="keyword">if</span> (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) &#123;</div><div class="line">								readMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">							&#125;</div><div class="line">							Object value = readMethod.invoke(source);</div><div class="line">							<span class="keyword">if</span> (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) &#123;</div><div class="line">								writeMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">							&#125;</div><div class="line">							writeMethod.invoke(target, value);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(</div><div class="line">									<span class="string">"Could not copy property '"</span> + targetPd.getName() + <span class="string">"' from source to target"</span>, ex);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>方法前面的文档告诉了我们：将源Bean复制到指定的Bean中，两个类不需要有关联，也不必是派生关系，只需要属性匹配即可。</p>
<h4 id="学习代码"><a href="#学习代码" class="headerlink" title="学习代码"></a>学习代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/12/1 14:13&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeans</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//首先设置一个学生，将它的基本属性复制给大学生，很方便的操作，不用set</span></div><div class="line">            Student student = <span class="keyword">new</span> Student(<span class="string">"wuwii"</span>, <span class="keyword">new</span> Date(<span class="number">1994</span> - <span class="number">1990</span>, <span class="number">2</span> -<span class="number">1</span>, <span class="number">19</span>),</div><div class="line">                    <span class="string">"WuHan"</span>, <span class="string">"123456"</span>);</div><div class="line">            UniversityStudent universityStudent = <span class="keyword">new</span> UniversityStudent();</div><div class="line">            BeanUtils.copyProperties(student, universityStudent);</div><div class="line">            System.out.println(universityStudent);</div><div class="line"></div><div class="line">            <span class="comment">//源和目标没有关联，部分属性也可以复制，有些属性没有也行。</span></div><div class="line">            String[] ignoreProperties = &#123;<span class="string">"name"</span>&#125;;</div><div class="line">            Adult_ adult = <span class="keyword">new</span> Adult_();</div><div class="line">            BeanUtils.copyProperties(student, adult, ignoreProperties);</div><div class="line">            System.out.printf(<span class="string">"adule： %s%n"</span>, adult);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//还有一些其他的实用方法</span></div><div class="line"></div><div class="line">        <span class="comment">//建立一个字符串Date</span></div><div class="line">        String date = <span class="string">"2008-8-8"</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 学生实体</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 姓名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 出生年月</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> Date birthDate;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 住址</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 身份证号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String IDNumber;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Date birthDate, String address, String IDNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">        <span class="keyword">this</span>.IDNumber = IDNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// copyProperties是调用的set方法</span></div><div class="line">    <span class="comment">/*public void setName(String name) &#123;</span></div><div class="line"><span class="comment">        this.name = "keen";</span></div><div class="line"><span class="comment">    &#125;*/</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDate</span><span class="params">(Date birthDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIDNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> IDNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIDNumber</span><span class="params">(String IDNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.IDNumber = IDNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birthDate="</span> + birthDate +</div><div class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", IDNumber='"</span> + IDNumber + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 大学生继承学生&lt;/br&gt;</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniversityStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 专业</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String major;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMajor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> major;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMajor</span><span class="params">(String major)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.major = major;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">" UniversityStudent&#123;"</span> +</div><div class="line">                <span class="string">"major='"</span> + major + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 成年人</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adult_</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 姓名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 出生年月</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> Date birthDate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adult_</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adult_</span><span class="params">(String name, Date birthDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDate</span><span class="params">(Date birthDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Adult_&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birthDate="</span> + birthDate +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student&#123;name=&apos;wuwii&apos;, birthDate=Fri Feb 19 00:00:00 CST 1904, address=&apos;WuHan&apos;, IDNumber=&apos;123456&apos;&#125; UniversityStudent&#123;major=&apos;null&apos;&#125;</div><div class="line">adule： Adule_&#123;name=&apos;null&apos;, birthDate=Fri Feb 19 00:00:00 CST 1904&#125;</div></pre></td></tr></table></figure></p>
<p>出如反射机制的性能问题，如果有要求的话，还是建议使用构造函数吧，或者更换设计。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个子类继承了父类的属性，但是有很多属性值需要复制，单纯的靠set 或者构造函数肯定很不美观，出于“懒”的目的，了解到spring beans里面提供了BeanUtils工具类，看下copyProperties方法满足需要，是用反射做的。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>20171203</title>
    <link href="http://blog.wuwii.com/omelette.html"/>
    <id>http://blog.wuwii.com/omelette.html</id>
    <published>2017-12-03T12:08:03.000Z</published>
    <updated>2017-12-04T00:27:53.611Z</updated>
    
    <content type="html"><![CDATA[<p>周末宅了下，肚子就饿得不行呀，动下手做点吃的，第一次做坑的不行啊。</p>
<a id="more"></a>
<p><img src="http://image.wuwii.com/omelette-1.jpg" alt="image"><br><img src="http://image.wuwii.com/omelette-2.jpg" alt="image"><br><img src="http://image.wuwii.com/omelette-3.jpg" alt="image"></p>
<p>这么多，傻眼了，糊了糊了。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末宅了下，肚子就饿得不行呀，动下手做点吃的，第一次做坑的不行啊。&lt;/p&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>事务的特性和@Transactional注解的使用</title>
    <link href="http://blog.wuwii.com/java-transactional.html"/>
    <id>http://blog.wuwii.com/java-transactional.html</id>
    <published>2017-11-30T08:08:03.000Z</published>
    <updated>2017-12-04T00:27:53.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Transactional如何工作"><a href="#Transactional如何工作" class="headerlink" title="@Transactional如何工作"></a>@Transactional如何工作</h3><p>实现了EntityManager接口的持久化上下文代理并不是声明式事务管理的唯一部分，事实上包含三个组成部分：</p>
<ol>
<li>事务的切面</li>
<li>事务管理器</li>
<li>EntityManager Proxy本身</li>
</ol>
<a id="more"></a>
<h4 id="事务切面"><a href="#事务切面" class="headerlink" title="事务切面"></a>事务切面</h4><p>事务的切面是一个“around（环绕）”切面，在注解的业务方法前后都可以被调用。实现切面的具体类是<code>TransactionInterceptor</code>。</p>
<p>事务的切面的主要职责：<br>在’before’时，切面提供一个调用点，来决定被调用业务方法应该在正在进行事务的范围内运行，还是开始一个新的独立事务。<br>在’after’时，切面需要确定事务被提交，回滚或者继续运行。<br>在’before’时，事务切面自身不包含任何决策逻辑，是否开始新事务的决策委派给事务管理器完成。</p>
<ul>
<li>新的Entity Manager是否应该被创建？</li>
<li>是否应该开始新的事务？</li>
</ul>
<p><strong>这些需要事务切面’before’逻辑被调用时决定。事务管理器的决策基于以下两点：</strong></p>
<ol>
<li>事务是否正在进行；</li>
<li>事务方法的propagation属性（比如REQUIRES_NEW总要开始新事务）。</li>
</ol>
<h4 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h4><p>如果事务管理器确定要创建新事务，那么将：</p>
<p>创建一个新的entity manager<br>entity manager绑定到当前线程<br>从数据库连接池中获取连接<br>将连接绑定到当前线程<br>使用ThreadLocal变量将entity manager和数据库连接都绑定到当前线程。</p>
<p>事务运行时他们存储在线程中，当它们不再被使用时，事务管理器决定是否将他们清除。</p>
<p>程序的任何部分如果需要当前的entity manager和数据库连接都可以从线程中获取。</p>
<h4 id="EntityManager-proxy"><a href="#EntityManager-proxy" class="headerlink" title="EntityManager proxy"></a>EntityManager proxy</h4><p>当业务方法调用entityManager.persist()时，这不是由entity manager直接调用的。<br>而是业务方法调用代理，代理从线程获取当前的entity manager事务管理器将entity manager绑定到线程。</p>
<h3 id="spring-中配置JPA事务"><a href="#spring-中配置JPA事务" class="headerlink" title="spring 中配置JPA事务"></a>spring 中配置JPA事务</h3><p>在spring 的配置文件中配置jpa的事务：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Jpa 事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 打开事务注解 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然可以使用aop配置事务：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Jpa 事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 声明式事务配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"count*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 只对业务逻辑层实施事务--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.devframe.service.impl.*.*(..))"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="spring中事务的几个特性"><a href="#spring中事务的几个特性" class="headerlink" title="spring中事务的几个特性"></a>spring中事务的几个特性</h3><p><strong>补充下，数据库中的事务的四大特性：</strong></p>
<ul>
<li><code>原子性（Atomicity）</code>：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</li>
<li><code>一致性（Consistency）</code>：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</li>
<li><code>隔离性（Isolation）</code>：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>
<li><code>持久性（Durability）</code>：持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>
</ul>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>隔离级别是指若干个并发的事务之间的隔离程度。<code>TransactionDefinition</code> 接口中定义了五个表示隔离级别的常量：</p>
<ul>
<li><code>TransactionDefinition.ISOLATION_DEFAULT</code>：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li>
<li><code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</li>
<li><code>TransactionDefinition.ISOLATION_READ_COMMITTED</code>：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li>
<li><code>TransactionDefinition.ISOLATION_REPEATABLE_READ</code>：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</li>
<li><code>TransactionDefinition.ISOLATION_SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
<p><strong>补充下数据库中，如果不考虑事务的隔离性，会发生的几种问题：</strong></p>
<ul>
<li><code>脏读</code>：脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。</li>
<li><code>不可重复读</code>：不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。<br>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。<br>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。<br>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</li>
<li><code>虚读(幻读)</code>：幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</li>
</ul>
<h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在<code>TransactionDefinition</code>定义中包括了如下几个表示传播行为的常量：</p>
<ul>
<li><code>TransactionDefinition.PROPAGATION_REQUIRED</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li>
<li><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code>：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li><code>TransactionDefinition.PROPAGATION_SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code>：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li><code>TransactionDefinition.PROPAGATION_NEVER</code>：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
<li><code>TransactionDefinition.PROPAGATION_MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
<li><code>TransactionDefinition.PROPAGATION_NESTED</code>：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>
</ul>
<p>选择默认的，即<code>PROPAGATION_REQUIRED</code>，事务具有传播机制，多个事务，对于已经存在的事务，下一个事务会加入当前事务。</p>
<h4 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h4><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>
<p>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p>
<h4 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a>事务只读属性</h4><p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。 默认为读写事务。</p>
<p><em>“只读事务”并不是一个强制选项，它只是一个“暗示”，提示数据库驱动程序和数据库系统，这个事务并不包含更改数据的操作，那么JDBC驱动程序和数据库就有可能根据这种情况对该事务进行一些特定的优化，比方说不安排相应的数据库锁，以减轻事务对数据库的压力，毕竟事务也是要消耗数据库的资源的。<br>但是你非要在“只读事务”里面修改数据，也并非不可以，只不过对于数据一致性的保护不像“读写事务”那样保险而已。<br>因此，“只读事务”仅仅是一个性能优化的推荐配置而已，并非强制你要这样做不可。</em></p>
<h4 id="spring事务回滚规则"><a href="#spring事务回滚规则" class="headerlink" title="spring事务回滚规则"></a>spring事务回滚规则</h4><p>指示spring事务管理器回滚一个事务的推荐方法是在当前事务的上下文内抛出异常。spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。</p>
<p>默认配置下，spring只有在抛出的异常为运行时unchecked异常时才回滚该事务，也就是抛出的异常为RuntimeException的子类(Errors也会导致事务回滚)，而抛出checked异常则不会导致事务回滚。可以明确的配置在抛出那些异常时回滚事务，包括checked异常。也可以明确定义那些异常抛出时不回滚事务。还可以编程性的通过setRollbackOnly()方法来指示一个事务必须回滚，在调用完setRollbackOnly()后你所能执行的唯一操作就是回滚。</p>
<h3 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>String</td>
<td>可选的限定描述符，指定使用的事务管理器</td>
</tr>
<tr>
<td>propagation</td>
<td>enum: Propagation</td>
<td>可选的事务传播行为设置</td>
</tr>
<tr>
<td>isolation</td>
<td>enum: Isolation</td>
<td>可选的事务隔离级别设置</td>
</tr>
<tr>
<td>readOnly</td>
<td>boolean</td>
<td>读写或只读事务，默认读写</td>
</tr>
<tr>
<td>timeout</td>
<td>int (in seconds granularity)</td>
<td>事务超时时间设置</td>
</tr>
<tr>
<td>rollbackFor</td>
<td>Class对象数组，必须继承自Throwable</td>
<td>导致事务回滚的异常类数组</td>
</tr>
<tr>
<td>rollbackForClassName</td>
<td>类名数组，必须继承自Throwable</td>
<td>导致事务回滚的异常类名字数组</td>
</tr>
<tr>
<td>noRollbackFor</td>
<td>Class对象数组，必须继承自Throwable</td>
<td>不会导致事务回滚的异常类数组</td>
</tr>
<tr>
<td>noRollbackForClassName</td>
<td>类名数组，必须继承自Throwable</td>
<td>不会导致事务回滚的异常类名字数组</td>
</tr>
</tbody>
</table>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p> @Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>
<p>虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>
<p>默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为。</p>
<p>只要方法内部抛出<code>rollbackFor</code>设置的异常，就会回滚。</p>
<p>例如：<br>在方法上加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(value=<span class="string">"transactionManager"</span>, rollbackFor = Exception.class)</div></pre></td></tr></table></figure></p>
<p>方法内部只要抛出指定的异常或者错误，就全部回滚。</p>
<p>补充，回滚异常是自己定义的异常类，最好按照要求继承<code>RuntimeException</code>。<br>如果非常有必要在事务中捕捉异常，而且需要回滚事务，那么直接再将这个异常抛出就可以了，但是不建议这么使用。</p>
<p><strong>参考文章：</strong></p>
<ul>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/bao19901210/article/details/41724355">spring事物配置，声明式事务管理和基于@Transactional注解的使用</a></li>
<li><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/wangyonglong/p/5178450.html">JPA和事务管理</a></li>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/hy6688_/article/details/44763869">Spring事务传播特性的浅析——事务方法嵌套调用的迷茫</a></li>
<li><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/fjdingsd/p/5273008.html">数据库事务的四大特性以及事务的隔离级别</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Transactional如何工作&quot;&gt;&lt;a href=&quot;#Transactional如何工作&quot; class=&quot;headerlink&quot; title=&quot;@Transactional如何工作&quot;&gt;&lt;/a&gt;@Transactional如何工作&lt;/h3&gt;&lt;p&gt;实现了EntityManager接口的持久化上下文代理并不是声明式事务管理的唯一部分，事实上包含三个组成部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事务的切面&lt;/li&gt;
&lt;li&gt;事务管理器&lt;/li&gt;
&lt;li&gt;EntityManager Proxy本身&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>心底最柔软的爱</title>
    <link href="http://blog.wuwii.com/love-of-soft.html"/>
    <id>http://blog.wuwii.com/love-of-soft.html</id>
    <published>2017-11-29T15:08:03.000Z</published>
    <updated>2017-11-30T00:37:33.995Z</updated>
    
    <content type="html"><![CDATA[<p>晚上老妈又打电话给我了，其实前几天赶回去了一次，问我这边怎么样……</p>
<p>记得以前总没好好吃饭，喜欢吃零食，弄得身体一直不是很好；喜欢玩游戏，不喜欢学习；很任性……总是忽略了爸妈的好，可能总是以为理所当然了。慢慢得懂了，其实爸妈的爱是理所当然的，但，是那种最笨拙的，最柔软的爱，也是要我们珍惜和回报的，因为他们不能陪我们度过一生，需要每个人才能完美。</p>
<p>记得给老爸买智能手机后，他说他要玩微信，但是他还不太会玩智能手机，帮他下好几个常用的软件，而且让我调成手写输入法，虽然慢慢的，一个一个字的划着输入，看得到他是真的高兴。老妈很少用手机的，虽然后来也给她买了个手机，回到家的时候也教她用，但是老妈真的很不喜欢玩手机耶。</p>
<p>其实老爸的斗地主很厉害的，但是没时间玩，现在有手机了，可以经常玩了；喜欢看新闻，现在看天气，很准的，总算不用多年前的12121了。</p>
<p>即使在现在长大成人了，爸妈还是总是来问衣服够不够穿；是的，在父母的眼里，孩子不管多大，永远都是小孩，做父母的总会把孩子成长的每个细节都记在心里；可能年轻人总是笨手笨脚的，还真的有点不会照顾后自己，才让父母还是如此操心的吧。</p>
<p>其实，都懂，长大了，我会好好的。尽管你们爱的笨拙，触动最柔软的部分，我也是会流泪的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;晚上老妈又打电话给我了，其实前几天赶回去了一次，问我这边怎么样……&lt;/p&gt;
&lt;p&gt;记得以前总没好好吃饭，喜欢吃零食，弄得身体一直不是很好；喜欢玩游戏，不喜欢学习；很任性……总是忽略了爸妈的好，可能总是以为理所当然了。慢慢得懂了，其实爸妈的爱是理所当然的，但，是那种最笨拙的，
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>《嘉年华》的一点感想</title>
    <link href="http://blog.wuwii.com/angels-wear-white.html"/>
    <id>http://blog.wuwii.com/angels-wear-white.html</id>
    <published>2017-11-28T14:08:03.000Z</published>
    <updated>2017-12-04T00:27:53.596Z</updated>
    
    <content type="html"><![CDATA[<p>看了嘉年华，这次没去电影院，主要是周末一直有事情，是通过网上非正规渠道看的，网址就不暴露了，私聊也不给。</p>
<p>感觉今年也贡献了好多张电影票了，实在是现在电影看得爆米花形式的，我只想去上厕所……</p>
<p>这个电影还是没打算去电影院看，一个人去看电影好无聊呀；它是一个以女性的口吻来贯穿的。通过这个“幼女性侵”去讲述这个当前社会下这类人的生活状况。给人很大的震撼。</p>
<a id="more"></a>
<p>电影中小文和新新，经历这个恶魔的桥段，她们在什么都不懂的情况下，身边的人却对她们的排斥，父母的异样，政府和社会的妥协，让社会底层的人只能忍气吞声，最终她们渐渐的脱离了这个社会，让她们感觉到世界都塌下了。在单纯的年龄里，她们呢其实和正常的孩子们是一样的生活，学习，正式这种不平等的眼光，小文只能不断的渴求着成长，渴望着用化妆品和衣服等等来装饰着自己，让自己变得更加成熟，让自己能够战胜内心中的黑暗和恐惧。</p>
<p>看到电影里的让人更加痛心疾首的不是女孩子们的遭遇，而是男人的懦弱，自私自利，有各种形态的人利用女性，殴打女性。无可厚非，虽然现在各种强调男女平等，总是有各种调查显示好像女性地位还要高些，但是现实中，女性在当今社会上地位还是很不平等。就拿经常被提起的，离婚的女性，其实 承受了很大的社会压力，就像小文妈的样子，同样不被社会所接纳，像是融合了所有离婚女人的不美好。因为社会上的一部分人，甚至说是那种传统思想吧，总是把一个女人和她的身体联系在一起，理解成，一个女人的价值就是她的身体。</p>
<p>真的很可笑了，现在越来越发掘是男性的问题了，女人不应该承受这些，老一辈的三从四德，至今可能还在影响着我们这一辈的人。当然社会总是光明的，律师，让她们看到了希望，最终逃过一劫的刘会长受到了法律的制裁。提升女性的权力和安全，在整个社会中接受，理性对待她们。我想，这起码也是社会文明的一大进步。</p>
<blockquote>
<p>“现在大家特别喜欢把脏和女孩子放在一起说，但这是为什么？在我眼里没有女孩是脏的。”</p>
</blockquote>
<p>最后，穿着白裙子的小米，骑着电动车，未来将是一个美好的故事。</p>
<p>虽然世俗的偏见却让她们举步维艰，可是那又如何，快乐最重要，活出你们的态度。</p>
<p>美好的事情，需要所有的人努力才能改变。这部电影将会是个开始，因为它发出的声音，重新激发了人们的认知。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了嘉年华，这次没去电影院，主要是周末一直有事情，是通过网上非正规渠道看的，网址就不暴露了，私聊也不给。&lt;/p&gt;
&lt;p&gt;感觉今年也贡献了好多张电影票了，实在是现在电影看得爆米花形式的，我只想去上厕所……&lt;/p&gt;
&lt;p&gt;这个电影还是没打算去电影院看，一个人去看电影好无聊呀；它是一个以女性的口吻来贯穿的。通过这个“幼女性侵”去讲述这个当前社会下这类人的生活状况。给人很大的震撼。&lt;/p&gt;
    
    </summary>
    
      <category term="随随便便" scheme="http://blog.wuwii.com/categories/%E9%9A%8F%E9%9A%8F%E4%BE%BF%E4%BE%BF/"/>
    
    
      <category term="电影" scheme="http://blog.wuwii.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>以后的生活</title>
    <link href="http://blog.wuwii.com/later-after.html"/>
    <id>http://blog.wuwii.com/later-after.html</id>
    <published>2017-11-27T14:08:03.000Z</published>
    <updated>2017-11-28T00:57:23.695Z</updated>
    
    <content type="html"><![CDATA[<p>晚上和室友吃完饭后，大晚上出门散散步，走在平时居住的小区的路上。看着为数不多的居民楼还亮着灯光，左手和右手边的房子样式差异很大，左手边是风格别异的别墅区，门前院子还亮着灯，细眼望去，里面种着各样的植物，有花草，还有蔬菜，有的院子里停着车，和急得慌的狗，想出来咬我，等下辈子吧。</p>
<p>其实，小区寂静的寂寞，只是冬天的夜晚来的太早了，人们都早早的上床睡觉了吧。</p>
<p>想到这里，也许，未来可能在这里住一辈子是什么样子的。我大概也会在这么一个小区里有一间自己的房子，会和一个人相爱，结婚，生活在这里，如果好的话，父母也可以接过来一起住，还可能养一只猫。我会把一切布置成喜欢的样子，摆上喜欢的物品，把房间打扫得干干净净、舒舒服服的。晚饭后，一家人，在小区里散散步，走出小区外，没有灯光的地方，来到漆黑的地方，一起仰望夜空中的繁星和月亮；回到家还能逗弄猫咪；有一天还会有孩子，整天调皮的打滚，一家人很开心幸福的生活在一起，在那座房子里。这样大概就是一辈子。</p>
<p>毕业已经有半年久了，其实自己还是很迷惑，想要什么样的生活，未来将在何处。</p>
<p>安静极了，出了汽车发动机的轰鸣声和狗叫声，已经没有半点声音。上楼，准备洗洗睡吧，突然发现今晚的月光其实很不错的，只是武汉现在晚上的环境不是很好，星星都看不到了，其实今晚的月光很亮的，看了下，今天农历初十，这么长时间，没认真看过天空中的月亮了，突然感觉到风有点暖。</p>
<p>在夜晚的舒适的空气中，心里渐渐平下来，想起来，如果这样度过一生，我会有些后悔的。舒适平淡的一生，一眼就能望穿的一生，还远远不能成为我活下去的理由，我还有很多地方没去过，很多事情没做。</p>
<p>将来肯定在我想做的事情，去想去的地方，不该为了贪图舒适浪费自己的人生。到时，未来终究是什么样子，究竟要做什么，怎么做，能否做成，都还没法预见。但尽力去做了，我就不会后悔。</p>
<p>路漫漫，其修远兮；吾将上下而求索。</p>
<p>抬头再望一望天空中的月亮。可以看到它笑得如此的皎洁。</p>
<p><img src="http://image.wuwii.com/later-after.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;晚上和室友吃完饭后，大晚上出门散散步，走在平时居住的小区的路上。看着为数不多的居民楼还亮着灯光，左手和右手边的房子样式差异很大，左手边是风格别异的别墅区，门前院子还亮着灯，细眼望去，里面种着各样的植物，有花草，还有蔬菜，有的院子里停着车，和急得慌的狗，想出来咬我，等下辈子吧
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>集成algolia搜索</title>
    <link href="http://blog.wuwii.com/algolia.html"/>
    <id>http://blog.wuwii.com/algolia.html</id>
    <published>2017-11-26T15:08:03.000Z</published>
    <updated>2017-11-27T00:50:14.223Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用第三方algolia搜索服务"><a href="#使用第三方algolia搜索服务" class="headerlink" title="使用第三方algolia搜索服务"></a>使用第三方algolia搜索服务</h4><p>Local Search一直都是Loading状态，太影响体验了，只好换个搜索，可以选择algolia和Swiftype，两者都是收费的，但是可以使用免费版本，可能搜索的准确性降低，提交的网页有上限。</p>
<p><strong>下面弄下algolia搜索服务步骤</strong></p>
<p>首先说下我的next主题是5.1.1版本，低于5.1.0不支持。</p>
<a id="more"></a>
<h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p>前往<a rel="external nofollow" target="_blank" href="http://weibo.com/ttarticle/p/show?id=2309404145816167164260">algolia官网</a>进行注册，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户 总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index，取一个名字， 将在后面使用。</p>
<p><img src="http://theme-next.iissnan.com/uploads/algolia/algolia-step-2.png" alt="image"></p>
<h5 id="本地安装-Hexo-Algolia-扩展"><a href="#本地安装-Hexo-Algolia-扩展" class="headerlink" title="本地安装 Hexo Algolia 扩展"></a>本地安装 Hexo Algolia 扩展</h5><p>在站点根目录执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-algolia</div></pre></td></tr></table></figure></p>
<p>这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。</p>
<h5 id="获取key"><a href="#获取key" class="headerlink" title="获取key"></a>获取key</h5><p>在 Algolia 服务站点上找到需要使用的一些配置的值，包括 ApplicationID、Search API Key、 Admin API Key。注意，Admin API Key 需要保密保存。</p>
<p><img src="http://theme-next.iissnan.com/uploads/algolia/algolia-step-3.png" alt="image"></p>
<p>编辑 <code>站点配置文件</code>，新增以下配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">algolia:</div><div class="line">  applicationID: 'applicationID'</div><div class="line">  apiKey: 'apiKey'</div><div class="line">  adminApiKey: 'adminApiKey'</div><div class="line">  indexName: 'indexName'</div><div class="line">  chunkSize: 5000</div></pre></td></tr></table></figure>
<p>替换除了 chunkSize 以外的其他字段为在 Algolia 获取到的值。</p>
<h5 id="更新Index"><a href="#更新Index" class="headerlink" title="更新Index"></a>更新Index</h5><p>在站点根目录下执行 hexo algolia 来更新 Index：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo algolia</div></pre></td></tr></table></figure></p>
<p>中间更新Index的时候出现了点小岔子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo algolia</div><div class="line">ERROR [Algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.</div><div class="line">ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia#api-key for more informations.</div></pre></td></tr></table></figure></p>
<p>这个时候不要去百度，直接去它给的网页中，就可以找到解决办法。</p>
<blockquote>
<p>A separate <em>API Key</em> must be provided as an <strong>environment variable</strong> named <code>HEXO_ALGOLIA_INDEXING_KEY</code>. Create it with <strong>these limited write access</strong> permissions: <code>Add records</code>, <code>Delete records</code>, <code>List indices</code>, <code>Delete index</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY=…</div></pre></td></tr></table></figure></p>
</blockquote>
<p>为了安全，需要将<strong>API Key</strong>重新设置上面给的那几个权限，并且在本地设置环境变量。</p>
<p>重新更新Index，可以完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INFO  [Algolia] Identified 114 pages and posts to index.</div><div class="line">INFO  [Algolia] Indexing chunk 1 of 3 (50 items each)</div><div class="line">INFO  [Algolia] Indexing chunk 2 of 3 (50 items each)</div><div class="line">INFO  [Algolia] Indexing chunk 3 of 3 (50 items each)</div><div class="line">INFO  [Algolia] Indexing done.</div></pre></td></tr></table></figure>
<p>如上面提示，表示成功。已经提交了114篇文章或网页到index了。</p>
<h5 id="集成到主题中"><a href="#集成到主题中" class="headerlink" title="集成到主题中"></a>集成到主题中</h5><p>更改主题配置文件，找到 Algolia Search 配置部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Algolia Search</div><div class="line">algolia_search:</div><div class="line">  enable: false</div><div class="line">  hits:</div><div class="line">    per_page: 10</div><div class="line">  labels:</div><div class="line">    input_placeholder: Search for Posts</div><div class="line">    hits_empty: "We didn't find any results for the search: $&#123;query&#125;"</div><div class="line">    hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"</div></pre></td></tr></table></figure></p>
<p>将 <code>enable</code> 改为 <code>true</code> 即可，根据需要你可以调整 labels 中的文本。</p>
<h5 id="重新发布"><a href="#重新发布" class="headerlink" title="重新发布"></a>重新发布</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<p>查看效果：</p>
<p><img src="http://image.wuwii.com/next-as-search.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;使用第三方algolia搜索服务&quot;&gt;&lt;a href=&quot;#使用第三方algolia搜索服务&quot; class=&quot;headerlink&quot; title=&quot;使用第三方algolia搜索服务&quot;&gt;&lt;/a&gt;使用第三方algolia搜索服务&lt;/h4&gt;&lt;p&gt;Local Search一直都是Loading状态，太影响体验了，只好换个搜索，可以选择algolia和Swiftype，两者都是收费的，但是可以使用免费版本，可能搜索的准确性降低，提交的网页有上限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面弄下algolia搜索服务步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先说下我的next主题是5.1.1版本，低于5.1.0不支持。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://blog.wuwii.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>并发容器CopyOnWriteArrayList</title>
    <link href="http://blog.wuwii.com/java-copyonwrite.html"/>
    <id>http://blog.wuwii.com/java-copyonwrite.html</id>
    <published>2017-11-26T13:08:03.000Z</published>
    <updated>2017-12-04T00:27:53.596Z</updated>
    
    <content type="html"><![CDATA[<p>Copy-On-Write简称COW，是一种用于程序设计中的<code>优化策略</code>。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p>
<h3 id="什么是CopyOnWrite容器"><a href="#什么是CopyOnWrite容器" class="headerlink" title="什么是CopyOnWrite容器"></a>什么是CopyOnWrite容器</h3><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>
<a id="more"></a>
<h3 id="CopyOnWriteArrayList如何做到线程安全的"><a href="#CopyOnWriteArrayList如何做到线程安全的" class="headerlink" title="CopyOnWriteArrayList如何做到线程安全的"></a>CopyOnWriteArrayList如何做到线程安全的</h3><p>CopyOnWriteArrayList使用了一种叫<code>写时复制</code>的方法，当有新元素添加到CopyOnWriteArrayList时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">//1、先加锁</span></div><div class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Object[] elements = getArray();</div><div class="line">        <span class="keyword">int</span> len = elements.length;</div><div class="line">        <span class="comment">//2、拷贝数组</span></div><div class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</div><div class="line">        <span class="comment">//3、将元素加入到新数组中</span></div><div class="line">        newElements[len] = e;</div><div class="line">        <span class="comment">//4、将array引用指向到新数组</span></div><div class="line">        setArray(newElements);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       <span class="comment">//5、解锁</span></div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来CopyOnWriteArrayList的整个add操作都是在锁的保护下进行的。</p>
<p>当有新元素加入的时候，如下图，创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。</p>
<p><img src="http://img.blog.csdn.net/20170117145928110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGluc29uZ2JpbjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"><br><em>图片来自水印</em></p>
<p>当元素在新数组添加成功后，将array这个引用指向新数组。</p>
<p><img src="http://img.blog.csdn.net/20170117150336836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGluc29uZ2JpbjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"><br><em>图片来自水印</em></p>
<p>读取操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> get(getArray(), index);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>但是它的读操作并没有同步，因此读取它的数据的时候不一定是最新的数据。</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>注意内存的消耗，每次进行写入操作的时候，都会复制一个副本，如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。</li>
<li>不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；</li>
<li>CopyOnWriteArrayList 合适读多写少的场景，不过这类慎用<br>因为谁也没法保证CopyOnWriteArrayList 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。</li>
<li>设计思想：并发时候，可以开辟新的地址，来解决并发问题。</li>
</ol>
<p><strong>参考文章：</strong></p>
<ul>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/linsongbin1/article/details/54581787">线程安全的CopyOnWriteArrayList介绍</a></li>
<li><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/dolphin0520/p/3938914.html">Java并发编程：并发容器之CopyOnWriteArrayList（转载）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Copy-On-Write简称COW，是一种用于程序设计中的&lt;code&gt;优化策略&lt;/code&gt;。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。&lt;/p&gt;
&lt;h3 id=&quot;什么是CopyOnWrite容器&quot;&gt;&lt;a href=&quot;#什么是CopyOnWrite容器&quot; class=&quot;headerlink&quot; title=&quot;什么是CopyOnWrite容器&quot;&gt;&lt;/a&gt;什么是CopyOnWrite容器&lt;/h3&gt;&lt;p&gt;CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://blog.wuwii.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>20171125</title>
    <link href="http://blog.wuwii.com/frightened.html"/>
    <id>http://blog.wuwii.com/frightened.html</id>
    <published>2017-11-25T15:08:03.000Z</published>
    <updated>2017-11-27T00:50:14.226Z</updated>
    
    <content type="html"><![CDATA[<p>不经意间，人开始善感起来了。</p>
<p>是人活了这么多年，还是这么怂吗？</p>
<p>不曾想过，每次做事都这么犹豫。</p>
<p>可能就是在这样的面前，才敢放低姿态。</p>
<p>不管什么事情，努力才是对自己的结果。</p>
<blockquote>
<p>世界上最好的安慰并不是告诉对方“一切都会好起来的”，而是苦着脸说“哭个屁，你看，我比你还惨”。</p>
<p>嘿，你好吗？<br>我很好。 </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不经意间，人开始善感起来了。&lt;/p&gt;
&lt;p&gt;是人活了这么多年，还是这么怂吗？&lt;/p&gt;
&lt;p&gt;不曾想过，每次做事都这么犹豫。&lt;/p&gt;
&lt;p&gt;可能就是在这样的面前，才敢放低姿态。&lt;/p&gt;
&lt;p&gt;不管什么事情，努力才是对自己的结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;世界上
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程中ThreadLocal</title>
    <link href="http://blog.wuwii.com/java-threadlocal.html"/>
    <id>http://blog.wuwii.com/java-threadlocal.html</id>
    <published>2017-11-24T17:08:03.000Z</published>
    <updated>2017-11-27T00:50:14.252Z</updated>
    
    <content type="html"><![CDATA[<p>没写完，头痛，到凌晨了，先占个坑，先睡个觉，明天再补。</p>
<hr>
<p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p>
<p>但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。<br><a id="more"></a></p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="拥有方法"><a href="#拥有方法" class="headerlink" title="拥有方法"></a>拥有方法</h4><p><img src="http://image.wuwii.com/ThreadLocal1.png" alt="image"><br>下面看下几个怎么设计实现ThreadLocal的方法：</p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the value in the current thread's copy of this</span></div><div class="line"><span class="comment">     * thread-local variable.  If the variable has no value for the</span></div><div class="line"><span class="comment">     * current thread, it is first initialized to the value returned</span></div><div class="line"><span class="comment">     * by an invocation of the &#123;<span class="doctag">@link</span> #initialValue&#125; method.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the current thread's value of this thread-local</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                T result = (T)e.value;</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> setInitialValue();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>获取当前线程；</li>
<li>然后通过getMap 获取Map；</li>
<li>获取到Map的键值对；</li>
<li>传入<code>this</code> 当前ThreadLocal获取当前的键值对；</li>
<li>根据获取到的entry 返回值，为null 的话调用<code>setInitialValue</code>方法；<h4 id="getMap"><a href="#getMap" class="headerlink" title="getMap"></a>getMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Get the map associated with a ThreadLocal. Overridden in</span></div><div class="line"><span class="comment">     * InheritableThreadLocal.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>  t the current thread</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the map</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t.threadLocals;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>返回线程中的threadLocals变量，继续看threadLocals的实现；</p>
<h4 id="threadLocals"><a href="#threadLocals" class="headerlink" title="threadLocals"></a>threadLocals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></div><div class="line"><span class="comment">     * by the ThreadLocal class. */</span></div><div class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>它是ThreadLocal中的静态内部类ThreadLocalMap：</p>
<h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><h5 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></div><div class="line">            Object value;</div><div class="line"></div><div class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">                <span class="keyword">super</span>(k);</div><div class="line">                value = v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>ThreadLocalMap的Entry继承了WeakReference，并且使用ThreadLocal作为键值。</p>
<h4 id="setInitialValue"><a href="#setInitialValue" class="headerlink" title="setInitialValue"></a>setInitialValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Variant of set() to establish initialValue. Used instead</span></div><div class="line"><span class="comment">     * of set() in case user has overridden the set() method.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the initial value</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        T value = initialValue();</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">            map.set(<span class="keyword">this</span>, value);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            createMap(t, value);</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果map不为空，就设置键值对，为空，再创建Map，看一下createMap的实现;</p>
<h4 id="createMap"><a href="#createMap" class="headerlink" title="createMap"></a>createMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Create the map associated with a ThreadLocal. Overridden in</span></div><div class="line"><span class="comment">     * InheritableThreadLocal.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> t the current thread</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue value for the initial entry of the map</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</div><div class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样为当前线程创建副本变量就完毕了。</p>
<h4 id="怎么创建副本变量"><a href="#怎么创建副本变量" class="headerlink" title="怎么创建副本变量"></a>怎么创建副本变量</h4><p>首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。</p>
<p>初始时，在Thread里面，threadLocals为空，当通过ThreadLocal变量调用get()方法或者set()方法，就会对Thread类中的threadLocals进行初始化，并且以当前ThreadLocal变量为键值，以ThreadLocal要保存的副本变量为value，存到threadLocals。</p>
<p>然后在当前线程里面，如果要使用副本变量，就可以通过get方法在threadLocals里面查找。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>各种连接池获取连接（如，数据库连接，redis连接）；</li>
<li>session管理。</li>
</ol>
<h3 id="学习代码"><a href="#学习代码" class="headerlink" title="学习代码"></a>学习代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/24 20:32&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadLocal</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 声明一个ThreadLocal变量</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; local1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 为ThreadLocal赋值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        local1.set(Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">         Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">             <span class="comment">/*</span></div><div class="line"><span class="comment">              * 每次调用get方法前，必须要set，不然会抛出NPE</span></div><div class="line"><span class="comment">              */</span></div><div class="line">            setValue();</div><div class="line">            System.out.printf(<span class="string">"线程一的localValue为: %s%n"</span>, local1.get());</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="comment">//先给线程二的threadLocal赋值，然后运行线程一，最后打印线程二的threadLocal</span></div><div class="line">            setValue();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">/*</span></div><div class="line"><span class="comment">                 * 在线程二中添加运行线程一，证明了每个线程保存的ThreadLocal的副本变量是不同的</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                thread1.start();</div><div class="line">                thread1.join();</div><div class="line">                <span class="comment">// 运行完线程一，再输出线程二</span></div><div class="line">                System.out.printf(<span class="string">"线程二的localValue为: %s%n"</span>, local1.get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">线程一的localValue为: Thread-0</div><div class="line">线程二的localValue为: Thread-1</div></pre></td></tr></table></figure></p>
<p>可以看出，线程二并没有被影响。</p>
<p><strong>参考博客：<a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920407.html">Java并发编程：深入剖析ThreadLocal</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没写完，头痛，到凌晨了，先占个坑，先睡个觉，明天再补。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。&lt;/p&gt;
&lt;p&gt;但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="并发编程" scheme="http://blog.wuwii.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用一生的时光去守护你</title>
    <link href="http://blog.wuwii.com/a-living-time.html"/>
    <id>http://blog.wuwii.com/a-living-time.html</id>
    <published>2017-11-23T14:08:03.000Z</published>
    <updated>2017-11-24T09:22:07.481Z</updated>
    
    <content type="html"><![CDATA[<p>今天听电台上逛到了这篇文章，首先想到的应该是爸妈那一代人，是我们比较熟悉的，那缝纫机，我家里现在还能用了；我小时候学习骑车的时候，用的就是当初爸妈结婚的时候自行车；还有当时的小彩电，被我拿来打游戏机了……现在想起来，惭愧的很，没能好好珍惜，那是属于父母的美好记忆的一部分。当然都过去好久了，我的记忆力还是不错的，虽然大多数东西已经不存在了，但是能一直存在我的记忆里，我想爸妈也是一直记得的，而且现在家庭幸福，就足够了。</p>
<p>文章来自网上，百度标题就有，读起来可以细细品尝，喝杯水，别是一番风味。</p>
<p>记录到博客（图片都是偷的……<br><a id="more"></a></p>
<hr>
<p><img src="http://p3.pstatp.com/large/6d100072fd427166ee8" alt="image"></p>
<p><strong>五六十年代的爱情，没有绚烂的色彩，却有着耐人寻味的真情。</strong></p>
<p><img src="http://p9.pstatp.com/large/71e00034b657f43e581" alt="image"></p>
<p><strong>那个时候，总有做不完的农活，苦中作乐就是甜蜜的爱情。</strong></p>
<p><img src="http://p3.pstatp.com/large/6d100072fd55d030dc9" alt="image"></p>
<p><strong>在当时，为心爱的女人戴上一朵红花，是爱情的见证，更是一种矢志不渝的承诺。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/5ce0edf0e5cb48349c356321d86143f4_th.jpg" alt="image"></p>
<p><strong>结婚前不需贵重的礼品，一支钢笔就是一个深刻的纪念。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/00208259a24e47e3ac983be8d1b478b3_th.jpg" alt="image"></p>
<p><strong>那时候结婚，还需要组织上开个介绍信。接过结婚证书的时候，开心到说不出话来。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/255bedb9b6fa44f1a456851c89e3cf34_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/46d488275a0e4b5ea018a421e609788c_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/0b1bd30a0f624ffab5df7bd8c338ac6c_th.jpg" alt="image"></p>
<p><strong>那时候的爱情，总是有众人的见证。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/9c81860520044b9aaf0cae637d370a13_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/16c9b7f033c3440191d7405f39384f44_th.jpg" alt="image"></p>
<p><strong>到了七十年代，爱情故事也随着时代而发生改变。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/1077aaf711ac41ecb555bc662085cd42_th.jpg" alt="image"></p>
<p><strong>在那个特殊的年代，爱情是被禁止的羞涩。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/c1ebcfd1f6dd4e9ba01d934b74b467a3_th.jpg" alt="image"></p>
<p><strong>“恋爱”“结婚”，是资产阶级思想的自由化产物，“男女关系”是绝对要划清界限的个人守则。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/527e2229d3f54a9d9b9402ede6a842ec_th.jpg" alt="image"></p>
<p><strong>那个时代的人们单纯，生怕别人误会自己有不正当男女关系，生怕别人误会老家来的表哥是自己的汉子。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/a0ea7bc642844de3b6b91408136a2bc0_th.jpg" alt="image"></p>
<p><strong>那时候，连牵个小手都得偷偷摸摸的，一根小小的竹竿连接着他们青涩的爱情。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/b2eb2ef274454388957f69b23f3106db_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/061b45c9946b43708f3f8ceaa25ecc5d_th.jpg" alt="image"></p>
<p><strong>那时候的爱情，也是政治。身穿军装、手捧毛主席语录照相，是那个年代最独特的记忆。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/88071ca9faa34ebdb452aa21b868974e_th.jpg" alt="image"></p>
<p><strong>80年代，有了一种独特的恋爱方式，叫做联谊。说说笑笑，感情自然而然地发生。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/8e1e1034d8494186b87f7c9197deb69f_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/c4cdf0604fc64f21a78403396b53bc4a_th.jpg" alt="image"></p>
<p><strong>在没有电话、电脑的年代，写信寄照片是唯一联系情感的方式。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/54c2769ec19947e3b9a4ef22abd85d82_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/99aefc436e9647ba9a98634a0ba44d53_th.jpg" alt="image"></p>
<p><strong>那时候的约会很简单，坐趟公交车到郊外走走，到湖边划划小船。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/b5138d92ebe849a1b74009a3e711f0c8_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/393d7c957d014d5e90474250d7ebe211_th.jpg" alt="image"></p>
<p><strong>只要两个人在一起，在公园的长椅上坐上一个下午也不会觉得无聊。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/332b5900b72d4fc1a1bf3635a9ee2631_th.jpg" alt="image"></p>
<p><strong>骑着自行车，载着心爱的那个她，真希望时光就停留在这一刻。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/101a7ea965a24e52b398902c74115828_th.jpg" alt="image"></p>
<p><strong>带上礼物，和心爱的人穿戴整齐，一起回家里看看爸妈。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/619406bd3a99447abe2b8a97683272e3_th.jpg" alt="image"></p>
<p><strong>一台缝纫机，一辆自行车，一台收音机，加上母亲准备的花棉被，就是全部的嫁妆。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/3066796109054dceb217c06419be6b37_th.jpg" alt="image"></p>
<p><strong>那个年代，爱情有着纯粹的颜色，神圣不容亵渎。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/94a5274509284b209227b242f4088d06_th.jpg" alt="image"></p>
<p><strong>那个年代，车马很慢，书信很远，一生只够爱一人。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/a1120031cd624a76a3887f1b26bdb7eb_th.jpg" alt="image"></p>
<p><strong>30年前的我爱你，不是嘴上说说，</strong></p>
<p><strong>而是用一生的时光去守护你！</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/bf016bb8559c4e4aae0a8e101ba191d3_th.jpg" alt="image"></p>
<hr>
<blockquote>
<p>“两姓联姻，一堂缔约，良缘永结，匹配同称。看此日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽。谨以白头之约，书向鸿笺，好将红叶之盟，载明鸳谱。此证。” </p>
<p>张爱玲说过：“于千万人之中遇见你所要遇见的人,于千万年之中,时间的无涯的荒野里,没有早一步,也没有晚一步,刚巧赶上了,没有别的话可说,唯有轻轻地问一声:“原来你也在这里 ”</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天听电台上逛到了这篇文章，首先想到的应该是爸妈那一代人，是我们比较熟悉的，那缝纫机，我家里现在还能用了；我小时候学习骑车的时候，用的就是当初爸妈结婚的时候自行车；还有当时的小彩电，被我拿来打游戏机了……现在想起来，惭愧的很，没能好好珍惜，那是属于父母的美好记忆的一部分。当然都过去好久了，我的记忆力还是不错的，虽然大多数东西已经不存在了，但是能一直存在我的记忆里，我想爸妈也是一直记得的，而且现在家庭幸福，就足够了。&lt;/p&gt;
&lt;p&gt;文章来自网上，百度标题就有，读起来可以细细品尝，喝杯水，别是一番风味。&lt;/p&gt;
&lt;p&gt;记录到博客（图片都是偷的……&lt;br&gt;
    
    </summary>
    
      <category term="分享" scheme="http://blog.wuwii.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="故事" scheme="http://blog.wuwii.com/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Easyui异步ComboTree加载到指定子节点展开</title>
    <link href="http://blog.wuwii.com/easyui-combotree.html"/>
    <id>http://blog.wuwii.com/easyui-combotree.html</id>
    <published>2017-11-22T15:08:03.000Z</published>
    <updated>2017-12-06T09:46:39.351Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Easyui异步ComboTree加载到指定子节点展开</strong>，其实以为这个功能会很简单，做起来出了一些问题，现在做完了，也还是存在一些隐患，记录，等找到最好的解决办法：</p>
<a id="more"></a>
<h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>业务其实是一个很普通的省市县的级联查询，但是，我们不是那个一级一级的方式选择的，是直接加载一棵树，在到树下一级一级的选到想要的位置。</p>
<p>主要就是加载异步树，还有就是去加载到当前指定的子节点上，并且打开每一级的父节点：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;测试玩&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">    &lt;link rel="stylesheet" href="../</span>../theme/<span class="keyword">default</span>/easyui.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../theme/icon.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../css/app.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../css/main.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../css/icon.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">" src="</span>../../js/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">" src="</span>../../js/jquery.easyui.min.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">" src="</span>../../js/easyui-lang-zh_CN.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">&lt;input id="</span>tree<span class="string">"/&gt;</span></div><div class="line"><span class="string">&lt;!--测试使用打开到指定的子节点--&gt;</span></div><div class="line"><span class="string">&lt;a id="</span>expand<span class="string">"&gt;指定打开&lt;/a&gt;</span></div><div class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></div><div class="line"><span class="string">    /**</span></div><div class="line"><span class="string">     * 后台服务url自己修改成配置文件的</span></div><div class="line"><span class="string">     */</span></div><div class="line"><span class="string">    var baseUrl = "</span>http:<span class="comment">//192.168.19.207:8081/devframe-server/";</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 记录级联信息</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">var</span> selectNode = &#123;</div><div class="line">        province: <span class="literal">null</span>,</div><div class="line">        city: <span class="literal">null</span>,</div><div class="line">        county: <span class="literal">null</span>,</div><div class="line">        town: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据type判断级联</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">var</span> nodeType = &#123;</div><div class="line">        province: <span class="string">'province'</span>,</div><div class="line">        city: <span class="string">'city'</span>,</div><div class="line">        county: <span class="string">'county'</span>,</div><div class="line">        town: <span class="string">'town'</span></div><div class="line">    &#125;</div><div class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        initComboTree();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化ComboTree</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initComboTree</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//第一次加载成功需要选中高亮第一个节点</span></div><div class="line">        <span class="keyword">var</span> isHighlight = <span class="literal">true</span>;</div><div class="line">        $(<span class="string">"#tree"</span>).combotree(&#123;</div><div class="line">            method: <span class="string">"post"</span>,</div><div class="line">            url: baseUrl + <span class="string">'dictionary/asyncdata/canton'</span>,</div><div class="line">            panelWidth: <span class="string">'170'</span>,</div><div class="line">            onClick: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</div><div class="line">                getNodeMessage(node);</div><div class="line">            &#125;,</div><div class="line">            onBeforeExpand: <span class="function"><span class="keyword">function</span> (<span class="params">node, param</span>) </span>&#123;</div><div class="line">                $(<span class="keyword">this</span>).tree(<span class="string">'options'</span>).url = baseUrl + <span class="string">'dictionary/asyncdata/canton?id='</span> + node.id;</div><div class="line">            &#125;,</div><div class="line">            onLoadSuccess: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!isHighlight) <span class="keyword">return</span>;</div><div class="line">                $(<span class="string">"#tree li:eq(0)"</span>).find(<span class="string">"div"</span>).addClass(<span class="string">"tree-node-selected"</span>);</div><div class="line">                <span class="keyword">var</span> n = $(<span class="keyword">this</span>).tree(<span class="string">"getSelected"</span>);</div><div class="line">                <span class="keyword">if</span> (n != <span class="literal">null</span>) $(<span class="keyword">this</span>).tree(<span class="string">"select"</span>, n.target);</div><div class="line">                isHighlight = <span class="literal">false</span>;</div><div class="line">            &#125;,</div><div class="line">            loadFilter: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                data = data.data;</div><div class="line">                <span class="comment">//不要问为什么有这么一步，因为懒，不想改服务</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="string">'data'</span> <span class="keyword">in</span> data[i]) &#123;</div><div class="line">                        data[i].text = data[i].data;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> data;</div><div class="line">            &#125;,</div><div class="line">            formatter: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!node.children || node.children.length == <span class="number">0</span>) <span class="keyword">return</span> node.text;</div><div class="line">                <span class="keyword">return</span> node.text + <span class="string">'&lt;span style="color:blue"&gt;('</span> + node.children.length + <span class="string">')&lt;/span&gt;'</span>;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//屏蔽浏览器默认的右键事件，改为和左键点击事件一样的了</span></div><div class="line">            onContextMenu: <span class="function"><span class="keyword">function</span> (<span class="params">e, node</span>) </span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">                $(<span class="keyword">this</span>).tree(<span class="string">'select'</span>, node.target);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 编辑状态中的树，需要展开到指定节点</span></div><div class="line"><span class="comment">     * @param id 需要展开的Id</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">editComboTree</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            type: <span class="string">'post'</span>,</div><div class="line">            url: baseUrl + <span class="string">'dictionary/expandto/'</span> + id,</div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (response == <span class="literal">null</span> || response.statusCode == <span class="number">400</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                $(<span class="string">"#tree"</span>).combotree(<span class="string">'loadData'</span>, response);</div><div class="line">                $(<span class="string">"#tree"</span>).combotree(<span class="string">'setValue'</span>, id);</div><div class="line">            &#125;,</div><div class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="comment">//TODO error</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 点击树，获取级联的信息</span></div><div class="line"><span class="comment">     * @param node 节点</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getNodeMessage</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> remark = node.type;</div><div class="line">        <span class="keyword">if</span> (remark == <span class="literal">null</span> || remark == <span class="string">""</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.province) &#123;</div><div class="line">            selectNode.province = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.city) &#123;</div><div class="line">            selectNode.city = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.county) &#123;</div><div class="line">            selectNode.county = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.town) &#123;</div><div class="line">            selectNode.town = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//查找父级节点，没有则退出</span></div><div class="line">        <span class="keyword">var</span> parent = getParentNode(node);</div><div class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</div><div class="line">            getNodeMessage(parent)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据节点获取父节点</span></div><div class="line"><span class="comment">     * @param node 节点</span></div><div class="line"><span class="comment">     * @returns &#123;*&#125; 父节点</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getParentNode</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> tree = $(<span class="string">'#tree'</span>).combotree(<span class="string">'tree'</span>);</div><div class="line">        <span class="keyword">return</span> tree.tree(<span class="string">'getParent'</span>, node.target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//测试的，打开到指定的子节点，点击事件</span></div><div class="line">    $(<span class="string">"#expand"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        editComboTree(<span class="string">'431000000000'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>body&gt;</div><div class="line">&lt;<span class="regexp">/html&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><p>服务端有点差，就不贴代码了，说下解决思路。</p>
<ul>
<li>持久层框架：JPA</li>
<li>数据库：PostgreSQL<h5 id="加载异步树的服务"><a href="#加载异步树的服务" class="headerlink" title="加载异步树的服务"></a>加载异步树的服务</h5>主要是利用了SQL，对，使用原生SQL查的。这里还有一个问题，就是easyui的ComboTree加载异步树的时候，需要判断当前查询出来的节点下面还有没有子节点，就是我们平常看到树的前面有一个尖三角符号，用来表示是否能展开。<br>ComboTree同时继承了Combo和Tree两个的特点，其实，就是把数据绑定到tree上，tree的节点（node）有一个属性是<code>state</code>，用来控制树的该节点的展开与否，它有两个值：<code>open</code>和<code>closed</code>，所以查询的时候干脆就直接的查出了这个属性，SQL有些特别：</li>
</ul>
<p>condition参数是接到WHERE后面的查询条件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AtomicReference&lt;String&gt; sql = new AtomicReference&lt;&gt;(&quot;SELECT T.*,CASE WHEN T1.\&quot;COUNT\&quot;=0 OR &quot; +</div><div class="line">               &quot;T1.\&quot;COUNT\&quot; IS NULL THEN &apos;open&apos; WHEN T1.\&quot;COUNT\&quot;&gt;0 THEN &apos;closed&apos; END AS \&quot;STATE\&quot; &quot; +</div><div class="line">               &quot;FROM(SELECT * FROM \&quot;DEV_DICTIONARY\&quot; WHERE &quot; + condition.get() +</div><div class="line">               &quot; ORDER BY \&quot;PARENTID\&quot;) T LEFT JOIN (SELECT \&quot;PARENTID\&quot;, COUNT(\&quot;PARENTID\&quot;) \&quot;COUNT\&quot; FROM \&quot;DEV_DICTIONARY\&quot; &quot; +</div><div class="line">               &quot;WHERE \&quot;PARENTID\&quot; IN (SELECT \&quot;ID\&quot; FROM \&quot;DEV_DICTIONARY\&quot; WHERE &quot; + condition.get() + &quot;) &quot; +</div><div class="line">               &quot;GROUP BY \&quot;PARENTID\&quot;) T1 ON T.\&quot;ID\&quot; = T1.\&quot;PARENTID\&quot;&quot;);</div></pre></td></tr></table></figure></p>
<p>这样太难看了，最后娶一个实例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">        T.*,</div><div class="line">        <span class="keyword">CASE</span> </div><div class="line">            <span class="keyword">WHEN</span> T1.<span class="string">"COUNT"</span>=<span class="number">0</span> </div><div class="line">            <span class="keyword">OR</span> T1.<span class="string">"COUNT"</span> <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'open'</span> </div><div class="line">            <span class="keyword">WHEN</span> T1.<span class="string">"COUNT"</span>&gt;<span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'closed'</span> </div><div class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">"STATE"</span> </div><div class="line">    <span class="keyword">FROM</span></div><div class="line">        (<span class="keyword">SELECT</span></div><div class="line">            * </div><div class="line">        <span class="keyword">FROM</span></div><div class="line">            <span class="string">"DEV_DICTIONARY"</span> </div><div class="line">        <span class="keyword">WHERE</span></div><div class="line">            <span class="string">"TYPE"</span>=<span class="string">'canton'</span> </div><div class="line">            <span class="keyword">AND</span> <span class="string">"PARENTID"</span> <span class="keyword">is</span> <span class="literal">null</span> </div><div class="line">            </div><div class="line">                    <span class="keyword">ORDER</span> <span class="keyword">BY</span></div><div class="line">                        <span class="string">"PARENTID"</span></div><div class="line">                ) T </div><div class="line">            <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></div><div class="line">                (</div><div class="line">                    <span class="keyword">SELECT</span></div><div class="line">                        <span class="string">"PARENTID"</span>,</div><div class="line">                        <span class="keyword">COUNT</span>(<span class="string">"PARENTID"</span>) <span class="string">"COUNT"</span> </div><div class="line">                    <span class="keyword">FROM</span></div><div class="line">                        <span class="string">"DEV_DICTIONARY"</span> </div><div class="line">                    <span class="keyword">WHERE</span></div><div class="line">                        <span class="string">"PARENTID"</span> <span class="keyword">IN</span> (</div><div class="line">                            <span class="keyword">SELECT</span></div><div class="line">                                <span class="string">"ID"</span> </div><div class="line">                            <span class="keyword">FROM</span></div><div class="line">                                <span class="string">"DEV_DICTIONARY"</span> </div><div class="line">                            <span class="keyword">WHERE</span></div><div class="line">                                <span class="string">"TYPE"</span>=<span class="string">'canton'</span> </div><div class="line">                                <span class="keyword">AND</span> <span class="string">"PARENTID"</span> <span class="keyword">is</span> <span class="literal">null</span> )</div><div class="line">                            <span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">                                <span class="string">"PARENTID"</span></div><div class="line">                        ) T1 </div><div class="line">                            <span class="keyword">ON</span> T.<span class="string">"ID"</span> = T1.<span class="string">"PARENTID"</span></div></pre></td></tr></table></figure></p>
<p>这样查询出来的就多了一列state，按照是否有子集，设置它是closed 还是open。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122215405.png" alt="image"></p>
<p>当然还需要到实体类上去映射好这个属性字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;\&quot;STATE\&quot;&quot;)</div><div class="line">private String state;</div></pre></td></tr></table></figure></p>
<h5 id="加载到指定节点"><a href="#加载到指定节点" class="headerlink" title="加载到指定节点"></a>加载到指定节点</h5><p>加载到指定节点，并展开到该节点。这个就用脑图说下思路吧。暂时我感觉我的做法不是很好，我看能不能减少复杂度，期待以后能解决，看到的朋友如果有好的解决办法，请与我联系，万分感谢。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122221203.png" alt="image"></p>
<p>其实我们需要找到的数据就是这样的一组数据：<br>首先找到同级的，再去找父的，父的又去找自己的同级，再去找自己的上一级。。。直到找到root节点，完毕。</p>
<p>我是分步做的，应该有更少步骤或者一条SQL完成的，下去研究，估计有点难。</p>
<h4 id="展示下结果吧"><a href="#展示下结果吧" class="headerlink" title="展示下结果吧"></a>展示下结果吧</h4><p>异步树：<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122221612.png" alt="image"></p>
<p>展示到指定节点效果:</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122221552.png" alt="image"></p>
<p>还要注意一点，就是请求服务使用get会好些，get比post快，但是要加上时间戳，避免去读取浏览器缓存数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Easyui异步ComboTree加载到指定子节点展开&lt;/strong&gt;，其实以为这个功能会很简单，做起来出了一些问题，现在做完了，也还是存在一些隐患，记录，等找到最好的解决办法：&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Web前端" scheme="http://blog.wuwii.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="easyui" scheme="http://blog.wuwii.com/tags/easyui/"/>
    
  </entry>
  
  <entry>
    <title>《小王子》读后感</title>
    <link href="http://blog.wuwii.com/princekin.html"/>
    <id>http://blog.wuwii.com/princekin.html</id>
    <published>2017-11-21T15:08:03.000Z</published>
    <updated>2017-11-28T00:57:23.726Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>从前呀，有一位小王子，他住在同自己差不多大的星球上，他想要一位朋友。</p>
</blockquote>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/timg.jpg" alt="image"></p>
<p>平时比较忙，如果说读小说的话时间太长了，还有很多专业的书没看，弄得半年都过去了《飘》都没看完，说句老实话，我是个不喜欢读书的人/。。</p>
<a id="more"></a>
<hr>
<blockquote>
<p>然而他却放佛面对意见很严肃的事情，第二次从容迫不及待的对我说：“请为了画只羊。”</p>
</blockquote>
<p>这句话应该很经典，这也是故事中羊的由来，故事中的我从未划过羊，内心其实是很害怕的，其实看得多才知道，为什么会有羊这个片段，说到底就是年少的单纯吧，让羊去啃那个面包树；但是也有可能是追求善良吧，个人理解。</p>
<blockquote>
<p>忘记一位朋友，这真使人悲哀。并非每个人都有过一位朋友。</p>
</blockquote>
<p>这段话真是揪心啊，与朋友一起是一个很快乐的事情，但是想忘记一个人真的很痛苦吧，也许有一天，会慢慢淡忘一个人。但是在当前岁月下，好好珍惜身边的每一个爱你和你爱的人。现在，买得起充电五分钟的手机，但是通话两小时的人可不好找。</p>
<blockquote>
<p>猴面包树在长大以前也是很小的。</p>
</blockquote>
<p>小王子在知道羊吃小灌木的时候，他很开心，它们可以吃猴面包树了，但是猴面包树已经长得很大，羊可吃不了，只有在它小的时候，才能警惕它。孩子们，要当心那些猴面包树呀！<br>猴面包树是人们都不想要的东西，想放弃的东西，但是，人们是自私的，想放下，却不想放下，但是自己又不甘放下那段执念，明知结果不好，确实还是贪婪的霸占着这一片不属于你的土地，最好确是还是一步一步越陷越深。所以要在开始有这种心理的时候就要把它铲除掉，找到自己的玫瑰，将它种下，在心中发芽，这样心中才能充满美好。</p>
<blockquote>
<p>你知道，当感到十分愁闷的时候，人们都会想看太阳落山。</p>
</blockquote>
<p>小王子一天能看四十三次日出，那是多么忧郁的生活啊，也许唯一的快乐就是看日落，人总是在不知不觉中，感到愁闷，而且是非常糟糕的那种，人为什么会那么难过了。<br>可能是有一种人，就像我吧，总是喜欢把悲伤隐藏的深一点，再深一点，习惯性了都，当然各种事情都有暴露的，比如说，悲伤的时候想看日落，哈哈。说不定高兴的时候就想看日出了。</p>
<blockquote>
<p>对别人提出的要求必须是他们能够办到的。权力首先应当以理性为基础。</p>
</blockquote>
<p>小王子来到一个星球上，住的只有一个国王，他统治着一切，但是他并没有拥有一切，。虽然他拥有着至高无上的权力，但是天真地想让自己统治一切，发出不合理的命令来强人所难。<br>所以在现实社会中，首先要求别人做事的时候，一定要考虑到他人感受为前提，虽然你可能是BOSS，但是优秀员工都有随时踢开SB 老板的权力。扯远了，永远不要忘了，不能提出不合理的要求。</p>
<blockquote>
<p>虚荣心极强的人眼中，所有的人都是他们的崇拜者。</p>
</blockquote>
<p>这个怎么说了，虚荣，当今社会，每个人都可能会犯的毛病了，可能不经意间，就出现了，只不过没发现，觉得理所当然，当然只是自己觉得，哈哈。我说我长得好帅，万人迷，当然这个不是虚荣，只是小小的吹牛皮。很无聊的，不说了。</p>
<blockquote>
<p>“你为什么要喝酒？”“为了忘记。”“忘记什么？”“忘记我的惭愧。”“你惭愧什么？”“我惭愧我喝酒”……</p>
</blockquote>
<p>有时候，就是陷入自己设下的思维怪圈中，怎么才能跳出来？<br>亲爱的，面对现实的一切，不要自我麻痹。</p>
<blockquote>
<p>对我而言，假如我有一条围巾，我会用它围我的脖子，而且我可以带走它。我有一朵花，我就会摘下我的花朵，而且我可以将它带走。但你却无法摘下满天的星星啊。</p>
</blockquote>
<p>每次看到这段话的时候我都很触动。商人很富有，霸占了所有的星星，拥有一切，但是他却并没有获得他们。<br>星星是多么的耀眼，那么的迷人，但我宁愿有一条可以围在脖子上的围巾，还有一个带走的花。</p>
<blockquote>
<p>规定倒的地方没改变，这就是倒霉的地方！这颗星球一年比一年转得快，当规定却没改。</p>
</blockquote>
<p>哎，初看点灯人，觉得是个很可爱得人儿，他做着自己口中所说的讨厌的工作，却忠于职守，而且，是那种一成不变的，星球越转越快，但却口令没变，导致每一分钟都要点灯，灭灯，小王子让他改下，他却喜欢一劳永逸。<br>看到这里不又想到现实生活中，可以说一部分人的代表吧，这里说明下，我没有黑的意思，做的同一份工作很多年，但却没有一点上升的意思，但是他们真的很刻苦用心。这个大概就是忠于职守和用心不是同一个概念了，世界上没有绝对的事情，但是有肯定的事情，随着时代进步，一定能占尽先机的。</p>
<blockquote>
<p>星星发亮是为了让每一个人有一天都能找到属于自己的星星。</p>
<p>如果你爱上了某个星球的一朵花。那么，只要在夜晚仰望星空，就会觉得漫天的繁星就像一朵朵盛开的花。</p>
</blockquote>
<p>当在一个地方存在某种特殊意义的时候，不管是什么它将都是独一无二的美丽，即便漫长黑夜里，也可以通过光亮寻找到它的位置。<br>玫瑰是简单而且性格敏感的代表，看到它的故事片段，人心都觉得好暖。玫瑰消失后，这段话很感动，也许就是“心中有了想念的人，你便不觉得孤独”的含义，无牵无挂心中空空如也才最是寂寞。对于狐狸来说，也是不会寂寞的。当然也是遗憾的。你要走便走，不要回头，我不会留。</p>
<blockquote>
<p>狐狸说：“对我来说，你只是一个小男孩，就像其他成千上万个小男孩一样没有什么两样。我不需要你。你也不需要我。对你来说，我也只是一只狐狸，和其他成千上万的狐狸没有什么不同。但是，如果你驯养了我，我们就会彼此需要。对我来说，你就是我的世界里独一无二的了；我对你来说，也是你的世界里的唯一了。”<br>一旦你驯服了什么，就要对她负责，永远的负责。</p>
</blockquote>
<p>狐狸告诉了让小王子懂得了生活的本质和爱情的真谛。“一个人被驯服,是冒着流泪的危险的”，“只有用心才能看得清。实质性的东西，用眼睛是看不见的。”<br>用心去看才看得清楚，小王子知道需要珍惜他的玫瑰；爱就是责任。</p>
<p>总之故事的结尾是伤心的。从头到尾是一个以爱情的伤痛为背景的线索，以一份纯真的爱情，爱得真切，深入骨髓得疼痛结束。</p>
<p>爱是一种责任，爱也是一种短暂易逝的美好。用心去爱你身边的每一个人，爱可以是亲情、友情……别整天就知道爱情才是爱，每一个真切对你好的人，不要让他们攒满失望离开，毕竟一生中遇到这么可爱的人真的不多，走一个少一个。</p>
<blockquote>
<p>Growing up is not the problem.Forgetting is.</p>
</blockquote>
<hr>
<p>一切仅代表个人观点哈，勿喷</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从前呀，有一位小王子，他住在同自己差不多大的星球上，他想要一位朋友。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ov62kaxkk.bkt.clouddn.com/timg.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;平时比较忙，如果说读小说的话时间太长了，还有很多专业的书没看，弄得半年都过去了《飘》都没看完，说句老实话，我是个不喜欢读书的人/。。&lt;/p&gt;
    
    </summary>
    
      <category term="随随便便" scheme="http://blog.wuwii.com/categories/%E9%9A%8F%E9%9A%8F%E4%BE%BF%E4%BE%BF/"/>
    
    
      <category term="小王子" scheme="http://blog.wuwii.com/tags/%E5%B0%8F%E7%8E%8B%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>我的蛋碎了一个</title>
    <link href="http://blog.wuwii.com/20171120.html"/>
    <id>http://blog.wuwii.com/20171120.html</id>
    <published>2017-11-21T14:08:03.000Z</published>
    <updated>2017-11-21T13:29:26.348Z</updated>
    
    <content type="html"><![CDATA[<p>真的。。</p>
<a id="more"></a>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/IMG_20171120_203908.jpg" alt="image"></p>
<p>看到这个蛋，随口喊出那句话，被自己蠢哭了。</p>
<p>支付宝刮了一张卡，感觉到马云爸爸深深的恶意。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/Screenshot.png" alt="image"></p>
<p>用穷逼会员咋的，</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/u=3069228711,3931262156&amp;fm=27&amp;gp=0.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真的。。&lt;/p&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
