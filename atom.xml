<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>喃声细语</title>
  <subtitle>开始</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wuwii.com/"/>
  <updated>2017-11-01T06:33:08.568Z</updated>
  <id>http://blog.wuwii.com/</id>
  
  <author>
    <name>一棵树站在原野上</name>
    <email>k@wuwii.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中守护线程的总结</title>
    <link href="http://blog.wuwii.com/user-daemon-thread.html"/>
    <id>http://blog.wuwii.com/user-daemon-thread.html</id>
    <published>2017-11-01T06:28:03.000Z</published>
    <updated>2017-11-01T06:33:08.568Z</updated>
    
    <content type="html"><![CDATA[<p>了解下Java中的守护线程，看到这篇文章很详细，记录下来。<br><strong>文章来自</strong><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/shimiso/article/details/8964414">http://blog.csdn.net/shimiso/article/details/8964414</a></p>
<p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程)<br>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：<br>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。<br>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。<br>User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。</p>
<a id="more"></a>
<p>值得一提的是，守护线程并非只有虚拟机内部提供，用户在编写程序时也可以自己设置守护线程。下面的方法就是用来设置守护线程的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Thread daemonTread = <span class="keyword">new</span> Thread();  </div><div class="line">   </div><div class="line">  <span class="comment">// 设定 daemonThread 为 守护线程，default false(非守护线程)  </span></div><div class="line"> daemonThread.setDaemon(<span class="keyword">true</span>);  </div><div class="line">   </div><div class="line"> <span class="comment">// 验证当前线程是否为守护线程，返回 true 则为守护线程  </span></div><div class="line"> daemonThread.isDaemon();</div></pre></td></tr></table></figure></p>
<p>这里有几点需要注意： </p>
<ol>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>
<li>在Daemon线程中产生的新线程也是Daemon的。 </li>
<li>不要认为所有的应用都可以分配给Daemon来进行服务，比如读写操作或者计算逻辑。</li>
</ol>
<p>因为你不可能知道在所有的User完成之前，Daemon是否已经完成了预期的服务任务。一旦User退出了，可能大量数据还没有来得及读入或写出，计算任务也可能多次运行结果不一样。这对程序是毁灭性的。造成这个结果理由已经说过了：一旦所有User Thread离开了，虚拟机也就退出运行了。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//完成文件输出的守护线程任务  </span></div><div class="line"><span class="keyword">import</span> java.io.*;     </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;     </div><div class="line">               <span class="keyword">try</span>&#123;     </div><div class="line">                  Thread.sleep(<span class="number">1000</span>);<span class="comment">//守护线程阻塞1秒后运行     </span></div><div class="line">                  File f=<span class="keyword">new</span> File(<span class="string">"daemon.txt"</span>);     </div><div class="line">                  FileOutputStream os=<span class="keyword">new</span> FileOutputStream(f,<span class="keyword">true</span>);     </div><div class="line">                  os.write(<span class="string">"daemon"</span>.getBytes());     </div><div class="line">           &#125;     </div><div class="line">               <span class="keyword">catch</span>(IOException e1)&#123;     </div><div class="line">          e1.printStackTrace();     </div><div class="line">               &#125;     </div><div class="line">               <span class="keyword">catch</span>(InterruptedException e2)&#123;     </div><div class="line">                  e2.printStackTrace();     </div><div class="line">           &#125;     </div><div class="line">    &#125;     </div><div class="line">&#125;     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo2</span></span>&#123;     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException     </span></div><div class="line"><span class="function">    </span>&#123;     </div><div class="line">        Runnable tr=<span class="keyword">new</span> TestRunnable();     </div><div class="line">        Thread thread=<span class="keyword">new</span> Thread(tr);     </div><div class="line">                thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//设置守护线程     </span></div><div class="line">        thread.start(); <span class="comment">//开始执行分进程     </span></div><div class="line">    &#125;     </div><div class="line">&#125;     </div><div class="line"><span class="comment">//运行结果：文件daemon.txt中没有"daemon"字符串。</span></div></pre></td></tr></table></figure>
<p>看到了吧，把输入输出逻辑包装进守护线程多么的可怕，字符串并没有写入指定文件。原因也很简单，直到主线程完成，守护线程仍处于1秒的阻塞状态。这个时候主线程很快就运行完了，虚拟机退出，Daemon停止服务，输出操作自然失败了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;  </div><div class="line">    　　Thread t1 = <span class="keyword">new</span> MyCommon();  </div><div class="line">    　　Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyDaemon());  </div><div class="line">    　　t2.setDaemon(<span class="keyword">true</span>); <span class="comment">//设置为守护线程  </span></div><div class="line">    　　t2.start();  </div><div class="line">    　　t1.start();  </div><div class="line">　　&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCommon</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    　　<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </div><div class="line">        　　System.out.println(<span class="string">"线程1第"</span> + i + <span class="string">"次执行！"</span>);  </div><div class="line">        　　<span class="keyword">try</span> &#123;  </div><div class="line">            　　Thread.sleep(<span class="number">7</span>);  </div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            　　e.printStackTrace();  </div><div class="line">        　　&#125;  </div><div class="line">　　    &#125;  </div><div class="line">　　&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDaemon</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    　　<span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999L</span>; i++) &#123;  </div><div class="line">        　　System.out.println(<span class="string">"后台线程第"</span> + i + <span class="string">"次执行！"</span>);  </div><div class="line">        　　<span class="keyword">try</span> &#123;  </div><div class="line">            　　Thread.sleep(<span class="number">7</span>);  </div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            　　e.printStackTrace();  </div><div class="line">        　　&#125;  </div><div class="line">    　　&#125;  </div><div class="line">　　&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">后台线程第0次执行！</div><div class="line">　　线程1第0次执行！ </div><div class="line">　　线程1第1次执行！ </div><div class="line">　　后台线程第1次执行！ </div><div class="line">　　后台线程第2次执行！ </div><div class="line">　　线程1第2次执行！ </div><div class="line">　　线程1第3次执行！ </div><div class="line">　　后台线程第3次执行！ </div><div class="line">　　线程1第4次执行！ </div><div class="line">　　后台线程第4次执行！ </div><div class="line">　　后台线程第5次执行！ </div><div class="line">　　后台线程第6次执行！ </div><div class="line">　　后台线程第7次执行！ </div><div class="line">　　Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>　　从上面的执行结果可以看出：<br>　　前台线程是保证执行完毕的，后台线程还没有执行完毕就退出了。<br>　　实际上：JRE判断程序是否执行结束的标准是所有的前台执线程行完毕了，而不管后台线程的状态，因此，在使用后台县城时候一定要注意这个问题。 </p>
<p>补充说明：<br>定义：守护线程–也称“服务线程”，在没有用户线程可服务时会自动离开。<br>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。<br>设置：通过setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为<br>守护线程的方式是在 线程对象创建 之前 用线程对象的setDaemon方法。<br>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的<br>Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是<br>JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于<br>实时监控和管理系统中的可回收资源。<br>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且<br>周期性地执行某种任务或等待处理某些发生的事件。也就是<br>说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是<br>什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个<br>或以上的非守护线程则JVM不会退出。</p>
<p>实际应用例子：<br>在使用长连接的comet服务端推送技术中，消息推送线程设置为守护线程，服务于ChatServlet的servlet用户线程，在servlet的init启动消息线程，servlet一旦初始化后，一直存在服务器，servlet摧毁后,消息线程自动退出</p>
<p>容器收到一个Servlet请求，调度线程从线程池中选出一个工作者线程,将请求传递给该工作者线程，然后由该线程来执行Servlet的 service方法。当这个线程正在执行的时候,容器收到另外一个请求,调度线程同样从线程池中选出另一个工作者线程来服务新的请求,容器并不关心这个请求是否访问的是同一个Servlet.当容器同时收到对同一个Servlet的多个请求的时候，那么这个Servlet的service()方法将在多线程中并发执行。<br>Servlet容器默认采用单实例多线程的方式来处理请求，这样减少产生Servlet实例的开销，提升了对请求的响应时间，对于Tomcat可以在server.xml中通过<connector>元素设置线程池中线程的数目。<br>如图：<br><img src="http://img.blog.csdn.net/20130523112456083" alt="image"></connector></p>
<p>为什么要用守护线程？</p>
<p>我们知道静态变量是ClassLoader级别的，如果Web应用程序停止，这些静态变量也会从JVM中清除。但是线程则是JVM级别的，如果你在Web 应用中启动一个线程，这个线程的生命周期并不会和Web应用程序保持同步。也就是说，即使你停止了Web应用，这个线程依旧是活跃的。正是因为这个很隐晦 的问题，所以很多有经验的开发者不太赞成在Web应用中私自启动线程。</p>
<p>如果我们手工使用JDK Timer（Quartz的Scheduler），在Web容器启动时启动Timer，当Web容器关闭时，除非你手工关闭这个Timer，否则Timer中的任务还会继续运行！</p>
<p>下面通过一个小例子来演示这个“诡异”的现象，我们通过ServletContextListener在Web容器启动时创建一个Timer并周期性地运行一个任务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码清单StartCycleRunTask：容器监听器  </span></div><div class="line"><span class="keyword">package</span> com.baobaotao.web;  </div><div class="line"><span class="keyword">import</span> java.util.Date;  </div><div class="line"><span class="keyword">import</span> java.util.Timer;  </div><div class="line"><span class="keyword">import</span> java.util.TimerTask;  </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;  </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartCycleRunTask</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Timer timer;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;  </div><div class="line">        <span class="comment">// ②该方法在Web容器关闭时执行  </span></div><div class="line">        System.out.println(<span class="string">"Web应用程序启动关闭..."</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;  </div><div class="line">         <span class="comment">//②在Web容器启动时自动执行该方法  </span></div><div class="line">        System.out.println(<span class="string">"Web应用程序启动..."</span>);  </div><div class="line">        timer = <span class="keyword">new</span> Timer();<span class="comment">//②-1:创建一个Timer，Timer内部自动创建一个背景线程  </span></div><div class="line">        TimerTask task = <span class="keyword">new</span> SimpleTimerTask();  </div><div class="line">        timer.schedule(task, <span class="number">1000L</span>, <span class="number">5000L</span>); <span class="comment">//②-2:注册一个5秒钟运行一次的任务  </span></div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;<span class="comment">//③任务  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println((++count)+<span class="string">"execute task..."</span>+(<span class="keyword">new</span> Date()));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在web.xml中声明这个Web容器监听：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">：&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span> </div><div class="line">… </div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.baobaotao.web.StartCycleRunTask<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在Tomcat中部署这个Web应用并启动后，你将看到任务每隔5秒钟执行一次。<br>运行一段时间后，登录Tomcat管理后台，将对应的Web应用（chapter13）关闭。 </p>
<p>转到Tomcat控制台，你将看到虽然Web应用已经关闭，但Timer任务还在我行我素地执行如故——舞台已经拆除，戏子继续表演： </p>
<p>我们可以通过改变清单StartCycleRunTask的代码，在contextDestroyed(ServletContextEvent arg0)中添加timer.cancel()代码，在Web容器关闭后手工停止Timer来结束任务。</p>
<p>Spring为JDK Timer和Quartz Scheduler所提供的TimerFactoryBean和SchedulerFactoryBean能够和Spring容器的生命周期关联，在 Spring容器启动时启动调度器，而在Spring容器关闭时，停止调度器。所以在Spring中通过这两个FactoryBean配置调度器，再从 Spring IoC中获取调度器引用进行任务调度将不会出现这种Web容器关闭而任务依然运行的问题。而如果你在程序中直接使用Timer或Scheduler，如不 进行额外的处理，将会出现这一问题。 </p>
<p><strong>文章转载自</strong><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/shimiso/article/details/8964414">http://blog.csdn.net/shimiso/article/details/8964414</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解下Java中的守护线程，看到这篇文章很详细，记录下来。&lt;br&gt;&lt;strong&gt;文章来自&lt;/strong&gt;&lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;http://blog.csdn.net/shimiso/article/details/8964414&quot;&gt;http://blog.csdn.net/shimiso/article/details/8964414&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程)&lt;br&gt;用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：&lt;br&gt;只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。&lt;br&gt;Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。&lt;br&gt;User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java中使用有返回值的线程</title>
    <link href="http://blog.wuwii.com/java-thread-return.html"/>
    <id>http://blog.wuwii.com/java-thread-return.html</id>
    <published>2017-11-01T02:18:03.000Z</published>
    <updated>2017-11-01T02:41:31.183Z</updated>
    
    <content type="html"><![CDATA[<p>在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable，可以获取线程中的返回值，但是获取线程的返回值的时候，需要注意，我们的方法是异步的，获取返回值的时候，线程任务不一定有返回值，所以，需要判断线程是否结束，才能够去取值。</p>
<a id="more"></a>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/31 11:17&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SLEEP_MILLS = <span class="number">3000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer RUN_SLEEP_MILLS = <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> afterSeconds = SLEEP_MILLS / RUN_SLEEP_MILLS;</div><div class="line"></div><div class="line">    <span class="comment">// 线程池（根据机器的核心数）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService fixedThreadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testCallable</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Future&lt;String&gt; future = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line"><span class="comment">             * 在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable</span></div><div class="line"><span class="comment">             *</span></div><div class="line"><span class="comment">             * Callable需要实现的是call()方法，而不是run()方法，返回值的类型有Callable的类型参数指定，</span></div><div class="line"><span class="comment">             * Callable只能由ExecutorService.submit() 执行，正常结束后将返回一个future对象。</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            future = fixedThreadPool.submit(() -&gt; &#123;</div><div class="line">                Thread.sleep(SLEEP_MILLS);</div><div class="line">                <span class="keyword">return</span> <span class="string">"The thread returns value."</span>;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (future == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line"><span class="comment">             * 获得future对象之前可以使用isDone()方法检测future是否完成，完成后可以调用get()方法获得future的值，</span></div><div class="line"><span class="comment">             * 如果直接调用get()方法，get()方法将阻塞到线程结束，很浪费。</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            <span class="keyword">if</span> (future.isDone()) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(future.get());</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"After "</span> + afterSeconds-- + <span class="string">" seconds,get the future returns value."</span>);</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">new</span> Test().testCallable();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">After 3 seconds,get the future returns value.</div><div class="line">After 2 seconds,get the future returns value.</div><div class="line">After 1 seconds,get the future returns value.</div><div class="line">The thread returns value.</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ol>
<li>需要返回值的线程使用Callable 接口，实现call 方法；</li>
<li>获得future对象之前可以使用isDone()方法检测future是否完成，完成后可以调用get()方法获得future的值，如果直接调用get()方法，get()方法将阻塞到线程结束。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable，可以获取线程中的返回值，但是获取线程的返回值的时候，需要注意，我们的方法是异步的，获取返回值的时候，线程任务不一定有返回值，所以，需要判断线程是否结束，才能够去取值。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程中线程池源码分析及使用</title>
    <link href="http://blog.wuwii.com/java-concurrent-thread-pool.html"/>
    <id>http://blog.wuwii.com/java-concurrent-thread-pool.html</id>
    <published>2017-10-31T08:38:03.000Z</published>
    <updated>2017-11-01T07:09:13.818Z</updated>
    
    <content type="html"><![CDATA[<p>当Java处理高并发的时候，线程数量特别的多的时候，而且每个线程都是执行很短的时间就结束了，频繁创建线程和销毁线程需要占用很多系统的资源和时间，会降低系统的工作效率。</p>
<p>参考<a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3932921.html">http://www.cnblogs.com/dolphin0520/p/3932921.html</a></p>
<p>由于原文作者使用的API 是1.6 版本的，参考他的文章，做了一些修改成 jdk 1.8版本的方法，涉及到的内容比较多，可能有少许错误。</p>
<p><strong>API : jdk1.8.0_144</strong></p>
<a id="more"></a>
<h3 id="ThreadPoolExecutor类"><a href="#ThreadPoolExecutor类" class="headerlink" title="ThreadPoolExecutor类"></a>ThreadPoolExecutor类</h3><p>Java中线程池主要是并发包<code>java.util.concurrent</code> 中 <code>ThreadPoolExecutor</code>这个类实现的。</p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>我们直接调用它的时候，使用的是它的构造函数，它有四个构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</div><div class="line">    <span class="comment">//省略前面的代码</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             threadFactory, defaultHandler);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             Executors.defaultThreadFactory(), handler);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></div><div class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</div><div class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</div><div class="line">            maximumPoolSize &lt; corePoolSize ||</div><div class="line">            keepAliveTime &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</div><div class="line">                <span class="keyword">null</span> :</div><div class="line">                AccessController.getContext();</div><div class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</div><div class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</div><div class="line">        <span class="keyword">this</span>.workQueue = workQueue;</div><div class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</div><div class="line">        <span class="keyword">this</span>.handler = handler;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//省略后面的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ThreadPoolExecutor</code>继承了<code>AbstractExecutorService</code>抽象类，并提供了四个构造器，事实上，前面三个构造器都是调用的第四个构造器进行的初始化工作。所以主要研究下第四个构造器的方法。</p>
<p>首先了解下构造器中参数的意思：</p>
<ul>
<li><code>corePoolSize</code>: 核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li>
<li><code>maximumPoolSize</code>: 线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li>
<li><code>keepAliveTime</code>:字面意思就是心跳时间，就是这个线程池中的线程数量大于<code>corePoolSize</code>的时候开始计时，设置空闲线程最多能存活多长时间。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0，它的单位是参数<code>TimeUnit unit</code>；</li>
<li><p><code>unit</code>: 参数<code>keepAliveTime</code>的时间单位，有7种取值，在TimeUnit类中有7种静态属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TimeUnit.DAYS; <span class="comment">//天</span></div><div class="line">TimeUnit.HOURS; <span class="comment">//小时</span></div><div class="line">TimeUnit.MINUTES; <span class="comment">//分钟</span></div><div class="line">TimeUnit.SECONDS; <span class="comment">//秒</span></div><div class="line">TimeUnit.MILLISECONDS; <span class="comment">//毫秒</span></div><div class="line">TimeUnit.MICROSECONDS; <span class="comment">//微妙</span></div><div class="line">TimeUnit.NANOSECONDS; <span class="comment">//纳秒</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>workQueue</code>：一个阻塞队列<code>BlockingQueue</code>，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择，以后再详细学习<code>BlockingQueue</code>阻塞队列使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayBlockingQueue; <span class="comment">//　基于数组的阻塞队列实现</span></div><div class="line">LinkedBlockingQueue; <span class="comment">// 基于链表的阻塞队列</span></div><div class="line">SynchronousQueue; <span class="comment">//一种无缓冲的等待队列</span></div><div class="line">DelayQueue； <span class="comment">// 队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</span></div><div class="line">PriorityBlockingQueue <span class="comment">// 基于优先级的阻塞队列</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>threadFactory</code>: 线程工厂，主要用来创建线程；</p>
</li>
<li><code>handler</code>: 表示当拒绝处理任务时的策略，有以下四种取值：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor.AbortPolicy <span class="comment">//丢弃任务并抛出RejectedExecutionException异常。 </span></div><div class="line">ThreadPoolExecutor.DiscardPolicy <span class="comment">//也是丢弃任务，但是不抛出异常。 </span></div><div class="line">ThreadPoolExecutor.DiscardOldestPolicy <span class="comment">//丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></div><div class="line">ThreadPoolExecutor.CallerRunsPolicy <span class="comment">//由调用线程处理该任务</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ThreadPoolExecutor方法"><a href="#ThreadPoolExecutor方法" class="headerlink" title="ThreadPoolExecutor方法"></a>ThreadPoolExecutor方法</h4><p>首先<code>ThreadPoolExecutor</code>类自己拥有很多方法，用来获取线程池的相关属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><code>ThreadPoolExecutor</code>继承了<code>AbstractExecutorService</code>这个抽象类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExecutorService</span> <span class="keyword">implements</span> <span class="title">ExecutorService</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;&#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">doInvokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line"><span class="function"><span class="params">                           <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</div><div class="line">                                         <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractExecutorService</code>实现了接口 <code>ExecutorService</code>中所有的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</div><div class="line">    Future&lt;?&gt; submit(Runnable task);</div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</div><div class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line">  </div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line"><span class="function"><span class="params">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ExecutorService</code> 接口继承了 <code>Executor</code>接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出类<code>ThreadPoolExecutor</code>拥有了多少方法。</p>
<p>平时开发中主要使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">execute() // 线程池启动一个线程</div><div class="line">submit() // 线程池启动一个线程，有返回值</div><div class="line">shutdown()  //执行完毕所有等待中的线程，再关闭线程池</div><div class="line">shutdownNow() // 直接关闭，不等待</div></pre></td></tr></table></figure></p>
<ul>
<li><p>execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。</p>
</li>
<li><p>submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果。</p>
</li>
<li><p>shutdown()和shutdownNow()是用来关闭线程池的。</p>
</li>
</ul>
<h3 id="线程池的实现"><a href="#线程池的实现" class="headerlink" title="线程池的实现"></a>线程池的实现</h3><h4 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">* The runState provides the main lifecycle control, taking on values:</div><div class="line">     *</div><div class="line">     *   RUNNING:  Accept <span class="keyword">new</span> tasks and process queued tasks</div><div class="line">     *   SHUTDOWN: Don<span class="string">'t accept new tasks, but process queued tasks</span></div><div class="line"><span class="string">     *   STOP:     Don'</span>t accept <span class="keyword">new</span> tasks, don<span class="string">'t process queued tasks,</span></div><div class="line"><span class="string">     *             and interrupt in-progress tasks</span></div><div class="line"><span class="string">     *   TIDYING:  All tasks have terminated, workerCount is zero,</span></div><div class="line"><span class="string">     *             the thread transitioning to state TIDYING</span></div><div class="line"><span class="string">     *             will run the terminated() hook method</span></div><div class="line"><span class="string">     *   TERMINATED: terminated() has completed</span></div><div class="line"><span class="string">     *</span></div><div class="line"><span class="string">     * The numerical order among these values matters, to allow</span></div><div class="line"><span class="string">     * ordered comparisons. The runState monotonically increases over</span></div><div class="line"><span class="string">     * time, but need not hit each state. The transitions are:</span></div><div class="line"><span class="string">     *</span></div><div class="line"><span class="string">     * RUNNING -&gt; SHUTDOWN</span></div><div class="line"><span class="string">     *    On invocation of shutdown(), perhaps implicitly in finalize()</span></div><div class="line"><span class="string">     * (RUNNING or SHUTDOWN) -&gt; STOP</span></div><div class="line"><span class="string">     *    On invocation of shutdownNow()</span></div><div class="line"><span class="string">     * SHUTDOWN -&gt; TIDYING</span></div><div class="line"><span class="string">     *    When both queue and pool are empty</span></div><div class="line"><span class="string">     * STOP -&gt; TIDYING</span></div><div class="line"><span class="string">     *    When pool is empty</span></div><div class="line"><span class="string">     * TIDYING -&gt; TERMINATED</span></div><div class="line"><span class="string">     *    When the terminated() hook method has completed</span></div><div class="line"><span class="string">     *</span></div><div class="line"><span class="string">     * Threads waiting in awaitTermination() will return when the</span></div><div class="line"><span class="string">     * state reaches TERMINATED.</span></div></pre></td></tr></table></figure>
<p>根据上面的代码文档，，可以清楚的了解到线程池的各种状态，以及在这种状态中能做的事情，状态之间的转变。</p>
<p>如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</p>
<p>如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</p>
<p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>; <span class="comment">//29</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;   <span class="comment">//536870911 目前最大线程容量</span></div><div class="line"></div><div class="line"><span class="comment">// runState is stored in the high-order bits</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 111 00000000000000000000000000000</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS; <span class="comment">// 000 00000000000000000000000000000</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 001 00000000000000000000000000000</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS; <span class="comment">// 010 00000000000000000000000000000 </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS; <span class="comment">// 100 00000000000000000000000000000</span></div><div class="line"></div><div class="line"><span class="comment">// Packing and unpacking ctl</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125; <span class="comment">//最高3位， 状态</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125; <span class="comment">//后29位 ，工作数量</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</div></pre></td></tr></table></figure>
<p>ctl作为ThreadPoolExecutor的核心状态控制字段，包含来两个信息：</p>
<ul>
<li>工作线程总数  <code>workerCount</code></li>
<li>线程池状态 <code>RUNNING</code>、 <code>SHUTDOWN</code>、 <code>STOP</code>、 <code>TIDYING</code>、 <code>TERMINATED</code>。</li>
</ul>
<p>COUNT_BITS 是32减去3 就是29，下面的线程池状态就是－1 到 3 分别向左移动29位。</p>
<p> 如此，int的右侧29位，代表着线程数量，总数可以达到2的29次，29位后的3位代表线程池的状态<br>这样，线程池增加一个线程，只需吧ctl加1即可，而我们也发现实际这个线程池的最高线程数量是2的29次减1。并不是先前我们现象的2的32次减1。这个作者在注释中也提到了，说如果后续需要增大这个值， 可以吧ctl定义成AtomicLong。</p>
<h4 id="任务的执行excute"><a href="#任务的执行excute" class="headerlink" title="任务的执行excute"></a>任务的执行excute</h4><h5 id="属性变量"><a href="#属性变量" class="headerlink" title="属性变量"></a>属性变量</h5><p>了解<code>ThreadPoolExecutor</code>类中其他的一些比较重要成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;              <span class="comment">//任务缓存队列，用来存放等待执行的任务</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();   <span class="comment">//线程池的主要状态锁，对线程池状态（比如线程池大小</span></div><div class="line">                                                              <span class="comment">//、runState等）的改变都要使用这个锁</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();  <span class="comment">//用来存放工作集</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span>  keepAliveTime;    <span class="comment">//线程存货时间   </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;   <span class="comment">//是否允许为核心线程设置存活时间</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   corePoolSize;     <span class="comment">//核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   maximumPoolSize;   <span class="comment">//线程池最大能容忍的线程数</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   poolSize;       <span class="comment">//线程池中当前的线程数</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler; <span class="comment">//任务拒绝策略</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;   <span class="comment">//线程工厂，用来创建线程</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;   <span class="comment">//用来记录线程池中曾经出现过的最大线程数</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;   <span class="comment">//用来记录已经执行完毕的任务个数</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment"> * Wait condition to support awaitTermination</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition(); <span class="comment">//线程等待时的关闭的条件</span></div><div class="line"></div><div class="line"><span class="comment">/* The context to be used when executing the finalizer, or null. */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc; <span class="comment">// 执行任务完成后使用的内容，或者为null</span></div></pre></td></tr></table></figure></p>
<ul>
<li>largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系。</li>
<li>线程池线程一般正常工作的时候最大线程数为corePoolSize，当任务数量大于corePoolSize的时候，任务就进入等待的队列中，不继续增加线程；当等待队列也放满的时候，不能再往里面装任务的时候，这个时候就需要重新开辟新的线程，来工作了，并且数量要小于<code>maximumPoolSize</code>；如果大于maximumPoolSize，就调用handler方法。</li>
</ul>
<h5 id="执行任务-execute"><a href="#执行任务-execute" class="headerlink" title="执行任务 execute"></a>执行任务 execute</h5><p>使用<code>AbstractExecuorService</code>中的submit 方法，可以执行新的进程，当然submit，最终执行的是execute方法，在<code>ThreadPoolExecutor</code>类中实现了excute方法；</p>
<p>重点研究exexute 方法的实现，这个有点难，网上介绍1.6里面的源码中execute方法已经和我这个1.8版本有很大出入了，大致上应该没有偏离：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Executes the given task sometime in the future.  The task</span></div><div class="line"><span class="comment">     * may execute in a new thread or in an existing pooled thread.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * If the task cannot be submitted for execution, either because this</span></div><div class="line"><span class="comment">     * executor has been shutdown or because its capacity has been reached,</span></div><div class="line"><span class="comment">     * the task is handled by the current &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> command the task to execute</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></div><div class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></div><div class="line"><span class="comment">     *         cannot be accepted for execution</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Proceed in 3 steps:</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></div><div class="line"><span class="comment">         * start a new thread with the given command as its first</span></div><div class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></div><div class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></div><div class="line"><span class="comment">         * threads when it shouldn't, by returning false.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></div><div class="line"><span class="comment">         * to double-check whether we should have added a thread</span></div><div class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></div><div class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></div><div class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></div><div class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></div><div class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></div><div class="line"><span class="comment">         * and so reject the task.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            c = ctl.get();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">            <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">                reject(command);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</div><div class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">            reject(command);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>执行流程就是：</p>
<ol>
<li>判断提交的任务command是否为null，若是null，则抛出空指针异常；</li>
<li>第二步 ct1.get()；用这个<code>workerCountOf( ct1.get())</code> 计算线程池已经使用多少线程；</li>
<li>当使用的线程数小于核心线程数（corePoolSize），进入addWorker 方法中，这里就是开始进程的地方，进入到最重要的地方，为了这一步不要跳得太远，还是接着看execute方法，后面再看addWorker方法；</li>
<li>当使用的线程数不小于核心线程数（corePoolSize），新来得任务就要进入等待执行的状态；<br><code>if (isRunning(c) &amp;&amp; workQueue.offer(command))</code> 检查线程是否在running 状态和任务是否能够成功进入等待<code>排队</code> ；<br>4.1. 进入队列后，重新检查任务，如果线程池状态不是running状态， ，将回滚任务，拒绝执行任务，这样做主要是因为任务如果还在缓存队列等待的过程中，线程池中断了，就回滚任务，为了安全。<br>4.2. 如果线程中的线程数为0 了，创建一个空线程。</li>
<li>当使用的线程数不小于核心线程数（corePoolSize）的时候，并且添加进入到缓存队列失败后，就会执行<code>else if (!addWorker(command, false))reject(command);</code> 这段代码，意思就是直接开辟一个新的线程去行这个任务，如果执行失败，拒绝策略进行处理这个任务，当然，如果当前线程池中的线程数目达到<code>maximumPoolSize</code>，addWorker方法中也会采取任务拒绝策略进行处理。</li>
</ol>
<h5 id="addWorker-创建线程"><a href="#addWorker-创建线程" class="headerlink" title="addWorker 创建线程"></a>addWorker 创建线程</h5><p>下面将是阅读<code>addWorker</code>的源码，研究线程池怎么添加一个任务的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Checks if a new worker can be added with respect to current</span></div><div class="line"><span class="comment"> * pool state and the given bound (either core or maximum). If so,</span></div><div class="line"><span class="comment"> * the worker count is adjusted accordingly, and, if possible, a</span></div><div class="line"><span class="comment"> * new worker is created and started, running firstTask as its</span></div><div class="line"><span class="comment"> * first task. This method returns false if the pool is stopped or</span></div><div class="line"><span class="comment"> * eligible to shut down. It also returns false if the thread</span></div><div class="line"><span class="comment"> * factory fails to create a thread when asked.  If the thread</span></div><div class="line"><span class="comment"> * creation fails, either due to the thread factory returning</span></div><div class="line"><span class="comment"> * null, or due to an exception (typically OutOfMemoryError in</span></div><div class="line"><span class="comment"> * Thread.start()), we roll back cleanly.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> firstTask the task the new thread should run first (or</span></div><div class="line"><span class="comment"> * null if none). Workers are created with an initial first task</span></div><div class="line"><span class="comment"> * (in method execute()) to bypass queuing when there are fewer</span></div><div class="line"><span class="comment"> * than corePoolSize threads (in which case we always start one),</span></div><div class="line"><span class="comment"> * or when the queue is full (in which case we must bypass queue).</span></div><div class="line"><span class="comment"> * Initially idle threads are usually created via</span></div><div class="line"><span class="comment"> * prestartCoreThread or to replace other dying workers.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> core if true use corePoolSize as bound, else</span></div><div class="line"><span class="comment"> * maximumPoolSize. (A boolean indicator is used here rather than a</span></div><div class="line"><span class="comment"> * value to ensure reads of fresh values after checking other pool</span></div><div class="line"><span class="comment"> * state).</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> true if successful</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</div><div class="line">    retry:</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line"></div><div class="line">        <span class="comment">// Check if queue empty only if necessary.</span></div><div class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</div><div class="line">            ! (rs == SHUTDOWN &amp;&amp;</div><div class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</div><div class="line">               ! workQueue.isEmpty()))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</div><div class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</div><div class="line">                <span class="keyword">break</span> retry;</div><div class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></div><div class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</div><div class="line">                <span class="keyword">continue</span> retry;</div><div class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</div><div class="line">    Worker w = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        w = <span class="keyword">new</span> Worker(firstTask); </div><div class="line">        <span class="keyword">final</span> Thread t = w.thread; <span class="comment">//创建一个线程</span></div><div class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">            mainLock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Recheck while holding lock.</span></div><div class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></div><div class="line">                <span class="comment">// shut down before lock acquired.</span></div><div class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</div><div class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line">                    workers.add(w);</div><div class="line">                    <span class="keyword">int</span> s = workers.size();</div><div class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</div><div class="line">                        largestPoolSize = s;</div><div class="line">                    workerAdded = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (workerAdded) &#123; <span class="comment">//当任务成功添加到线程池，去执行它，改变标志符号。</span></div><div class="line">                t.start();</div><div class="line">                workerStarted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (! workerStarted)</div><div class="line">            addWorkerFailed(w);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> workerStarted;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看代码注释知道了第二个参数<code>core</code>的意义，当它为<code>true</code>的时候 使用的是线程核心数中的线程，当它为<code>false</code> 的时候，使用的是数量是maximumPoolSize，就是当缓存中的队列也排满的时候。</p>
<p>因此，调用这个 addWorker方法有4种传参的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">addWorker(command, true);</div><div class="line">addWorker(command, false);</div><div class="line">addWorker(null, false);</div><div class="line">addWorker(null, true);</div></pre></td></tr></table></figure></p>
<ol>
<li>第一个：线程数小于corePoolSize时，放一个需要处理的task进worker set。如果worker set长度超过corePoolSize，就返回false。</li>
<li>第二个：当队列被放满时，就尝试将这个新来的task直接放入worker set，而此时worker set 的长度限制是maximumPoolSize。如果线程池也满了的话就返回false。</li>
<li>第三个：放入一个空的task进set，比较的的长度限制是maximumPoolSize。这样一个task为空的worker在线程执行的时候会判断出后去任务队列里拿任务，这样就相当于世创建了一个新的线程，只是没有马上分配任务。</li>
<li>第四个：这个方法就是放一个null的task进set，而且是在小于corePoolSize时。实际使用中是在 prestartCoreThread() 方法。这个方法用来为线程池先启动一个worker等待在那边，如果此时set中的数量已经达到corePoolSize那就返回false，什么也不干。还有是 <code>prestartAllCoreThreads()</code> 方法，准备corePoolSize个worker，初始化线程池中的线程。<br>默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">prestartCoreThread()：初始化一个核心线程；</div><div class="line">prestartAllCoreThreads()：初始化所有核心线程</div></pre></td></tr></table></figure>
</li>
</ol>
<p>前面代码的意思就是验证线程池的状态是不是在<code>RUNNING</code>状态，并且判断，线程数是不是超过了<code>maximumPoolSize</code>，如果超过了最大线程数量，直接返回false，就回到execute 方法最后个<code>if else()</code>代码块中，拒绝任务。</p>
<h5 id="Worker-中主要实现"><a href="#Worker-中主要实现" class="headerlink" title="Worker 中主要实现"></a>Worker 中主要实现</h5><p><code>Worker</code> 这个类很简单，只是继承了一个<code>Runnable</code>接口，然后在<code>run()</code>方法中去执行我们传入的<code>firstTask</code> 主要是其中的run 方法，它的run方法调用的是<code>runWorker</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">    Thread wt = Thread.currentThread();</div><div class="line">    Runnable task = w.firstTask;</div><div class="line">    w.firstTask = <span class="keyword">null</span>;</div><div class="line">    w.unlock(); <span class="comment">// allow interrupts</span></div><div class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</div><div class="line">            w.lock();</div><div class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></div><div class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></div><div class="line">            <span class="comment">// requires a recheck in second case to deal with</span></div><div class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></div><div class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                 (Thread.interrupted() &amp;&amp;</div><div class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class="line">                !wt.isInterrupted())</div><div class="line">                wt.interrupt();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                beforeExecute(wt, task);</div><div class="line">                Throwable thrown = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    task.run();</div><div class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</div><div class="line">                    thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</div><div class="line">                    thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</div><div class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    afterExecute(task, thrown);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                task = <span class="keyword">null</span>;</div><div class="line">                w.completedTasks++;</div><div class="line">                w.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        completedAbruptly = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        processWorkerExit(w, completedAbruptly);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意当没有可执行的任务的时候，执行<code>getTask()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line"></div><div class="line">        <span class="comment">// Check if queue empty only if necessary.</span></div><div class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; <span class="comment">//判断线程状态和缓存队列中的线程是否为空</span></div><div class="line">            decrementWorkerCount();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line"></div><div class="line">        <span class="comment">// Are workers subject to culling?</span></div><div class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123; </div><div class="line">            <span class="comment">//也就是说如果线程池处于STOP状态、或者任务队列已为空或者允许为核心池线程设置空闲存活时间并且线程数大于1时，允许worker退出。</span></div><div class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Runnable r = timed ?</div><div class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class="line">                workQueue.take();</div><div class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> r;</div><div class="line">            timedOut = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</div><div class="line">            timedOut = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候看到了，它原来去缓存队列中去取任务，来执行。</p>
<p>并且下面代码块做的任务，作者已经给出注释了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// Recheck while holding lock.</div><div class="line">// Back out on ThreadFactory failure or if</div><div class="line">// shut down before lock acquired.</div></pre></td></tr></table></figure></p>
<p>很容易理解了这段代码。</p>
<p>怎么样开启线程池，并且添加一个任务就到此结束了。</p>
<h4 id="任务拒绝策略"><a href="#任务拒绝策略" class="headerlink" title="任务拒绝策略"></a>任务拒绝策略</h4><p>当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</div><div class="line">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</div><div class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</div></pre></td></tr></table></figure></p>
<h4 id="任务缓存队列及排队策略"><a href="#任务缓存队列及排队策略" class="headerlink" title="任务缓存队列及排队策略"></a>任务缓存队列及排队策略</h4><p>workQueue，任务缓存队列，用来存放等待执行的任务；<br>一个阻塞队列<code>BlockingQueue</code>，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayBlockingQueue; <span class="comment">//　基于数组的阻塞队列实现，此队列创建时必须指定大小；</span></div><div class="line">LinkedBlockingQueue; <span class="comment">// 基于链表的阻塞队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</span></div><div class="line">SynchronousQueue; <span class="comment">//一种无缓冲的等待队列，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</span></div><div class="line">DelayQueue； <span class="comment">// 队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</span></div><div class="line">PriorityBlockingQueue <span class="comment">// 基于优先级的阻塞队列</span></div></pre></td></tr></table></figure></p>
<h4 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h4><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()，其中：</p>
<ul>
<li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务；</li>
<li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。</li>
</ul>
<h4 id="创建线程池并且使用"><a href="#创建线程池并且使用" class="headerlink" title="创建线程池并且使用"></a>创建线程池并且使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/1 11:08&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</div><div class="line">            queue);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ThreadPoolExecutor executor = TestPool.executor;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</div><div class="line">            MyTask myTask = <span class="keyword">new</span> MyTask(i);</div><div class="line">            executor.execute(myTask);</div><div class="line">            System.out.println(<span class="string">"线程池中线程数目："</span> + executor.getPoolSize() + <span class="string">"，缓存队列中等待执行的任务数目："</span> +</div><div class="line">                    executor.getQueue().size() + <span class="string">"，已执行完的任务数目："</span> + executor.getCompletedTaskCount());</div><div class="line">        &#125;</div><div class="line">        executor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskNum;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskNum = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"正在执行task "</span> + taskNum);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.currentThread().sleep(<span class="number">4000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"task "</span> + taskNum + <span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">正在执行task 0</div><div class="line">线程池中线程数目：1，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">线程池中线程数目：2，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">线程池中线程数目：3，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">正在执行task 1</div><div class="line">线程池中线程数目：4，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">正在执行task 2</div><div class="line">正在执行task 3</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">正在执行task 4</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：1，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：2，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：3，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：4，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">线程池中线程数目：6，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">线程池中线程数目：7，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 10</div><div class="line">线程池中线程数目：8，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 11</div><div class="line">正在执行task 12</div><div class="line">线程池中线程数目：9，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 13</div><div class="line">线程池中线程数目：10，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 14</div><div class="line">task 0执行完毕</div><div class="line">task 2执行完毕</div><div class="line">task 1执行完毕</div><div class="line">正在执行task 7</div><div class="line">task 3执行完毕</div><div class="line">正在执行task 8</div><div class="line">正在执行task 6</div><div class="line">正在执行task 5</div><div class="line">task 4执行完毕</div><div class="line">task 10执行完毕</div><div class="line">task 11执行完毕</div><div class="line">task 14执行完毕</div><div class="line">task 12执行完毕</div><div class="line">task 13执行完毕</div><div class="line">正在执行task 9</div><div class="line">task 7执行完毕</div><div class="line">task 6执行完毕</div><div class="line">task 5执行完毕</div><div class="line">task 8执行完毕</div><div class="line">task 9执行完毕</div></pre></td></tr></table></figure></p>
<p>从上面的结果可以看出来，当线程池中线程的数目大于5时，便将任务放入任务缓存队列里面，当任务缓存队列满了之后，便创建新的线程。如果上面程序中，将for循环中改成执行20个任务，就会抛出任务拒绝异常了。</p>
<p>例外创建线程的时候建议使用的时<code>Executors</code>类提供的方法来创建线程池：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Executors.newCachedThreadPool(); //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE</div><div class="line">Executors.newSingleThreadExecutor(); //创建容量为1的缓冲池</div><div class="line">Executors.newFixedThreadPool(int corePoolSize); //创建固定容量大小的缓冲池</div><div class="line">Executors.newScheduledThreadPool(int corePoolSize) //创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行</div></pre></td></tr></table></figure></p>
<h3 id="配置线程池的大小"><a href="#配置线程池的大小" class="headerlink" title="配置线程池的大小"></a>配置线程池的大小</h3><p>一般需要根据任务的类型来配置线程池大小：</p>
<ul>
<li><p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1；</p>
</li>
<li><p>如果是IO密集型任务，参考值可以设置为2*NCPU。</p>
</li>
</ul>
<p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>当一个task被安排进来的时候，再确定不是空值后，直接判断在池中已经有工作的线程是否小于corePoolSize，小于则增加一个线程来负责这个task。</li>
<li>如果池中已经工作的线程大于等于corePoolSize，就向队列里存task，而不是继续增加线程。</li>
<li>当workQueue.offer失败时，也就是说task不能再向队列里放的时候，而此时工作线程大于等于corePoolSize，那么新进的task，就要新开一个线程来接待了。</li>
<li>线程池工作机制是这样：<br>  a.如果正在运行的线程数小于 <code>corePoolSize</code>，那就马上创建线程并运行这个任务，而不会进行排队。<br>  b. 如果正在运行的线程数不小于 <code>corePoolSize</code>，那就把这个任务放入队列。<br>  c. 如果队列满了，并且正在运行的线程数小于 <code>maximumPoolSize</code>，那么还是要创建线程并运行这个任务。<br>  d.如果队列满了，并且正在运行的线程数不小于 <code>maximumPoolSize</code>，那么线程池就会调用handler里方法。(采用<code>LinkedBlockingDeque</code>就不会出现队列满情况)。</li>
<li>使用线程池的时候，需要注意先分配好线程池的大小，大约每个线程占用10M内存，就是空间换时间，如果控制的不好，会存在内存溢出的问题，导致机器宕机。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当Java处理高并发的时候，线程数量特别的多的时候，而且每个线程都是执行很短的时间就结束了，频繁创建线程和销毁线程需要占用很多系统的资源和时间，会降低系统的工作效率。&lt;/p&gt;
&lt;p&gt;参考&lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;http://www.cnblogs.com/dolphin0520/p/3932921.html&quot;&gt;http://www.cnblogs.com/dolphin0520/p/3932921.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于原文作者使用的API 是1.6 版本的，参考他的文章，做了一些修改成 jdk 1.8版本的方法，涉及到的内容比较多，可能有少许错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API : jdk1.8.0_144&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python的一些高级特性</title>
    <link href="http://blog.wuwii.com/python-features.html"/>
    <id>http://blog.wuwii.com/python-features.html</id>
    <published>2017-10-30T14:28:03.000Z</published>
    <updated>2017-10-31T02:27:14.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>定义一个 seasions 列表 ，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions = [&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p>现在需要把前面两个元素放入到 列表 <code>L</code>中，正常想到就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = [seasions[0], seasions[1]]</div><div class="line">&gt;&gt;&gt; L</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure>
<p>进阶一点就是循环取值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = []</div><div class="line">&gt;&gt;&gt; n = 2</div><div class="line">&gt;&gt;&gt; for i in range(n):</div><div class="line">...     L.append(seasions[i])</div><div class="line">...</div><div class="line">&gt;&gt;&gt; L</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure></p>
<p>在python中提供了切片（Slice）操作符，简化了索引范围的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[0:2]</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure></p>
<p>表示从索引为<code>0</code> 开始截取到索引到<code>2</code> 结束，但是不包括索引<code>2</code>的值。</p>
<a id="more"></a>
<p>并且第一个索引0，可以省略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[:2]</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure></p>
<p>从索引1 开始，截取到索引3 的2个元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[1:3]</div><div class="line">[&apos;summer&apos;, &apos;autumn&apos;]</div></pre></td></tr></table></figure></p>
<p>支持省略第二个参数，截取到结束，<br>从第三个开始截取到结束：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[2:]</div><div class="line">[&apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p>Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[-1:]</div><div class="line">[&apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions[-2:]</div><div class="line">[&apos;autumn&apos;, &apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions[-3:]</div><div class="line">[&apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p>操作（0，99）的数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; l = list(range(100))</div><div class="line">&gt;&gt;&gt; l</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,</div><div class="line">48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,</div><div class="line"> 94, 95, 96, 97, 98, 99]</div><div class="line">&gt;&gt;&gt; l[:10]</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">&gt;&gt;&gt; l[-10:]</div><div class="line">[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]</div><div class="line">&gt;&gt;&gt; l[50:60]</div><div class="line">[50, 51, 52, 53, 54, 55, 56, 57, 58, 59]</div><div class="line">&gt;&gt;&gt; l[50:60:2]</div><div class="line">[50, 52, 54, 56, 58]</div><div class="line">&gt;&gt;&gt; l[::10]</div><div class="line">[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]</div><div class="line">&gt;&gt;&gt; l[:]</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,</div><div class="line">48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,</div><div class="line"> 94, 95, 96, 97, 98, 99]</div></pre></td></tr></table></figure></p>
<p>第三个参数是每隔几个元素取出一个值。</p>
<p><code>l[:]</code>复制这个数组。</p>
<p><code>字符串</code>也支持切片操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = &apos;asdfg&apos;</div><div class="line">&gt;&gt;&gt; s[:2]</div><div class="line">&apos;as&apos;</div><div class="line">&gt;&gt;&gt; s[-5::2]</div><div class="line">&apos;adg&apos;</div></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><h4 id="迭代一个list"><a href="#迭代一个list" class="headerlink" title="迭代一个list"></a>迭代一个list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for i in seasions:</div><div class="line">...     print(i)</div><div class="line">...</div><div class="line">spring</div><div class="line">summer</div><div class="line">autumn</div><div class="line">winter</div></pre></td></tr></table></figure>
<h4 id="迭代一个dict"><a href="#迭代一个dict" class="headerlink" title="迭代一个dict"></a>迭代一个<code>dict</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</div><div class="line">&gt;&gt;&gt; for key in d:</div><div class="line">...     print(key)</div><div class="line">...</div><div class="line">a</div><div class="line">c</div><div class="line">b</div></pre></td></tr></table></figure>
<p>默认情况下，<code>dict</code>迭代的是<code>key</code>。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p>
<h4 id="迭代一个字符串"><a href="#迭代一个字符串" class="headerlink" title="迭代一个字符串"></a>迭代一个字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for i in s:</div><div class="line">...     print(i)</div><div class="line">...</div><div class="line">a</div><div class="line">s</div><div class="line">d</div><div class="line">f</div><div class="line">g</div></pre></td></tr></table></figure>
<h4 id="迭代二维数组"><a href="#迭代二维数组" class="headerlink" title="迭代二维数组"></a>迭代二维数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for x, y in [(1, 1), (2, 4), (3, 9)]:</div><div class="line">...     print(x, y)</div><div class="line">...</div><div class="line">1 1</div><div class="line">2 4</div><div class="line">3 9</div></pre></td></tr></table></figure>
<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>列表生成式即<code>List Comprehensions</code>，是Python内置的非常简单却强大的可以用来创建list的生成式。</p>
<p>生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list(range(1, 11))</div><div class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</div></pre></td></tr></table></figure></p>
<p>如果要生成[1x1, 2x2, 3x3, …, 10x10]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</div></pre></td></tr></table></figure></p>
<p>for循环后面还可以加上if判断，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</div><div class="line">[4, 16, 36, 64, 100]</div></pre></td></tr></table></figure></p>
<p>还可以使用两层循环，可以生成全排列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</div><div class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</div></pre></td></tr></table></figure></p>
<p>for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</div><div class="line">&gt;&gt;&gt; for k, v in d.items():</div><div class="line">...     print(k, &apos;=&apos;, v)</div><div class="line">...</div><div class="line">y = B</div><div class="line">x = A</div><div class="line">z = C</div></pre></td></tr></table></figure></p>
<p>使用列表生成式，简化生成一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</div><div class="line">&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()]</div><div class="line">[&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;]</div></pre></td></tr></table></figure></p>
<p>把一个list中所有的字符串变成大写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [s.upper() for s in seasions]</div><div class="line">[&apos;SPRING&apos;, &apos;SUMMER&apos;, &apos;AUTUMN&apos;, &apos;WINTER&apos;]</div></pre></td></tr></table></figure></p>
<p>一个既有字符串又有整数的list ，怎么将它的字符串都变成小写，因为整数类型没有<code>lower</code>方法，直接调用会报错：<br>在列表生成式的循环后面加上if 判断<code>isinstance(s, str)</code>，判断是否是需要的类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = [&apos;Hello&apos;, &apos;World&apos;, 18, &apos;Apple&apos;, None]</div><div class="line">&gt;&gt;&gt; [s.lower() for s in L if isinstance(s, str)]</div><div class="line">[&apos;hello&apos;, &apos;world&apos;, &apos;apple&apos;]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h3&gt;&lt;p&gt;定义一个 seasions 列表 ，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; seasions = [&amp;apos;spring&amp;apos;, &amp;apos;summer&amp;apos;, &amp;apos;autumn&amp;apos;, &amp;apos;winter&amp;apos;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在需要把前面两个元素放入到 列表 &lt;code&gt;L&lt;/code&gt;中，正常想到就是&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L = [seasions[0], seasions[1]]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&amp;apos;spring&amp;apos;, &amp;apos;summer&amp;apos;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进阶一点就是循环取值：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; n = 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(n):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...     L.append(seasions[i])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; L&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&amp;apos;spring&amp;apos;, &amp;apos;summer&amp;apos;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在python中提供了切片（Slice）操作符，简化了索引范围的操作：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; seasions[0:2]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&amp;apos;spring&amp;apos;, &amp;apos;summer&amp;apos;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;表示从索引为&lt;code&gt;0&lt;/code&gt; 开始截取到索引到&lt;code&gt;2&lt;/code&gt; 结束，但是不包括索引&lt;code&gt;2&lt;/code&gt;的值。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python学习之路" scheme="http://blog.wuwii.com/tags/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python中函数</title>
    <link href="http://blog.wuwii.com/python-function.html"/>
    <id>http://blog.wuwii.com/python-function.html</id>
    <published>2017-10-29T13:48:03.000Z</published>
    <updated>2017-10-30T02:57:28.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python-中内置函数"><a href="#python-中内置函数" class="headerlink" title="python 中内置函数"></a>python 中内置函数</h3><p>python 中有很多内置函数，参考网站</p>
<p><a rel="external nofollow" target="_blank" href="http://docs.python.org/3/library/functions.html">http://docs.python.org/3/library/functions.html</a></p>
<p>在调用函数的时候，如果参数<code>数量</code>传入错误，会报错<code>TypeError</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; abs(-2)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; abs(-2, 3)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: abs() takes exactly one argument (2 given)</div></pre></td></tr></table></figure>
<p>在调用<code>abs</code> 函数的时候传入两个参数，会报错<code>TypeError</code>，直接提示，abs() 只能有一个参数。</p>
<a id="more"></a>
<p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是错误的参数类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; abs(&apos;a&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: bad operand type for abs(): &apos;str&apos;</div></pre></td></tr></table></figure>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>python 中内置函数包括数据类型转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; int(3.21)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; int(&apos;3&apos;)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; int(&apos;3.21&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: invalid literal for int() with base 10: &apos;3.21&apos;</div></pre></td></tr></table></figure></p>
<p>注意的是int()没有做这个转换了字符串成float再转int，直接会报错无效参数。<br>只能这样转了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; int(float(&apos;3.21&apos;))</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p><strong>任何类型都可以转成str</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; str(True)</div><div class="line">&apos;True&apos;</div><div class="line">&gt;&gt;&gt; str(False)</div><div class="line">&apos;False&apos;</div><div class="line">&gt;&gt;&gt; str(321)</div><div class="line">&apos;321&apos;</div><div class="line">&gt;&gt;&gt; str([21,34,2])</div><div class="line">&apos;[21, 34, 2]&apos;</div><div class="line">&gt;&gt;&gt; str(&#123;&quot;a&quot;:21, &quot;b&quot;:(1, 2)&#125;)</div><div class="line">&quot;&#123;&apos;a&apos;: 21, &apos;b&apos;: (1, 2)&#125;&quot;</div></pre></td></tr></table></figure></p>
<p>可以将一个变量赋值为一个函数名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = int</div><div class="line">&gt;&gt;&gt; a(&apos;2&apos;)</div><div class="line">2</div></pre></td></tr></table></figure></p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p>
<p>写一个根据月份返回季节的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据月份返回季节</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_seasion_by_month</span><span class="params">(month)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(month, int):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="number">2</span> &lt;= month &lt;= <span class="number">4</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'spring'</span></div><div class="line">    <span class="keyword">elif</span> <span class="number">5</span> &lt;= month &lt;= <span class="number">7</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'summer'</span></div><div class="line">    <span class="keyword">elif</span> <span class="number">8</span> &lt;= month &lt;= <span class="number">10</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'autumn'</span></div><div class="line">    <span class="keyword">elif</span> <span class="number">11</span> &lt;= month &lt;= <span class="number">12</span> <span class="keyword">or</span> month == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'winter'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'invalid “month” value!'</span></div></pre></td></tr></table></figure></p>
<p>使用python 解释器运行我们自定义的函数的时候，需要引入我们的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from test import get_seasion_by_month</div><div class="line">&gt;&gt;&gt; get_seasion_by_month(10)</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>引入了自定义的方法就可以调用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; get_seasion_by_month(10)</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt; get_seasion_by_month(&apos;10&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;F:\JAVA-program\rywis-fastdfs\rywis-fastdfs\learn\test.py&quot;, line 3, in get_seasion_by_month</div><div class="line">    raise TypeError(&apos;bad operand type&apos;)</div><div class="line">TypeError: bad operand type</div><div class="line">&gt;&gt;&gt; get_seasion_by_month(13)</div><div class="line">&apos;invalid “month” value!&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<ol>
<li>第一步：输入月份<code>10</code> ，返回<code>autumn</code>，符合预期。</li>
<li>第二步：输入字符串<code>“10”</code>，返回我预先设置<code>TypeError</code>错误信息<code>bad operand type</code>，因为我设置了参数类型为 <code>int</code>，不能使用其他的类型，符合期望。</li>
<li>第三步：输入<code>13</code> ，返回无效字符串的提示。</li>
</ol>
<h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><p>写一个返回矩形周长和面积的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取矩形的周长和面积</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rectangle_perimeter_area</span><span class="params">(width, height)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(width, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'"width" is bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(height, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'"height" is bad operand type'</span>)</div><div class="line">    perimeter = <span class="number">2</span> * (width + height)</div><div class="line">    area = width * height</div><div class="line">    <span class="keyword">return</span> perimeter, area</div></pre></td></tr></table></figure></p>
<p>使用解释器 运行它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from test import rectangle_perimeter_area</div><div class="line">&gt;&gt;&gt; rectangle_perimeter_area(4, 6)</div><div class="line">(20, 24)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>可以看出来，它返回的是一个<code>tuple</code> 数组。</p>
<h4 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h4><p>上面写的函数中，写了一个参数类型的检查：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if not isinstance(month, int):</div><div class="line">        raise TypeError(&apos;bad operand type&apos;)</div></pre></td></tr></table></figure></p>
<p>可以控制参数的类型，错误参数类型制定它抛出错误。</p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>python 中函数参数有多种写法。</p>
<h4 id="函数的默认参数值"><a href="#函数的默认参数值" class="headerlink" title="函数的默认参数值"></a>函数的默认参数值</h4><p>写一个打印个人信息的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span> + name)</div><div class="line">    print(<span class="string">'age:'</span> + age)</div></pre></td></tr></table></figure></p>
<p>打印姓名，年龄。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;wuwii&apos;, &apos;23&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div></pre></td></tr></table></figure></p>
<p>现在需要个人信息要加入city 这一项信息，如果直接加入一个参数city 导致之前使用这个函数的方法都需要重新改，因为python 一个函数名只能有一个，不像java那样重载函数，这个时候就需要默认参数了，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, city=<span class="string">'WuHan'</span>)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span> + name)</div><div class="line">    print(<span class="string">'age:'</span> + age)</div><div class="line">    print(<span class="string">'city:'</span> + city)</div></pre></td></tr></table></figure></p>
<p>现在执行这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;wuwii&apos;, &apos;23&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div><div class="line">city:WuHan</div><div class="line">&gt;&gt;&gt; person(&apos;wuwii&apos;, &apos;23&apos;, &apos;HuangGang&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div><div class="line">city:HuangGang</div></pre></td></tr></table></figure></p>
<p>当不输入参数<code>city</code>的时候，函数使用的默认参数，如果传入<code>city</code>参数，将使用输入的参数。</p>
<h5 id="当默认参数是一个可变对象"><a href="#当默认参数是一个可变对象" class="headerlink" title="当默认参数是一个可变对象"></a>当默认参数是一个可变对象</h5><p>默认参数有一个特例，就是，参数默认值是一个可变对象的时候，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>正常调用不会有问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add_end([1, 2, 3])</div><div class="line">[1, 2, 3, &apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end([&apos;x&apos;, &apos;y&apos;, &apos;z&apos;])</div><div class="line">[&apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;END&apos;]</div></pre></td></tr></table></figure></p>
<p>当使用默认参数的时候：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;, &apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;, &apos;END&apos;, &apos;END&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>原因</strong>：Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</p>
<p>所以一般的时候，都使用不可变的对象作为默认参数，可以尽量避免这种问题。</p>
<p>这个问题的解决就是，调用默认的函数的时候，初始化可变的参数就行了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        L = []</div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>现在就不会有问题了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>
<p>所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_one</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> args:</div><div class="line">        print(<span class="string">'值为：'</span> + value)</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person_one(&apos;wuwii&apos;, &apos;23&apos;, &apos;Wuhan&apos;)</div><div class="line">值为：wuwii</div><div class="line">值为：23</div><div class="line">值为：Wuhan</div></pre></td></tr></table></figure></p>
<p>在参数实在很多的时候，这样直接输入参数调用函数很不美观，可以直接将参数放在<code>list</code>或者<code>tuple</code>中，只要在函数调用参数前面加个<code>a</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = [&apos;wuwii&apos;, &apos;23&apos;, &apos;WuHan&apos;]</div><div class="line">&gt;&gt;&gt; person_one(*a)</div><div class="line">值为：wuwii</div><div class="line">值为：23</div><div class="line">值为：WuHan</div></pre></td></tr></table></figure></p>
<p><code>*a</code>表示将<code>list</code> <code>a</code>当作函数<code>person_one</code>的参数。</p>
<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_two</span><span class="params">(**kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span> + kw[<span class="string">'name'</span>])</div><div class="line">    print(<span class="string">'age:'</span> + kw[<span class="string">'age'</span>])</div><div class="line">    print(<span class="string">'city:'</span> + kw[<span class="string">'city'</span>])</div></pre></td></tr></table></figure>
<p>执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person_two(name=&apos;wuwii&apos;, age=&apos;23&apos;, city=&apos;WuHan&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div><div class="line">city:WuHan</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。</p>
<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure></p>
<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>
<p>调用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;Jack&apos;, 24, city=&apos;Beijing&apos;, job=&apos;Engineer&apos;)</div><div class="line">Jack 24 Beijing Engineer</div></pre></td></tr></table></figure></p>
<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div></pre></td></tr></table></figure></p>
<p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;Jack&apos;, 24, &apos;Beijing&apos;, &apos;Engineer&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: person() takes 2 positional arguments but 4 were given</div></pre></td></tr></table></figure></p>
<p>由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但<code>person()</code>函数仅接受2个位置参数。</p>
<p>命名关键字参数可以有缺省值，从而简化调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'Beijing'</span>, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure>
<p>由于命名关键字参数city具有默认值，调用时，可不传入city参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;Jack&apos;, 24, job=&apos;Engineer&apos;)</div><div class="line">Jack 24 Beijing Engineer</div></pre></td></tr></table></figure></p>
<h4 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h4><p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div></pre></td></tr></table></figure>
<p>最神奇的是通过一个tuple和dict，你也可以调用上述函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; args = (1, 2, 3, 4)</div><div class="line">&gt;&gt;&gt; kw = &#123;&apos;d&apos;: 99, &apos;x&apos;: &apos;#&apos;&#125;</div><div class="line">&gt;&gt;&gt; f1(*args, **kw)</div><div class="line">a = 1 b = 2 c = 3 args = (4,) kw = &#123;&apos;d&apos;: 99, &apos;x&apos;: &apos;#&apos;&#125;</div><div class="line">&gt;&gt;&gt; args = (1, 2, 3)</div><div class="line">&gt;&gt;&gt; kw = &#123;&apos;d&apos;: 88, &apos;x&apos;: &apos;#&apos;&#125;</div><div class="line">&gt;&gt;&gt; f2(*args, **kw)</div><div class="line">a = 1 b = 2 c = 3 d = 88 kw = &#123;&apos;x&apos;: &apos;#&apos;&#125;</div></pre></td></tr></table></figure></p>
<p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p>
<h3 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h3><p>有时候，我们写一个函数，暂时不知道怎么处理，但是在python中，什么语法都不写的话，会报错；写一个空函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blank</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>这样代码就可以正常跑起来了。</p>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>写一个一个阶乘函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fact(1)</div><div class="line">1</div><div class="line">&gt;&gt;&gt; fact(5)</div><div class="line">120</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>定义函数时，需要确定函数名和参数个数；</li>
<li>如果有必要，可以先对参数的数据类型做检查；</li>
<li>函数体内部可以用return随时返回函数结果；</li>
<li>行完毕也没有return语句时，自动return None。</li>
<li>以同时返回多个值，但其实就是一个<code>tuple</code>。</li>
<li>要注意定义可变参数和关键字参数的语法：<br>6.1. <code>*args</code>是可变参数，args接收的是一个tuple；<br>6.2. <code>**kw</code>是关键字参数，kw接收的是一个dict。</li>
<li>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</li>
<li>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</li>
<li>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;python-中内置函数&quot;&gt;&lt;a href=&quot;#python-中内置函数&quot; class=&quot;headerlink&quot; title=&quot;python 中内置函数&quot;&gt;&lt;/a&gt;python 中内置函数&lt;/h3&gt;&lt;p&gt;python 中有很多内置函数，参考网站&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;external nofollow&quot; target=&quot;_blank&quot; href=&quot;http://docs.python.org/3/library/functions.html&quot;&gt;http://docs.python.org/3/library/functions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在调用函数的时候，如果参数&lt;code&gt;数量&lt;/code&gt;传入错误，会报错&lt;code&gt;TypeError&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; abs(-2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; abs(-2, 3)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TypeError: abs() takes exactly one argument (2 given)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在调用&lt;code&gt;abs&lt;/code&gt; 函数的时候传入两个参数，会报错&lt;code&gt;TypeError&lt;/code&gt;，直接提示，abs() 只能有一个参数。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python学习之路" scheme="http://blog.wuwii.com/tags/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>最想的人是你，最不想打扰的也是你</title>
    <link href="http://blog.wuwii.com/donot-trouble.html"/>
    <id>http://blog.wuwii.com/donot-trouble.html</id>
    <published>2017-10-29T13:08:03.000Z</published>
    <updated>2017-10-31T02:27:14.677Z</updated>
    
    <content type="html"><![CDATA[<p>今天是周日，本来一直想着的是她还欠我一餐饭，什么时候能给我，虽然我要不是一餐饭，只是想去见见她，但是想到最近打扰她的时候，没怎么想和我聊天了；我这个人就是这么的多想的吧，感觉是太打扰到了你了，我想的也是很可笑的很啊，我是个这么慢热的人，平时根本不愿意多说话的人，哪怕是一句晚安，现在，感觉多说了几年的话。在想以后是不是要少活好多年了。</p>
<p>忍不住下午，还是去她的学校了，但是还是忍住了没去打扰她，我想我这个人很烦人的吧，还是把愉快的周末留给她自己，不要去打扰了，随便在学校逛了逛，就忍不住的逃离了，其实我的内心还是有些害怕的，真是像个做了亏心事的小偷啊，我这个人这个毛病看来今生没希望改过来了，搞不好要单一辈子了。但是我真的感觉做不到，她总是很忙的样子，实在是怕做错了什么，导致朋友也做不成，我这个人就是适合想念吧，不要把我一点想念的空间也给剥夺了，也不想让她知道我在这里，在这里关心她。</p>
<p>感觉我这个是有点作了吧，很认真的想去吸引她，关心她。也有过动摇，但是还是在想她，还是执念让我坚持吧，不是坚持，给她发的消息，人很开心，等着也高兴，就像是做了什么有意义的事情了，但是有时候也很犹豫，怕她要是在忙了，打扰到了别人，该多不好，人总是有点自私的，说不打扰，我就不去打扰啊，时刻多看两个笑话，给她发过去，要是能到到回应就很好了，然而很多时候没有，我想可能是打扰到她了吧，可能她不是那么喜欢看笑话啊，我也不知道她喜欢着什么吧，虽然很费劲，但是不能给她制造不开心得事情，所以时刻都得忍着点吧。</p>
<p>乐此不疲的去做些事情吧，可能我跟她之间还没开始过，就存在了太多的空白格，不太可能填补上，但是总是想试一试，不管是不甘还是执念吧，我只是关心，不放心的是她。</p>
<p>现在我想可能真的打扰到了，一次次打扰只会消耗一个人的热情，最好的就是舍不得打扰了，未来要做的就是要改掉这个坏毛病。</p>
<p>想，却不去打扰；念，却不去纠缠；只为祝福和守候。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是周日，本来一直想着的是她还欠我一餐饭，什么时候能给我，虽然我要不是一餐饭，只是想去见见她，但是想到最近打扰她的时候，没怎么想和我聊天了；我这个人就是这么的多想的吧，感觉是太打扰到了你了，我想的也是很可笑的很啊，我是个这么慢热的人，平时根本不愿意多说话的人，哪怕是一句晚
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>python中集合列表和dict、set</title>
    <link href="http://blog.wuwii.com/python-list.html"/>
    <id>http://blog.wuwii.com/python-list.html</id>
    <published>2017-10-27T14:13:03.000Z</published>
    <updated>2017-10-30T00:31:27.636Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>pyhon 中有两种集合列表，一个是list，一个是tuple。</p>
<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p><strong>展示四季：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions = [&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>得到list长度</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; len(seasions)</div><div class="line">4</div></pre></td></tr></table></figure></p>
<p><strong>索引访问：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[0]</div><div class="line">&apos;spring&apos;</div><div class="line">&gt;&gt;&gt; seasions[1]</div><div class="line">&apos;summer&apos;</div><div class="line">&gt;&gt;&gt; seasions[2]</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt; seasions[3]</div><div class="line">&apos;winter&apos;</div><div class="line">&gt;&gt;&gt; seasions[4]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: list index out of range</div><div class="line">&gt;&gt;&gt; seasions[-1]</div><div class="line">&apos;winter&apos;</div><div class="line">&gt;&gt;&gt; seasions[-2]</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt; seasions[-3]</div><div class="line">&apos;summer&apos;</div><div class="line">&gt;&gt;&gt; seasions[-4]</div><div class="line">&apos;spring&apos;</div><div class="line">&gt;&gt;&gt; seasions[-5]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: list index out of range</div></pre></td></tr></table></figure></p>
<p>可以看出索引是从0开始的，并且支持倒序索引，超出索引范围的话，会抛出错误<code>IndexError: list index out of range</code>。</p>
<p>list 是一个可变的有序列表，可以加入删除元素：</p>
<p><strong>在尾部添加元素<code>append(dom)</code>：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.append(&apos;once again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;once again&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>要删除list末尾的元素，用<code>pop()</code>方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.pop()</div><div class="line">&apos;once again&apos;</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>支持在任意位置插入一个元素</strong>，例：在第二个位置插入 “again” ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.insert(1, &apos;again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions.insert(10, &apos;again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;]</div><div class="line">&gt;&gt;&gt; seasions.insert(-10, &apos;again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;again&apos;, &apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div></pre></td></tr></table></figure></p>
<p>可以看出，超出索引范围会加在末尾位置，如果索引是负数的话，则在列表头插入。</p>
<p><strong>也可以删除指定位置的元素</strong><br>删除索引位置为1 的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.pop(10)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: pop index out of range</div><div class="line">&gt;&gt;&gt; seasions.pop(0)</div><div class="line">&apos;again&apos;</div></pre></td></tr></table></figure></p>
<p><strong>修改列表中指定位置的元素的值</strong><br>将索引为 1 的 ‘again’ 改为 True：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div><div class="line">&gt;&gt;&gt; seasions[1] = &apos;once&apos;</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, True, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>python 中列表中可以同时存任何类型的数据：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;once&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div><div class="line">&gt;&gt;&gt; seasions.insert(1, [&apos;heart&apos;, &apos;warm&apos;])</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, [&apos;heart&apos;, &apos;warm&apos;], &apos;once&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div></pre></td></tr></table></figure></p>
<h5 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h5><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions = (&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">(&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;)</div></pre></td></tr></table></figure>
<p>tuple 是不可变的，定义下来就能修改它的值，但是可以取出它的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[1]</div><div class="line">&apos;summer&apos;</div></pre></td></tr></table></figure></p>
<p><strong>定义一个空的 tuple</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; emptyTuple = ()</div><div class="line">&gt;&gt;&gt; emptyTuple</div><div class="line">()</div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是定义一个只有一个元素的 tuple 列表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; t = (1)</div><div class="line">&gt;&gt;&gt; t</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。</p>
<p>所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; t = (1,)</div><div class="line">&gt;&gt;&gt; t</div><div class="line">(1,)</div></pre></td></tr></table></figure>
<p><strong>当 tuple 列表中有一个 引用类型的时候：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; l = [&apos;wuwii&apos;, &apos;trees&apos;]</div><div class="line">&gt;&gt;&gt; seasions = (&apos;spring&apos;, l)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">(&apos;spring&apos;, [&apos;wuwii&apos;, &apos;trees&apos;])</div><div class="line">&gt;&gt;&gt; l.append(&apos;gentle&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">(&apos;spring&apos;, [&apos;wuwii&apos;, &apos;trees&apos;, &apos;gentle&apos;])</div></pre></td></tr></table></figure>
<p>当list 引用的内容发生改变， tuple 的值看起来确实变了。</p>
<p>但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p>
<h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p>
<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">names = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</div><div class="line">scores = [95, 75, 85]</div></pre></td></tr></table></figure></p>
<p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。</p>
<p>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;Michael&apos;: 95, &apos;Bob&apos;: 75, &apos;Tracy&apos;: 85&#125;</div><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</div><div class="line">95</div></pre></td></tr></table></figure>
<p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。</p>
<p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p>
<p>dict就是第二种实现方式，给定一个名字，比如’Michael’，dict在内部就可以直接计算出Michael对应的存放成绩的“页码”，也就是95这个数字存放的内存地址，直接取出来，所以速度非常快。</p>
<p>你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。</p>
<h5 id="修改value"><a href="#修改value" class="headerlink" title="修改value"></a>修改value</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</div><div class="line">95</div><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;] = 100</div><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</div><div class="line">100</div></pre></td></tr></table></figure>
<h5 id="查找key"><a href="#查找key" class="headerlink" title="查找key"></a>查找key</h5><p>取值的时候，如果 dict 中没有这个 key ，会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d[&apos;notget&apos;]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">KeyError: &apos;notget&apos;</div></pre></td></tr></table></figure></p>
<p>避免key不存在的错误，有两种办法：</p>
<ol>
<li>通过in判断key是否存在：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;notget&apos; in d</div><div class="line">False</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看出它返回的是布尔值。</p>
<ol>
<li>通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d.get(&apos;notget&apos;)</div><div class="line">&gt;&gt;&gt; d.get(&apos;Michael&apos;)</div><div class="line">100</div><div class="line">&gt;&gt;&gt; d.get(&apos;Michael&apos;, 99)</div><div class="line">100</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong>：返回None的时候Python的交互式命令行不显示结果。</p>
<h5 id="删除KEY"><a href="#删除KEY" class="headerlink" title="删除KEY"></a>删除KEY</h5><p>删除 ‘Michael’ ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d.pop(&apos;Michael&apos;)</div><div class="line">100</div><div class="line">&gt;&gt;&gt; d</div><div class="line">&#123;&apos;Bob&apos;: 75, &apos;Tracy&apos;: 85&#125;</div></pre></td></tr></table></figure></p>
<p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p>
<p>dict 的key 值只能存放<strong>不可变的对象</strong> </p>
<p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。</p>
<p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key。</p>
<p><strong>和list比较，dict有以下几个特点</strong>：</p>
<ul>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
<li>需要占用大量的内存，内存浪费多。</li>
</ul>
<p><strong>而list相反</strong>：</p>
<ul>
<li>查找和插入的时间随着元素的增加而增加；</li>
<li>占用空间小，浪费内存很少。</li>
</ul>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = set([1, 1, 2, 3])</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3&#125;</div></pre></td></tr></table></figure>
<p>虽然初始化给了两个<code>1</code>，但是存储到set 中只有一个1，没有重复的值。</p>
<h5 id="add-key-添加元素"><a href="#add-key-添加元素" class="headerlink" title="add(key) 添加元素"></a>add(key) 添加元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(5)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 5&#125;</div><div class="line">&gt;&gt;&gt; s.add(3)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 5&#125;</div></pre></td></tr></table></figure>
<p>可以添加key，重复的key 会被过滤。</p>
<h5 id="remove-key-删除元素"><a href="#remove-key-删除元素" class="headerlink" title="remove(key) 删除元素"></a>remove(key) 删除元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 5&#125;</div><div class="line">&gt;&gt;&gt; s.remove(5)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3&#125;</div></pre></td></tr></table></figure>
<p>删除key，没有的key 会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.remove(4)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">KeyError: 4</div></pre></td></tr></table></figure></p>
<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s1 = set([1, 3, 4])</div><div class="line">&gt;&gt;&gt; s1 &amp; s</div><div class="line">&#123;1, 3&#125;</div><div class="line">&gt;&gt;&gt; s1 | s</div><div class="line">&#123;1, 2, 3, 4&#125;</div></pre></td></tr></table></figure>
<h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><ul>
<li>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</li>
<li>set()接收一个参数，就是list或tuple或者其他可迭代对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L = [x, y, z]</div><div class="line">s = set(L)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是L中的元素x、y、z有任何一个可变set就会报错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;p&gt;pyhon 中有两种集合列表，一个是list，一个是tuple。&lt;/p&gt;
&lt;h5 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; class=&quot;headerlink&quot; title=&quot;list&quot;&gt;&lt;/a&gt;list&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;展示四季：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; seasions = [&amp;apos;spring&amp;apos;, &amp;apos;summer&amp;apos;, &amp;apos;autumn&amp;apos;, &amp;apos;winter&amp;apos;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; seasions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&amp;apos;spring&amp;apos;, &amp;apos;summer&amp;apos;, &amp;apos;autumn&amp;apos;, &amp;apos;winter&amp;apos;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python学习之路" scheme="http://blog.wuwii.com/tags/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows下调试Hadoop集群报错Failed to find winutils.exe</title>
    <link href="http://blog.wuwii.com/hadoop-miss-winutils.html"/>
    <id>http://blog.wuwii.com/hadoop-miss-winutils.html</id>
    <published>2017-10-27T03:48:03.000Z</published>
    <updated>2017-10-27T06:15:51.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在windows 环境使用<code>Java</code>下调试远程虚拟机中的Hadoop集群报错，问题很奇怪，说是少了 <code>winutils.exe</code> 文件，而且少了<code>HADOOP_HOME</code> 的环境变量；我是部署在虚拟机CentOS 7 上的集群，难道Windows 上使用 它的Hadoop还需要自己安装环境，事实上，是真的。。</p>
<a id="more"></a>
<figure class="highlight console"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">10:17:34,377 DEBUG Shell:675 - Failed to find winutils.exe</div><div class="line">java.io.FileNotFoundException: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset. -see https://wiki.apache.org/hadoop/WindowsProblems</div><div class="line">	at org.apache.hadoop.util.Shell.fileNotFoundException(Shell.java:528)</div><div class="line">	at org.apache.hadoop.util.Shell.getHadoopHomeDir(Shell.java:549)</div><div class="line">	at org.apache.hadoop.util.Shell.getQualifiedBin(Shell.java:572)</div><div class="line">	at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:669)</div><div class="line">	at org.apache.hadoop.util.StringUtils.&lt;clinit&gt;(StringUtils.java:79)</div><div class="line">	at org.apache.hadoop.fs.FileSystem$Cache$Key.&lt;init&gt;(FileSystem.java:2972)</div><div class="line">	at org.apache.hadoop.fs.FileSystem$Cache$Key.&lt;init&gt;(FileSystem.java:2967)</div><div class="line">	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2829)</div><div class="line">	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:389)</div><div class="line">	at com.devframe.util.HdfsUtils.mkdir(HdfsUtils.java:43)</div><div class="line">	at com.devframe.util.HdfsUtilsTest.testMkdir(HdfsUtilsTest.java:32)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</div><div class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</div><div class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</div><div class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</div><div class="line">	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)</div><div class="line">	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)</div><div class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</div><div class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)</div><div class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)</div><div class="line">	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</div><div class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</div><div class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</div><div class="line">	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</div><div class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</div><div class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)</div><div class="line">	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</div><div class="line">	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</div><div class="line">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</div><div class="line">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</div><div class="line">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</div><div class="line">Caused by: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset.</div><div class="line">	at org.apache.hadoop.util.Shell.checkHadoopHomeInner(Shell.java:448)</div><div class="line">	at org.apache.hadoop.util.Shell.checkHadoopHome(Shell.java:419)</div><div class="line">	at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:496)</div><div class="line">	... 31 more</div></pre></td></tr></table></figure>
<h3 id="寻找问题"><a href="#寻找问题" class="headerlink" title="寻找问题"></a>寻找问题</h3><p>百度了下，找到了问题：</p>
<blockquote><p><strong>Problems running Hadoop on Windows</strong></p>
<p>Hadoop requires native libraries on Windows to work properly -that includes to access the file:// filesystem, where Hadoop uses some Windows APIs to implement posix-like file access permissions.</p>
<p>This is implemented in HADOOP.DLL and WINUTILS.EXE.</p>
<p>In particular, %HADOOP_HOME%\BIN\WINUTILS.EXE must be locatable.</p>
<p>If it is not, Hadoop or an application built on top of Hadoop will fail.</p>
<p><strong>How to fix a missing WINUTILS.EXE</strong></p>
<p>You can fix this problem in two ways</p>
<ul>
<li>Install a full native windows Hadoop version. The ASF does not currently (September 2015) release such a version; releases are available externally.</li>
<li>Or: get the WINUTILS.EXE binary from a Hadoop redistribution. There is a repository of this for some Hadoop versions  <a href="https://github.com/steveloughran/winutils" target="_blank" rel="external">on github</a>.</li>
</ul>
<p>Then</p>
<ul>
<li>Set the environment variable %HADOOP_HOME% to point to the directory above the BIN dir containing WINUTILS.EXE.</li>
<li>Or: run the Java process with the system property hadoop.home.dir set to the home directory.</li>
</ul>
<footer><strong>Hadoop Wiki ——</strong><cite><a href="https://wiki.apache.org/hadoop/WindowsProblems" target="_blank" rel="external">wiki.apache.org/hadoop/WindowsProblems</a></cite></footer></blockquote>
<p>上面的意思是说Hadoop使用一些Windows api来实现文件访问。</p>
<p>必要 hadoop.DLL和WINUTILS.EXE，这两个文件。</p>
<p>还需要配置 <code>% HADOOP_HOME %</code>的环境变量，来定位 <code>WINUTILS.EXE</code>;</p>
<p>解决办法就是去它给的GitHub上 下载对应版本的 文件，将 adoop.DLL和WINUTILS.EXE 文件拷到本地 （Windows）的<code>Hadoop</code> 文件夹下的<code>bin</code>文件夹中。</p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="在Windows-上配置本地Hadoop-环境"><a href="#在Windows-上配置本地Hadoop-环境" class="headerlink" title="在Windows 上配置本地Hadoop 环境"></a>在Windows 上配置本地Hadoop 环境</h4><h5 id="本地安装Hadoop"><a href="#本地安装Hadoop" class="headerlink" title="本地安装Hadoop"></a>本地安装Hadoop</h5><p> 将对应版本的 Hadoop 压缩包，拷一份到Windows 电脑的D盘中解压，我的是Hadoop2.8.1 版本的，将<code>hadoop-2.8.1.tar.gz</code> 解压完就是这样的：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171027110633.png" alt="image"></p>
<p>然后将自己从上面引用地址 GitHub 中 下载对应版本的文件，将  hadoop.DLL和WINUTILS.EXE 拷贝到 bin 目录中。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171027111104.png" alt="image"></p>
<p>修改 <code>/etc/hadoop/hadoop-env.cmd</code> 文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set JAVA_HOME=%JAVA_HOME%</div></pre></td></tr></table></figure></p>
<p>为（修改成自己机器配置的JDK位置）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_144</div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是我这个配置还有个小问题，并不能成功使用Hadoop 命令。这个将在文章最后面讲出原因。</strong></p>
<p>查看 /etc/hadoop/core-site.xml 中<code>fs.default.name</code>是不是的属性值是不是和服务器中一致。不一致需要改成一致。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="配置Hadoop环境变量"><a href="#配置Hadoop环境变量" class="headerlink" title="配置Hadoop环境变量"></a>配置Hadoop环境变量</h5><p>新增环境变量 <code>HADOOP_HOME</code> ，变量值为 <code>D:\hadoop-2.8.1</code></p>
<p>环境变量<code>Path</code> 中新增 <code>%HADOOP_HOME%\bin</code></p>
<h5 id="配置本地Hosts"><a href="#配置本地Hosts" class="headerlink" title="配置本地Hosts"></a>配置本地Hosts</h5><p>需要在C:\Windows\System32\drivers\etc\hosts 文件配置 ip，例如：使用 HDFS 的时候我们机器的配置文件中的地址是：<code>hdfs://server1:9000</code> ，但是本地电脑没配置Hosts 的话，找不到 server1 的机器。</p>
<p>新增我的三台机器的集群信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.19.185 server1</div><div class="line">192.168.19.184 server2</div><div class="line">192.168.19.199 server3</div></pre></td></tr></table></figure></p>
<p>这样下来，再次本地（Windows）调试虚拟机中Hadoop 集群就不会出现开头的问题了。</p>
<h3 id="最后说下中途说的那个问题"><a href="#最后说下中途说的那个问题" class="headerlink" title="最后说下中途说的那个问题"></a>最后说下中途说的那个问题</h3><p>我在 <code>/etc/hadoop/hadoop-env.cmd</code> 文件中 修改成这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> JAVA_HOME=C:\Program Files\Java\jdk1.8.0_144</div></pre></td></tr></table></figure></p>
<p>但是Windows 下的 <code>CMD</code> 或者<code>PowerShell</code> 并不能成功使用Hadoop 命令，会报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\server&gt; hadoop version</div><div class="line">系统找不到指定的路径。</div><div class="line">Error: JAVA_HOME is incorrectly <span class="built_in">set</span>.</div><div class="line">       Please update D:\hadoop-2.8.1\etc\hadoop\hadoop-env.cmd</div><div class="line"><span class="string">'-Xmx512m'</span> 不是内部或外部命令，也不是可运行的程序</div><div class="line">或批处理文件。</div></pre></td></tr></table></figure></p>
<p>报错，我们设置的<code>JAVA_HOME</code> 位置并不正确。</p>
<p>这个问题很奇怪，因为我的这个JDK 位置用过很多次了，可以肯定没问题。</p>
<p>在网上找到了问题所在，不过还是需要自己改。。</p>
<blockquote>
<p>if your java environment path contains space, such as “C:\Program Files\java\xxxxx” , the word 《Program Files》 contains a space, so CMD can’t identificate<br>this is the right answer</p>
</blockquote>
<p><code>Program Files</code>，就是这个我们安装软件默认的路径，有空格，CMD 不能识别它，导致我的位置失效了。所以设置路径的时候不能有空格。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在windows 环境使用&lt;code&gt;Java&lt;/code&gt;下调试远程虚拟机中的Hadoop集群报错，问题很奇怪，说是少了 &lt;code&gt;winutils.exe&lt;/code&gt; 文件，而且少了&lt;code&gt;HADOOP_HOME&lt;/code&gt; 的环境变量；我是部署在虚拟机CentOS 7 上的集群，难道Windows 上使用 它的Hadoop还需要自己安装环境，事实上，是真的。。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Hadoop" scheme="http://blog.wuwii.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>python中基本数据类型</title>
    <link href="http://blog.wuwii.com/python-basic-type.html"/>
    <id>http://blog.wuwii.com/python-basic-type.html</id>
    <published>2017-10-26T15:38:03.000Z</published>
    <updated>2017-10-27T11:57:43.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型在数据结构中的定义是一个值的集合以及定义在这个值集上的一组操作。</p>
<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：<br><a id="more"></a></p>
<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的。</p>
<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p>
<p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识。</p>
<p>Python还允许用r’’表示’’内部的字符串默认不转义，</p>
<p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (<span class="string">''</span><span class="string">'line1</span></div><div class="line"><span class="string">... line2</span></div><div class="line"><span class="string">... line3</span></div><div class="line"><span class="string">... line4'</span><span class="string">''</span>)</div><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div><div class="line">line4</div></pre></td></tr></table></figure></p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; True</div><div class="line">True</div><div class="line">&gt;&gt;&gt; False</div><div class="line">False</div><div class="line">&gt;&gt;&gt; True and False</div><div class="line">False</div><div class="line">&gt;&gt;&gt; True or False</div><div class="line">True</div><div class="line">&gt;&gt;&gt; 1 &gt; 2 or 3 &gt; 2</div><div class="line">True</div><div class="line">&gt;&gt;&gt; not 1 &gt; 2</div><div class="line">True</div></pre></td></tr></table></figure></p>
<h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。在声明变量时也可指定它的数据类型。所有变量都具有数据类型，以决定能够存储哪种数据。</p>
<p>变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，</p>
<p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，这就是动态语言，没有Java中那样必须指定变量类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = 123 # a是整数</div><div class="line">print(a)</div><div class="line">a = &apos;ABC&apos; # a变为字符串</div><div class="line">print(a)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = 2</div><div class="line">&gt;&gt;&gt; x += 2</div><div class="line">&gt;&gt;&gt; print (x)</div><div class="line">4</div></pre></td></tr></table></figure>
<p>python中字符串变量是指向字符串常量池的引用，变量更改的只是对字符串的引用地址变了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = 2</div><div class="line">&gt;&gt;&gt; x += 2</div><div class="line">&gt;&gt;&gt; print (x)</div><div class="line">4</div></pre></td></tr></table></figure>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>在Python中，通常用全部大写的变量名表示常量</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>python 中两种除法</p>
<ol>
<li><p><code>/</code>  除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 8 / 3</div><div class="line">2.6666666666666665</div><div class="line">&gt;&gt;&gt; 9 / 3</div><div class="line">3.0</div></pre></td></tr></table></figure>
</li>
<li><p>还有一种除法是<code>//</code>，称为地板除，整数不管是否整除除法都是整数，浮点数除法是浮点数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 9 / 3</div><div class="line">3.0</div><div class="line">&gt;&gt;&gt; 8 // 3</div><div class="line">2</div><div class="line">&gt;&gt;&gt; 9 // 3</div><div class="line">3</div><div class="line">&gt;&gt;&gt; 9.2123 // 3</div><div class="line">3.0</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Python的整数没有大小限制，</p>
<p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;p&gt;数据类型在数据结构中的定义是一个值的集合以及定义在这个值集上的一组操作。&lt;/p&gt;
&lt;p&gt;计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python学习之路" scheme="http://blog.wuwii.com/tags/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>初识python</title>
    <link href="http://blog.wuwii.com/python-first.html"/>
    <id>http://blog.wuwii.com/python-first.html</id>
    <published>2017-10-26T15:08:03.000Z</published>
    <updated>2017-10-27T01:01:04.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Write-In-the-Front"><a href="#Write-In-the-Front" class="headerlink" title="Write In the Front"></a>Write In the Front</h3><p>本来很早打算就要学习python的，这几个月发生了一些事，导致耽误下来，现在开始重新拾起这个梦想吧。</p>
<p>学习<code>python3</code> 都是从<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰博客网站</a>上学习的，自己新建一栏<code>python学习之路</code>，写下学习笔记，记录学习过程。</p>
<a id="more"></a>
<hr>
<h3 id="Study"><a href="#Study" class="headerlink" title="Study"></a>Study</h3><p>我安装的<code>pyhon</code> 版本是<code>3.7</code><br>去官网下载最新版的3.X版本，需要<strong>注意</strong>的是：安装的时候记得勾选下方的<code>Add Python 3.7 to PATH</code>，将python的环境变量配置到系统中，就可以直接使用python 命令进入 python 交互模式，然后<code>Install Now</code>；当然手快没勾选的百度自己配置，也是没问题的。<br>在 <code>Windows PowerShell</code> 下进入 python 交互模式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\server&gt; python</div><div class="line">Python 3.7.0a2 (v3.7.0a2:f7ac4fe, Oct 17 2017, 17:06:29) [MSC v.1900 64 bit</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div></pre></td></tr></table></figure></p>
<p>运行打印 hello world<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (<span class="string">'hello world'</span>)</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p>使用编辑器编辑python ，不能使用记事本。</p>
<p>我目前使用的是 Notepad++ ；</p>
<p>新建一个页面，写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print (&apos;hello world&apos;)</div></pre></td></tr></table></figure></p>
<p>保存文件名为 <code>helloWorld.py</code> 一定要以py 结尾，以python 文件保存起来。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171026171501.png" alt="image"></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171026172010.png" alt="image"></p>
<p>保存完毕后，可以运行这个脚本文件了，命令进入文件所在位置，我是放在桌面的，执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\server\Desktop&gt; python helloWorld.py</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p>输出成功。</p>
<h3 id="Summary："><a href="#Summary：" class="headerlink" title="Summary："></a>Summary：</h3><ul>
<li>用文本编辑器写Python程序，然后保存为后缀为.py的文件，在Windows下就可以使用命令Python直接运行这个程序。</li>
<li>直接输入python进入交互模式，相当于启动了Python解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。<br>直接运行.py文件相当于启动了Python解释器，然后一次性把.py文件的源代码给执行了，你是没有机会输入源代码的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Write-In-the-Front&quot;&gt;&lt;a href=&quot;#Write-In-the-Front&quot; class=&quot;headerlink&quot; title=&quot;Write In the Front&quot;&gt;&lt;/a&gt;Write In the Front&lt;/h3&gt;&lt;p&gt;本来很早打算就要学习python的，这几个月发生了一些事，导致耽误下来，现在开始重新拾起这个梦想吧。&lt;/p&gt;
&lt;p&gt;学习&lt;code&gt;python3&lt;/code&gt; 都是从&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰博客网站&lt;/a&gt;上学习的，自己新建一栏&lt;code&gt;python学习之路&lt;/code&gt;，写下学习笔记，记录学习过程。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python学习之路" scheme="http://blog.wuwii.com/tags/python%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java8 新特性Stream 的学习和使用方法</title>
    <link href="http://blog.wuwii.com/java-stream.html"/>
    <id>http://blog.wuwii.com/java-stream.html</id>
    <published>2017-10-25T14:18:03.000Z</published>
    <updated>2017-10-31T02:27:14.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流（Stream）"><a href="#流（Stream）" class="headerlink" title="流（Stream）"></a>流（Stream）</h3><p>流是java 8 中新引入的特性，用来处理集合中的数据，Stream 是一个来自数据源的元素队列并支持聚合操作。</p>
<ul>
<li>Java 中 Stream 不会存储元素。</li>
<li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li>
<li>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li>
</ul>
<a id="more"></a>
<p> Stream操作还有几个特征：</p>
<ul>
<li><strong>只遍历一次</strong>。我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。</li>
<li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li>
<li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li>
</ul>
<h3 id="流的使用"><a href="#流的使用" class="headerlink" title="流的使用"></a>流的使用</h3><p>流的使用过程有三步：</p>
<ul>
<li>获取流；</li>
<li>中间操作，得到一个新的流；</li>
<li>最终操作，获取结果。</li>
</ul>
<h4 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h4><p>流有两种：</p>
<ul>
<li>stream() ： 创建串行流。</li>
<li>parallelStream()  ： 创建并行流。</li>
</ul>
<p>并行流的特点就是将一个大任务切分成多个小任务，无序一起执行，当然如果我们需要顺序输出的话可以使用<code>forEachOrdered</code>，速度会比串行流快一些。它通过默认的ForkJoinPool,可能提高你的多线程任务的速度。</p>
<h5 id="从集合获取流"><a href="#从集合获取流" class="headerlink" title="从集合获取流"></a>从集合获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">Stream&lt;FarmEntity&gt; stream = list.stream();</div></pre></td></tr></table></figure>
<h5 id="从数组获取流"><a href="#从数组获取流" class="headerlink" title="从数组获取流"></a>从数组获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] arrays = &#123;<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>&#125;;</div><div class="line">Stream&lt;String&gt; stream = Arrays.stream(arrays);</div></pre></td></tr></table></figure>
<h5 id="从值获取流"><a href="#从值获取流" class="headerlink" title="从值获取流"></a>从值获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>);</div></pre></td></tr></table></figure>
<h5 id="从文件获取流"><a href="#从文件获取流" class="headerlink" title="从文件获取流"></a>从文件获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Stream&lt;String&gt; file =Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</div><div class="line">    file.forEach(System.out::println);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用NIO获取流，可以打印出文本文件的内容。</p>
<h4 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h4><h5 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h5><p>filter函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</div><div class="line">Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<h5 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).distinct().forEach(System.out::print);</div></pre></td></tr></table></figure>
<h5 id="limit-截取"><a href="#limit-截取" class="headerlink" title="limit 截取"></a>limit 截取</h5><p>截取前面两个单位：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<h5 id="skip-跳过"><a href="#skip-跳过" class="headerlink" title="skip 跳过"></a>skip 跳过</h5><p>和上面的limit 相反，跳过前面两个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h5 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h5><p>map 方法用于映射每个元素到对应的结果。<br>给每个词语后面加个 “兮”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">珊瑚兮</div><div class="line">阳光兮</div><div class="line">细腻兮</div><div class="line">冷暖兮</div><div class="line">阳光兮</div></pre></td></tr></table></figure></p>
<h5 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted 排序"></a>sorted 排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></div><div class="line">Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">冷暖</div><div class="line">珊瑚</div><div class="line">细腻</div><div class="line">阳光</div><div class="line">阳光</div></pre></td></tr></table></figure></p>
<p>java8 以前排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before Java 8 sorted</span></div><div class="line">       System.out.println(<span class="string">"java8以前排序："</span>);</div><div class="line">       List&lt;String&gt; list1 = Arrays.asList(strings);</div><div class="line">       list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> o1.compareTo(o2);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java8以前排序：</div><div class="line">java8 以前的排序：[冷暖, 珊瑚, 细腻, 阳光, 阳光]</div></pre></td></tr></table></figure></p>
<h5 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//统计</span></div><div class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest number in List : 4</div><div class="line">Lowest  number in List : 1</div><div class="line">Sum of all numbers : 11</div><div class="line">Average of all numbers : 2.2</div></pre></td></tr></table></figure></p>
<h5 id="match-匹配"><a href="#match-匹配" class="headerlink" title="match 匹配"></a>match 匹配</h5><ul>
<li><code>anyMatch</code>用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为<code>boolean</code>类型。 </li>
<li><code>noneMatch</code>与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件</li>
<li><code>findAny</code>能够从流中随便选一个元素出来，它返回一个Optional类型的元素。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">       System.out.println(result1);</div><div class="line"></div><div class="line">       Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">       System.out.println(reslut2);</div><div class="line">       <span class="comment">//随机读取一个</span></div><div class="line">       Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</div><div class="line">       System.out.println(getResult);</div><div class="line">       System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">false</div><div class="line">true</div><div class="line">Optional[冷暖]</div><div class="line">获取Optional中的值：冷暖</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Optional是Java8新加入的一个容器，这个容器只存1个或0个元素，它用于防止出现NullpointException，它提供如下方法：</p>
<ul>
<li><code>isPresent()</code> 判断容器中是否有值。</li>
<li><code>ifPresent(Consume lambda)</code> 容器若不为空则执行括号中的Lambda表达式。</li>
<li><code>T get()</code>  获取容器中的元素，若容器为空则抛出NoSuchElement异常。</li>
<li><code>T orElse(T other)</code>  获取容器中的元素，若容器为空则返回括号中的默认值。</li>
</ul>
</blockquote>
<h5 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce 归约"></a>reduce 归约</h5><p>求和：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归约</span></div><div class="line">        <span class="comment">//第一种方法求和</span></div><div class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</div><div class="line">        System.out.println(connectStrings);</div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法求和</span></div><div class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</div><div class="line">        System.out.println(connectStrings1);</div></pre></td></tr></table></figure></p>
<p>getConnectStrings方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Connect Strings</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> s1 参数1</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> s2 参数2</span></div><div class="line"><span class="comment">* <span class="doctag">@return</span> java.lang.String</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> s1 + s2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>reduce</code>中第一个参数是初始值，第二个参数是方法引用。</p>
<h5 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h5><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。 </p>
<p>每种数值流都提供了数值计算函数，如max、min、sum等。</p>
<p>下面使用 mapToInt 为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line"><span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></div><div class="line">IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</div><div class="line"><span class="comment">//使用对应的 Optional 接收</span></div><div class="line">OptionalInt optionalNumber = intStream.max();</div><div class="line"><span class="comment">// 取值，给默认值 0，为空结果为0</span></div><div class="line">System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numberStrings&apos;s max number is: 3</div></pre></td></tr></table></figure></p>
<p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 所以可以直接使用 <code>OptionalInt.getAsInt()</code>获取容器的值。<br>为空的话捕捉异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.util.NoSuchElementException: No value present</div><div class="line">	at java.util.OptionalInt.getAsInt(OptionalInt.java:118)</div><div class="line">	at com.wuwii.test.TestStream.main(TestStream.java:105)</div></pre></td></tr></table></figure></p>
<p>此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong。</p>
<h5 id="Collectors-集合归约"><a href="#Collectors-集合归约" class="headerlink" title="Collectors 集合归约"></a>Collectors 集合归约</h5><p>将流转换成集合和聚合元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Collectors 集合归约</span></div><div class="line">       <span class="comment">//  toList</span></div><div class="line">       List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</div><div class="line">       <span class="comment">// Get String by connected</span></div><div class="line">       String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">       System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collectors toList: [冷暖, 珊瑚, 细腻, 阳光, 阳光] , Conlletors Join Strings: 冷暖,珊瑚,细腻,阳光,阳光</div></pre></td></tr></table></figure></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"><span class="keyword">import</span> java.util.stream.IntStream;</div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Learn Java 8 Stream</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/25 22:16&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// Get Stream from file</span></div><div class="line">        System.out.println(<span class="string">"读取文件："</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Stream&lt;String&gt; file = Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</div><div class="line">            file.forEach(System.out::println);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Filter</span></div><div class="line">        String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</div><div class="line">        Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Distinct</span></div><div class="line">        System.out.println(<span class="string">"去重:"</span>);</div><div class="line">        Arrays.stream(strings).distinct().forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Limit</span></div><div class="line">        System.out.println(<span class="string">"截取:"</span>);</div><div class="line">        Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Skip</span></div><div class="line">        System.out.println(<span class="string">"跳过:"</span>);</div><div class="line">        Arrays.stream(strings).skip(<span class="number">2</span>).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Java 8 sorted</span></div><div class="line">        System.out.println(<span class="string">"排序："</span>);</div><div class="line">        <span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></div><div class="line">		Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">// Before Java 8 sorted</span></div><div class="line">        System.out.println(<span class="string">"java8以前排序："</span>);</div><div class="line">        List&lt;String&gt; list1 = Arrays.asList(strings);</div><div class="line">        list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o1.compareTo(o2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</div><div class="line"></div><div class="line">        <span class="comment">//Handle map</span></div><div class="line">        System.out.println(<span class="string">"map 映射："</span>);</div><div class="line">        Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">//Match</span></div><div class="line">        Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">        System.out.println(result1);</div><div class="line"></div><div class="line">        Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">        System.out.println(reslut2);</div><div class="line">        <span class="comment">//findAny to find anyone</span></div><div class="line">        Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</div><div class="line">        System.out.println(getResult);</div><div class="line">        System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</div><div class="line"></div><div class="line">        <span class="comment">//统计</span></div><div class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div><div class="line"></div><div class="line">        <span class="comment">//归约</span></div><div class="line">        <span class="comment">//第一种方法求和</span></div><div class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</div><div class="line">        System.out.println(connectStrings);</div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法求和</span></div><div class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</div><div class="line">        System.out.println(connectStrings1);</div><div class="line"></div><div class="line">        <span class="comment">//Collectors 集合归约</span></div><div class="line">        <span class="comment">//  toList</span></div><div class="line">        List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</div><div class="line">        <span class="comment">// Get String by connected</span></div><div class="line">        String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">        System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</div><div class="line"></div><div class="line">        String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line">        <span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></div><div class="line">        IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</div><div class="line">        <span class="comment">//使用对应的 Optional 接收</span></div><div class="line">        OptionalInt optionalNumber = intStream.max();</div><div class="line">        <span class="comment">// 取值，给默认值 0，为空结果为0</span></div><div class="line">        System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 拼接字符串</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s1 参数1</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s2 参数2</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s1 + s2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;流（Stream）&quot;&gt;&lt;a href=&quot;#流（Stream）&quot; class=&quot;headerlink&quot; title=&quot;流（Stream）&quot;&gt;&lt;/a&gt;流（Stream）&lt;/h3&gt;&lt;p&gt;流是java 8 中新引入的特性，用来处理集合中的数据，Stream 是一个来自数据源的元素队列并支持聚合操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 中 Stream 不会存储元素。&lt;/li&gt;
&lt;li&gt;数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。&lt;/li&gt;
&lt;li&gt;聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>珍惜</title>
    <link href="http://blog.wuwii.com/cherish-her.html"/>
    <id>http://blog.wuwii.com/cherish-her.html</id>
    <published>2017-10-24T14:08:03.000Z</published>
    <updated>2017-10-25T03:05:42.771Z</updated>
    
    <content type="html"><![CDATA[<p>话说开会的时候，总是有人心不在焉的，没错，那个人就是我，开会随手刷刷手机，看到这个文章的不要学我哈。<br>无意中看到一个句子。<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1508832180808&amp;di=277bb0ccfa259488634243e76d0ca4bd&amp;imgtype=0&amp;src=http%3A%2F%2Fuploadfile.bizhizu.cn%2F2014%2F0529%2F20140529021838977.jpg" alt="img"><br><a id="more"></a></p>
<p>其实人生的路很漫长<br>在这条人生的路上<br>你会遇到很多的人<br>很多的风景<br>当你错过以后<br>你以为人生就已经结束了<br>实际上<br>没有<br>因为它还在继续<br>你还会遇到更多的人<br>更多的风景<br>也许下一个人才是真正适合你的人</p>
<p>可是你又没跟那个人在一起过<br>你怎么知道她不是最适合你的人呢<br>你错过了她<br>你以为你会碰到更好的人<br>可是事实证明呢<br>你到现在还是单着<br>这说明了什么<br>说明了你在潜意识里<br>你觉得她是最值得珍惜的<br>是最值得你去爱的<br>最值得你去关怀的<br>你所错过的<br>才是真正美丽的风景</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--宁财神 《龙门镖局》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说开会的时候，总是有人心不在焉的，没错，那个人就是我，开会随手刷刷手机，看到这个文章的不要学我哈。&lt;br&gt;无意中看到一个句子。&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1508832180808&amp;amp;di=277bb0ccfa259488634243e76d0ca4bd&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fuploadfile.bizhizu.cn%2F2014%2F0529%2F20140529021838977.jpg&quot; alt=&quot;img&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="那些很美的句子" scheme="http://blog.wuwii.com/categories/%E9%82%A3%E4%BA%9B%E5%BE%88%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
    
    
      <category term="桔子" scheme="http://blog.wuwii.com/tags/%E6%A1%94%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>Programmer&#39;s Day</title>
    <link href="http://blog.wuwii.com/programmer-day.html"/>
    <id>http://blog.wuwii.com/programmer-day.html</id>
    <published>2017-10-23T13:18:03.000Z</published>
    <updated>2017-10-24T05:42:32.512Z</updated>
    
    <content type="html"><![CDATA[<p>今天议论关注最多的就是1024，程序猿节日，可怕，什么时候程序猿都有节日了。。。</p>
<p>当然公司明天还有活动，很高兴有这么个节日，作为一个单身狗，最讨厌的估计就是加班，尼玛，单身狗还害怕什么加班，太没志气了，怎么能跟那些秀恩爱的去比高低，逃。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoOT</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(</div><div class="line">                <span class="string">"1024不加班的理由："</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"太冷，我选择睡觉！！！   "</span>,</div><div class="line">                <span class="string">"                    ☽   "</span>,</div><div class="line">                <span class="string">"   //   /￣'- 、_      "</span>,</div><div class="line">                <span class="string">"  // ℂ/ &lt;_/ _____/    "</span>,</div><div class="line">                <span class="string">"  ￣￣￣￣￣￣￣     "</span></div><div class="line">        );</div><div class="line">        list.stream().forEach(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个是今年自己写在 华为云 论坛上的一个回帖，当然是为了福利的，其实我是为了混个华为P10，实在不行，给个鼠标垫算了，原谅了。</p>
<p>另外附几张论坛好玩的几个图（侵删）</p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1822231n1o90ucduykj2nw.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1537080ctfww4nlkmentap.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/142101oq4bb8bljw4dumuv.jpg" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1104512bbyq3whcaxxal26.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/102951fa586egackcjw4xl.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/22/200553auslkcexi5ohlhua.png" alt="image"></p>
<p>就发这么多了，，该洗洗睡了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天议论关注最多的就是1024，程序猿节日，可怕，什么时候程序猿都有节日了。。。&lt;/p&gt;
&lt;p&gt;当然公司明天还有活动，很高兴有这么个节日，作为一个单身狗，最讨厌的估计就是加班，尼玛，单身狗还害怕什么加班，太没志气了，怎么能跟那些秀恩爱的去比高低，逃。&lt;/p&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>java 中lambda表达式的使用</title>
    <link href="http://blog.wuwii.com/java-lambda.html"/>
    <id>http://blog.wuwii.com/java-lambda.html</id>
    <published>2017-10-20T09:18:03.000Z</published>
    <updated>2017-10-20T09:34:47.810Z</updated>
    
    <content type="html"><![CDATA[<p>java 中<code>lambda</code>表达式 实在 java 8 版本后新加入的特性，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>
<p><strong>特征:</strong></p>
<ul>
<li><strong>可选类型声明</strong>：不需要声明参数类型，编译器可以统一识别参数值。</li>
<li><strong>可选的参数圆括号</strong>：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
<li><strong>可选的大括号</strong>：如果主体包含了一个语句，就不需要使用大括号。</li>
<li><strong>可选的返回关键字</strong>：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。<a id="more"></a>
总结语法就是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(params) -&gt; expression</div><div class="line">(params) -&gt; statement</div><div class="line">(params) -&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<h4 id="使用lambda表达式替换匿名类"><a href="#使用lambda表达式替换匿名类" class="headerlink" title="使用lambda表达式替换匿名类"></a>使用lambda表达式替换匿名类</h4><p>以 Runnable 为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before java8</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></div><div class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></div><div class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></div><div class="line"><span class="comment">     * thread.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></div><div class="line"><span class="comment">     * take any action whatsoever.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> Thread#run()</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before jdk 1.8;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line"><span class="comment">// after jdk 1.8</span></div><div class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"after jdk 1.8;"</span>)).start();</div></pre></td></tr></table></figure></p>
<p>执行结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">before jdk 1.8;</div><div class="line">after jdk 1.8;</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式-迭代"><a href="#使用lambda表达式-迭代" class="headerlink" title="使用lambda表达式 迭代"></a>使用lambda表达式 迭代</h4><p>以 forEach 为例，迭代所有对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">        <span class="comment">//before java8</span></div><div class="line">        <span class="keyword">for</span> (String s : list1) &#123;</div><div class="line">            System.out.println(<span class="string">"before: "</span> + s);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//after</span></div><div class="line">        list1.forEach(n -&gt; System.out.println(<span class="string">"after: "</span> + n));</div><div class="line">        <span class="comment">//list1.forEach(System.out::println); //可以打印，方法引用由::双冒号操作符标示，</span></div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">before: spring</div><div class="line">before: summer</div><div class="line">before: autumn</div><div class="line">before: winter</div><div class="line">after: spring</div><div class="line">after: summer</div><div class="line">after: autumn</div><div class="line">after: winter</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式和函数式接口Predicate"><a href="#使用lambda表达式和函数式接口Predicate" class="headerlink" title="使用lambda表达式和函数式接口Predicate"></a>使用lambda表达式和函数式接口Predicate</h4><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用 java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。下面是Java 8 Predicate 的例子，展示了过滤集合数据的多种常用方法。Predicate接口非常适用于做过滤。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">        System.out.println(<span class="string">"Print which end with n: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).endsWith(<span class="string">"n"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print which start with s: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).startsWith(<span class="string">"s"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print whose length greater than 6: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).length() &gt; <span class="number">6</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print all:"</span>);</div><div class="line">        filter(list1, str -&gt; <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print none:"</span>);</div><div class="line">        filter(list1, str -&gt; <span class="keyword">false</span>);</div><div class="line">        </div><div class="line">        </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span> <span class="params">(List list, Predicate condition)</span> </span>&#123;</div><div class="line">        list.stream().</div><div class="line">                filter(s -&gt; condition.test(s)).</div><div class="line">                forEach(s -&gt; System.out.println(s));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Print which end with n: </div><div class="line">autumn</div><div class="line">Print which start with s: </div><div class="line">spring</div><div class="line">summer</div><div class="line">Print whose length greater than 6: </div><div class="line">Print all:</div><div class="line">spring</div><div class="line">summer</div><div class="line">autumn</div><div class="line">winter</div><div class="line">Print none:</div></pre></td></tr></table></figure></p>
<p>例外 filter 还提供逻辑操作符AND和OR的方法，名字叫做and()、or()和xor()，用于将传入 filter() 方法的条件合并起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">Predicate&lt;String&gt; startWithS = s -&gt; s.startsWith(<span class="string">"s"</span>);</div><div class="line">        Predicate&lt;String&gt; endWithG = g -&gt; g.endsWith(<span class="string">"g"</span>);</div><div class="line">        list1.stream()</div><div class="line">                .filter(startWithS.and(endWithG))</div><div class="line">                .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式的Map和Reduce"><a href="#使用lambda表达式的Map和Reduce" class="headerlink" title="使用lambda表达式的Map和Reduce"></a>使用lambda表达式的Map和Reduce</h4><p>给list 中 每个数据 增加 50%<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</div><div class="line">       <span class="keyword">for</span> (Integer num : list2) &#123;</div><div class="line">           Double result = num + num * <span class="number">0.5</span>;</div><div class="line">           System.out.println(result);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       list2.stream()</div><div class="line">               .map(num -&gt; num + num * <span class="number">0.5</span>)</div><div class="line">               .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">150.0</div><div class="line">300.0</div><div class="line">450.0</div><div class="line">600.0</div><div class="line">150.0</div><div class="line">300.0</div><div class="line">450.0</div><div class="line">600.0</div></pre></td></tr></table></figure></p>
<p>计算一个list 每个值加上 50%后的和<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</div><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Integer num : list2) &#123;</div><div class="line">            Double result = num + num * <span class="number">0.5</span>;</div><div class="line">            total += result;</div><div class="line">            System.out.println(total);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        total = list2.stream()</div><div class="line">                .map(num -&gt; num + num * <span class="number">0.5</span>)</div><div class="line">                .reduce((sum, result) -&gt; sum + result).get();</div><div class="line">        System.out.println(total);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1500.0</div><div class="line">1500.0</div></pre></td></tr></table></figure></p>
<p>map将集合类（例如列表）元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。</p>
<h4 id="通过过滤创建一个String列表"><a href="#通过过滤创建一个String列表" class="headerlink" title="通过过滤创建一个String列表"></a>通过过滤创建一个String列表</h4><p> 通过过滤创建一个新的字符串列表，每个字符串长度大于2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="comment">// 创建一个字符串列表，每个字符串长度大于2</span></div><div class="line">        List&lt;String&gt; filtered = list3.stream().filter(x -&gt; x.length()&gt; <span class="number">2</span>).collect(Collectors.toList());</div><div class="line">        System.out.printf(<span class="string">"Original List : %s, filtered list : %s %n"</span>, list3, filtered);</div></pre></td></tr></table></figure></p>
<h4 id="对列表的每个元素应用函数"><a href="#对列表的每个元素应用函数" class="headerlink" title="对列表的每个元素应用函数"></a>对列表的每个元素应用函数</h4><p>对list3 的每个元素转换成大写，并用逗号连接起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</div><div class="line">String string = list3.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">        System.out.printf(<span class="string">"Original List : %s, After String : %s %n"</span>, list3, string);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [abc, def, hi, hello], After String : ABC,DEF,HI,HELLO</div></pre></td></tr></table></figure></p>
<h4 id="复制不同的值，创建一个子列表"><a href="#复制不同的值，创建一个子列表" class="headerlink" title="复制不同的值，创建一个子列表"></a>复制不同的值，创建一个子列表</h4><p>如何利用流的 distinct() 方法来对集合进行去重。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        List&lt;Integer&gt; distinctList = list4.stream().map( i -&gt; i * i).distinct().collect(Collectors.toList());</div><div class="line">        System.out.printf(<span class="string">"Original List : %s,  Square Reslut : %s %n"</span>, list4, distinctList);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [1, 2, 3, 4, 1],  Square Reslut : [1, 4, 9, 16]</div></pre></td></tr></table></figure></p>
<h4 id="计算集合元素的最大值、最小值、总和以及平均值"><a href="#计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="计算集合元素的最大值、最小值、总和以及平均值"></a>计算集合元素的最大值、最小值、总和以及平均值</h4><p>IntStream、LongStream 和 DoubleStream 等流的类中，有个非常有用的方法叫做 summaryStatistics() 。可以返回 IntSummaryStatistics、LongSummaryStatistics 或者 DoubleSummaryStatistic s，描述流中元素的各种摘要数据。</p>
<p>我们用这个方法来计算列表的最大值和最小值。它也有 getSum() 和 getAverage() 方法来获得列表的所有元素的总和及平均值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest number in List : 4</div><div class="line">Lowest  number in List : 1</div><div class="line">Sum of all numbers : 11</div><div class="line">Average of all numbers : 2.2</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>lambda 表达式只能引用 <code>final</code> 或 final 局部变量，这就是说不能在 lambda 内部<code>修改</code>定义在域外的变量，否则会编译错误。</li>
<li>Lambda表达式在Java中又称为闭包或匿名函数，</li>
<li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li>
<li>如果在 lambda 表达式 内部不能调用参数方法的引用，需要声明参数类型。</li>
</ol>
<p><strong>参考博客：</strong> <a rel="external nofollow" target="_blank" href="http://www.importnew.com/16436.html">http://www.importnew.com/16436.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java 中&lt;code&gt;lambda&lt;/code&gt;表达式 实在 java 8 版本后新加入的特性，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特征:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可选类型声明&lt;/strong&gt;：不需要声明参数类型，编译器可以统一识别参数值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选的参数圆括号&lt;/strong&gt;：一个参数无需定义圆括号，但多个参数需要定义圆括号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选的大括号&lt;/strong&gt;：如果主体包含了一个语句，就不需要使用大括号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选的返回关键字&lt;/strong&gt;：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="lambda" scheme="http://blog.wuwii.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>Intellij Idea 的maven 项目设置 默认java编译版本</title>
    <link href="http://blog.wuwii.com/compiler-version.html"/>
    <id>http://blog.wuwii.com/compiler-version.html</id>
    <published>2017-10-20T03:28:03.000Z</published>
    <updated>2017-10-20T09:23:14.938Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Intellij Idea 创建maven 项目后，每次 reimport 都会回归默认 java 版本 1.5 ，每次都要重新设置版本，很麻烦。下面的方法同样适用Eclipse。<br><a id="more"></a></p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>修改该项目的pom.xml , 只对该项目有效。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">maven.compiler.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.compiler.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>保存，eclipse 是Update maven 项目， Intellij  reimport。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>修改 maven 的 配置文件 <code>settings.xml</code>，在<code>profiles</code>节点中加入自己的Jdk版本：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>这个方法对于所有使用这个maven 插件的项目都有效。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Intellij Idea 创建maven 项目后，每次 reimport 都会回归默认 java 版本 1.5 ，每次都要重新设置版本，很麻烦。下面的方法同样适用Eclipse。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://blog.wuwii.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>别太懂事了</title>
    <link href="http://blog.wuwii.com/sensible.html"/>
    <id>http://blog.wuwii.com/sensible.html</id>
    <published>2017-10-19T14:25:03.000Z</published>
    <updated>2017-10-20T00:48:26.059Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，又想起了她，自从上次见过她了，心里总是那么时刻的泛起她的影子吧，虽然说好久没见再相见，但是彼此应该没什么深刻的记忆吧，而且排斥的我很厉害，这让我心疼得厉害，到底是什么成为这样的她，不想懂了。</p>
<p>或许吧，是以前一个人久了，什么事都得自己撑着吧，什么事情都得面对，她也是一个很拼的女孩子，什么事情都得抢在前头吧，最后了，有了委屈自己忍，有了眼泪只好自己吞。总是在乎别人的感受，然而不知道自己会有多疼的人，就是这样太懂事的人吧。明明她也很脆弱，无关外表，还是心里，却总要装作坚强的样子，明明她也有时候表现的无所适从的害怕，却还要表现得无所畏惧的淡然。可是，在别人面前，她一直装作那么懂事，别人都不相信她会难过，会流泪了吧。但是，她不这么认为的，相信自己能够修复所有的伤疤，可以完成所有的事情。</p>
<p>但是，太懂事的人，常常会不太幸福吧，常常顾及别人得感受，不懂得去拒绝别人，更不忍心看别人难过，宁可自己委屈，宁可自己疲惫，也不想给任何人带来麻烦，这样真的会活得很累很累，考虑得太多，却总是忽略了自己。这也是我为什么总是说好担心你呀。</p>
<p>别太懂事了，不要太善良了，给别人一次心疼自己的机会，卸下面具，天 塌下来了也不用自己去抗；别再逞强了，你也值得被人疼人。别把所有的事情都揽到自己身上，你只是你自己，不需要活成别人，也可以不管不顾一切，活成自己的模样。</p>
<p>加油，姑娘。真希望你能好好的生活下去，忘了一切烦恼。</p>
<p>晚安。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉，又想起了她，自从上次见过她了，心里总是那么时刻的泛起她的影子吧，虽然说好久没见再相见，但是彼此应该没什么深刻的记忆吧，而且排斥的我很厉害，这让我心疼得厉害，到底是什么成为这样的她，不想懂了。&lt;/p&gt;
&lt;p&gt;或许吧，是以前一个人久了，什么事都得自己撑着吧，什么事情都
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 上安装Hadoop V 2.8.1集群及配置</title>
    <link href="http://blog.wuwii.com/linux-hadoop.html"/>
    <id>http://blog.wuwii.com/linux-hadoop.html</id>
    <published>2017-10-19T08:08:03.000Z</published>
    <updated>2017-10-25T08:52:30.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。<br> Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。<br>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。(百科)</p>
</blockquote>
<p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98010877b33533faf5b6942890e89a22/3c6d55fbb2fb4316ecfbfb0322a4462308f7d3e7.jpg" alt="image"></p>
<a id="more"></a>
<h2 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h2><p>本次使用的是2.8.1版本的Hadoop，官网地址<br><a rel="external nofollow" target="_blank" href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz">http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz</a></p>
<p>点击（不用进官网直接点这个链接就能下载）</p>
<p><a rel="external nofollow" target="_blank" href=" http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz "> http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz </a></p>
<h2 id="安装3个虚拟机并实现ssh免密码登录"><a href="#安装3个虚拟机并实现ssh免密码登录" class="headerlink" title="安装3个虚拟机并实现ssh免密码登录"></a>安装3个虚拟机并实现ssh免密码登录</h2><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>使用的Linux系统是CentOS 7 ，修改三台机器的Hosts，让它们能相互映射到，能ping t通<br>参考我的上一篇文章 </p>
<p><a href="http://blog.wuwii.com/linux-hostname.html">http://blog.wuwii.com/linux-hostname.html</a></p>
<p>添加Hosts，这是我的三台机器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.19.185  server1</div><div class="line">192.168.19.184  server2</div><div class="line">192.168.19.199  server3</div></pre></td></tr></table></figure></p>
<p>ping 结果都能ping 通<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># ping -c 4 server1</span></div><div class="line">PING server1 (192.168.19.185) 56(84) bytes of data.</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=1 ttl=64 time=0.536 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=2 ttl=64 time=0.388 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=3 ttl=64 time=0.309 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=4 ttl=64 time=0.368 ms</div><div class="line"></div><div class="line">--- server1 ping statistics ---</div><div class="line">4 packets transmitted, 4 received, 0% packet loss, time 3001ms</div><div class="line">rtt min/avg/max/mdev = 0.309/0.400/0.536/0.084 ms</div></pre></td></tr></table></figure></p>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>密钥三台机器都需要生成，就以一台 server1 机器为例</p>
<p>使用命令 <code>ssh-keygen -t rsa</code> 一路 enter<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ssh-keygen -t rsa</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </div><div class="line">Enter same passphrase again: </div><div class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">e0:ea:e3:5d:95:be:c5:9a:dc:90:99:22:d1:cf:99:49 root@server1</div><div class="line">The key<span class="string">'s randomart image is:</span></div><div class="line"><span class="string">+--[ RSA 2048]----+</span></div><div class="line"><span class="string">|                 |</span></div><div class="line"><span class="string">|                 |</span></div><div class="line"><span class="string">|      .          |</span></div><div class="line"><span class="string">|     . o   .     |</span></div><div class="line"><span class="string">|      o S E      |</span></div><div class="line"><span class="string">|     . . * O     |</span></div><div class="line"><span class="string">|    . . o % o    |</span></div><div class="line"><span class="string">|   ... o o B     |</span></div><div class="line"><span class="string">|   .o..   = .    |</span></div><div class="line"><span class="string">+-----------------+</span></div></pre></td></tr></table></figure></p>
<p>出现上面的 ，可以在本帐户的根目录看到一个 .ssh 文件夹 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment">#  ll -a</span></div><div class="line">总用量 68</div><div class="line">dr-xr-x---.  6 root root   256 10月 18 15:00 .</div><div class="line">dr-xr-xr-x. 20 root root  4096 10月 18 10:35 ..</div><div class="line">-rw-------.  1 root root  1456 8月  14 08:44 anaconda-ks.cfg</div><div class="line">-rw-------.  1 root root 24538 10月 18 10:35 .bash_history</div><div class="line">-rw-r--r--.  1 root root    18 12月 29 2013 .bash_logout</div><div class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bash_profile</div><div class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bashrc</div><div class="line">-rw-r--r--.  1 root root   100 12月 29 2013 .cshrc</div><div class="line">-rw-r--r--   1 root root   223 9月  27 10:47 dump.rdb</div><div class="line">drwxr-xr-x. 11 root root   270 8月  15 15:57 fastdfs</div><div class="line">drwxr-xr-x.  2 root root    40 8月  15 15:04 .oracle_jre_usage</div><div class="line">drwxr-----.  3 root root    19 8月  15 15:53 .pki</div><div class="line">-rw-------   1 root root   571 9月  27 16:58 .rediscli_history</div><div class="line">drwx------   2 root root    38 10月 18 14:56 .ssh</div><div class="line">-rw-r--r--.  1 root root   129 12月 29 2013 .tcshrc</div><div class="line">-rw-------   1 root root  7372 10月 18 11:35 .viminfo</div></pre></td></tr></table></figure>
<p>注意它是个隐藏的文件，我是用的是secureFx 显示隐藏文件，需要 视图 -&gt; 文件 勾选上就行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server1 .ssh]<span class="comment"># ll</span></div><div class="line">总用量 8</div><div class="line">-rw------- 1 root root 668 10月 18 15:12 id_rsa</div><div class="line">-rw-r--r-- 1 root root 602 10月 18 15:12 id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>打开 <code>/root/.ssh/id_rsa.pub</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server1 .ssh]# cat id_rsa.pub </div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</div></pre></td></tr></table></figure></p>
<p>查看到了我们生成的密钥成功了</p>
<p>然后我们把三个机器都生成密钥，然后把他们合并成一个文件创建一个<code>/root/.ssh/authorized_keys</code> 文件保存着。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171018152550.png" alt="image"></p>
<p>使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span></div></pre></td></tr></table></figure></p>
<p>其他机器的公共密钥也复制到到这个文件里来（补充，不要连着复制，上一行后面打个空格，再换行。）</p>
<p>所以最后是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@server1 .ssh]# vim authorized_keys</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFwe2pGEMWt+X0FXFPotOQrUAJFDOLflMjtwBIJxTSFBPQuVhoEtJHkacnpsPAtT4zOJxjieLOrsC/G5fKZVpSgYRwmMw6iobe3IsL5uElVfRYoO+HIr/BDep1imVFkmj0DTMUj0q+UYz3wiEaFQk4zh7Gas2qIdgyOtfSQcYN3T7qNh4dPDfdOrBIqZq/fP33UFDBgbUqGZUZhL6mHc8LRHo9+eby3ZPtiEudfeczvi3pI0Dcp0zX+WSuqPK/z47hBN2XlGMIDO2Ta5sAu9WfECe0WcxsPLOPsKPCRsakyMrYlnGk3hEQ9Ci1YsNKUX8j1RhBi3YLKsl5rjhQR67r root@server2</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFPaRkR/0i51MORrPVnsEZR60t7FZDmJ3DlhVKdt4crCHO+QhsHr5ZwbcLT/9vTBAdRoveuwHJreEO5MLnlcG0dxFjVDduip5M84zGjmKI1k7/tyeNT1bHUhoMWRAaDEk9RUx/rrYzR/DzHvkdXPwPK+uENFCFBo0RTEGxAMkrXkex7SFNITh8t48sto23D20v7O4A+h4Fbe4oiEjlFBeK6H+dJxZVqYE5Xof1Y4Nc0Xh0YfEg9rUT4BS1AdYWZB9ptVyuSzsbmBd1mve8GcR8cf0M75uSIovc3ww/z/sVpx+hluldhVN9wXyUtFZdWcbklJcq6oTMfejY7ISv2lKh root@server3</div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">&quot;authorized_keys&quot; [新] 5L, 1183C 已写入</div></pre></td></tr></table></figure></p>
<p>每个电脑都需要这个<code>/root/.ssh/authorized_keys</code>文件，所以直接把它复制到对应位置就行了。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171018152550.png" alt="image"></p>
<p><strong>注意</strong><br>我们需要给它们相应的权限，一般默认的就是这个权限，下面是root 用户的。<br><code>chmod 700 ~/.ssh</code> #注意：这两条权限设置特别重要，决定成败。<br><code>chmod 600 ~/.ssh/authorized_keys</code></p>
<p>测试使用ssh 密钥无密码登陆</p>
<p>首先测试下localhost ，看能否无密码登陆自己<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]# ssh localhost</div><div class="line">Last login: Thu Oct 19 09:01:34 2017 from 192.168.19.207</div><div class="line">[root@server1 ~]#</div></pre></td></tr></table></figure></p>
<p>演示下server2 电脑上进行登陆 server1 并进行操作，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># ssh server1</span></div><div class="line">The authenticity of host <span class="string">'server1 (192.168.19.185)'</span> can<span class="string">'t be established.</span></div><div class="line"><span class="string">ECDSA key fingerprint is bd:50:b8:e7:b3:69:ad:6c:14:6b:a9:fb:18:43:b9:c9.</span></div><div class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></div><div class="line"><span class="string">Warning: Permanently added '</span>server1,192.168.19.185<span class="string">' (ECDSA) to the list of known hosts.</span></div><div class="line"><span class="string">Last login: Wed Oct 18 16:46:53 2017 from server1</span></div><div class="line"><span class="string">[root@server1 ~]# exit</span></div><div class="line"><span class="string">logout</span></div><div class="line"><span class="string">Connection to server1 closed.</span></div></pre></td></tr></table></figure></p>
<p>之前配置 <code>authorized_keys</code> 搞了半天，虽然用了三行，但是后面没空格，导致 密钥不能使用，每次登陆还需要密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ssh server2</span></div><div class="line">root@server2<span class="string">'s password:</span></div></pre></td></tr></table></figure></p>
<p>没百度出来，自己最后卡了一个小时 恍然大悟，每行后面空出空格就好了。</p>
<p>在其余的电脑相互登陆试试，都能无密登陆，说明，配置成功。</p>
<p><strong>但是一定要注意的是，每次ssh登陆完成后，都要执行 <code>exit</code>，否则你的后续命令是在另外一台机器上执行的。</strong></p>
<h2 id="安装JDK-和Hadoop"><a href="#安装JDK-和Hadoop" class="headerlink" title="安装JDK 和Hadoop"></a>安装JDK 和Hadoop</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>三台机器都需要安装jdk，CentOS7 安装JDK参考 <a href="http://blog.wuwii.com/linux-jdk.html">http://blog.wuwii.com/linux-jdk.html</a></p>
<h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p>首先 三台机器都需要安装hadoop，都需要执行下面所有的操作。</p>
<h4 id="上载文件，并且解压"><a href="#上载文件，并且解压" class="headerlink" title="上载文件，并且解压"></a>上载文件，并且解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 opt]<span class="comment"># tar -xvf hadoop-2.8.1.tar.gz</span></div></pre></td></tr></table></figure>
<p>解压缩后得到<code>hadoop-2.8.1</code> 文件夹。</p>
<h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p>在/root 目录下新建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /root/hadoop</div><div class="line">mkdir /root/hadoop/tmp</div><div class="line">mkdir /root/hadoop/var</div><div class="line">mkdir /root/hadoop/dfs</div><div class="line">mkdir /root/hadoop/dfs/name</div><div class="line">mkdir /root/hadoop/dfs/data</div></pre></td></tr></table></figure></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>配置文件都在 解压后的文件夹 <code>hadoop-2.8.1/etc/hadoop</code> 下。</p>
<h5 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h5><p> 在configuration&gt;节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="修改-hadoop-env-sh文件"><a href="#修改-hadoop-env-sh文件" class="headerlink" title="修改 hadoop-env.sh文件"></a>修改 hadoop-env.sh文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hadoop-env.sh</code>文件<br>将<code>export JAVA_HOME=${JAVA_HOME}</code><br><strong>修改为：</strong><br><code>export JAVA_HOME=/usr/java/jdk1.8.0_144</code><br> <strong>说明：修改为自己的JDK路径和版本号</strong></p>
<h5 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hdfs-site.xml</code>文件，<br>在<configuration>节点内加入配置:</configuration></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明：dfs.permissions配置为false后，可以允许不要检查权限就生成dfs上的文件，方便倒是方便了，但是你需要防止误删除，请将它设置为true，或者直接将该property节点删除，因为默认就是true。</strong> </p>
<h5 id="新建并且修改mapred-site-xml"><a href="#新建并且修改mapred-site-xml" class="headerlink" title="新建并且修改mapred-site.xml"></a>新建并且修改mapred-site.xml</h5><p>在该版本中，有一个名为mapred-site.xml.template的文件，复制该文件，然后改名为mapred-site.xml，命令是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop]<span class="comment"># cp mapred-site.xml.template mapred-site.xml</span></div></pre></td></tr></table></figure></p>
<p>修改这个新建的mapred-site.xml文件，在<configuration>节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:49001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/var<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></configuration></p>
<h5 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h5><p> 修改<code>./hadoop-2.8.1/etc/hadoop/slaves</code>文件，将里面的localhost删除，添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server2</div><div class="line">server3</div></pre></td></tr></table></figure>
<h5 id="修改yarn-site-xml文件"><a href="#修改yarn-site-xml文件" class="headerlink" title="修改yarn-site.xml文件"></a>修改yarn-site.xml文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/yarn-site.xml</code> 文件，<br>在<configuration>节点内加入配置(注意了，内存根据机器配置越大越好):</configuration></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the applications manager interface in the RM.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The http address of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The https adddress of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the RM admin interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB,默认8182MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明：<code>yarn.nodemanager.vmem-check-enabled</code> 这个的意思是忽略虚拟内存的检查，如果你是安装在虚拟机上，这个配置很有用，配上去之后后续操作不容易出问题。如果是实体机上，并且内存够多，可以将这个配置去掉。</strong></p>
<h2 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h2><h3 id="在namenode上执行初始化"><a href="#在namenode上执行初始化" class="headerlink" title="在namenode上执行初始化"></a>在namenode上执行初始化</h3><p> 因为server1是namenode，server2和server3都是datanode，所以只需要对server1进行初始化操作，也就是对hdfs进行格式化。<br>进入到server1这台机器的/opt/hadoop-2.8.1/bin目录，执行初始化命令：<code>./hadoop namenode -format</code>  ，格式化一个新的分布式文件系统。<br>如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@server1 bin]<span class="comment"># cd /opt/hadoop-2.8.1/bin/                      </span></div><div class="line">[root@server1 bin]<span class="comment"># ./hadoop namenode -format                      </span></div><div class="line">DEPRECATED: Use of this script to execute hdfs <span class="built_in">command</span> is deprecated.</div><div class="line">Instead use the hdfs <span class="built_in">command</span> <span class="keyword">for</span> it.</div><div class="line"></div><div class="line">17/10/19 15:09:05 INFO namenode.NameNode: STARTUP_MSG: </div><div class="line">/************************************************************</div><div class="line">STARTUP_MSG: Starting NameNode</div><div class="line">STARTUP_MSG:   user = root</div><div class="line">STARTUP_MSG:   host = server1/192.168.19.185</div><div class="line">STARTUP_MSG:   args = [-format]</div><div class="line">STARTUP_MSG:   version = 2.8.1</div><div class="line">STARTUP_MSG:   classpath = /opt/hadoop-2.8.1/etc/hadoop:/opt/hadoop-2.8.1/share/</div></pre></td></tr></table></figure></p>
<p>执行完成，不报错，说明启动成功。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019151459.png" alt="image"></p>
<p>格式化成功后，可以在看到在<code>/root/hadoop/dfs/name/</code>目录多了一个current目录，而且该目录内有一系列文件。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019151635.png" alt="image"></p>
<h3 id="在namenode上执行启动命令"><a href="#在namenode上执行启动命令" class="headerlink" title="在namenode上执行启动命令"></a>在namenode上执行启动命令</h3><p>因为server1是namenode，server2和server3都是datanode，所以只需要再server1上执行启动命令即可。<br>进入到hserver1这台机器的<code>/opt/hadoop-2.8.1/sbin</code>目录，也就是执行命令：<br><code>cd /opt/hadoop/hadoop-2.8.0/sbin</code><br>执行初始化脚本，也就是执行命令：<br><code>./start-all.sh</code><br>第一次执行上面的启动命令，会需要我们进行交互操作，在问答界面上输入yes回车</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></div><div class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</div><div class="line">Starting namenodes on [server1]</div><div class="line">server1: namenode running as process 3609. Stop it first.</div><div class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</div><div class="line">server2: datanode running as process 17888. Stop it first.</div><div class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</div><div class="line">Starting secondary namenodes [0.0.0.0]</div><div class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</div><div class="line">starting yarn daemons</div><div class="line">resourcemanager running as process 3942. Stop it first.</div><div class="line">server3: starting nodemanager, logging to /opt/hadoop-2.8.1/logs/yarn-root-nodemanager-server3.out</div><div class="line">server2: nodemanager running as process 18038. Stop it first.</div><div class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</div><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></div><div class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</div><div class="line">Starting namenodes on [server1]</div><div class="line">server1: namenode running as process 3609. Stop it first.</div><div class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</div><div class="line">server2: datanode running as process 17888. Stop it first.</div><div class="line">Starting secondary namenodes [0.0.0.0]</div><div class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</div><div class="line">starting yarn daemons</div><div class="line">resourcemanager running as process 3942. Stop it first.</div><div class="line">server2: nodemanager running as process 18038. Stop it first.</div><div class="line">server3: starting no</div></pre></td></tr></table></figure>
<p>没报错，说明执行成功，之前我的server3 上的一个xml 配置错了，很明了的说出了错误的位置。  </p>
<h2 id="测试hadoop"><a href="#测试hadoop" class="headerlink" title="测试hadoop"></a>测试hadoop</h2><p>启动后，需要测试能使用，才能说明配置正确</p>
<p>首先需要关闭防火墙。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]# systemctl stop firewalld.service</div></pre></td></tr></table></figure>
<p>我们的namanode机器是server1，IP是192.168.19.185，直接在谷歌浏览器上输入到端口 50070，自动跳转到了overview页面 （dfshealth.html）<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019153415.png" alt="image"></p>
<p>继续；<br>测试 8088 端口 ：<br>自动跳转到了cluster页面<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019153453.png" alt="image"></p>
<p>在namenode机器上执行<code>jps</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># jps</span></div><div class="line">12469 ResourceManager</div><div class="line">12119 NameNode</div><div class="line">12313 SecondaryNameNode</div><div class="line">12730 Jps</div></pre></td></tr></table></figure></p>
<p>在datanode机器上执行<code>jps</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server3 hadoop-2.8.1]<span class="comment"># jps</span></div><div class="line">10776 NodeManager</div><div class="line">11114 Jps</div><div class="line">10635 DataNode</div></pre></td></tr></table></figure></p>
<p>这只能证明它们启动成功，还要看它们之间互相通信。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171025165042.png" alt="hadoop"><br>出现datanode 机器，通信成功。</p>
<p>配置完成。</p>
<p><strong>参考博客：</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/pucao_cug/article/details/71698903">http://blog.csdn.net/pucao_cug/article/details/71698903</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hadoop是一个由Apache基金会所开发的分布式系统基础架构。&lt;br&gt;用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。&lt;br&gt; Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。&lt;br&gt;Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。(百科)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98010877b33533faf5b6942890e89a22/3c6d55fbb2fb4316ecfbfb0322a4462308f7d3e7.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.wuwii.com/tags/linux/"/>
    
      <category term="Hadoop" scheme="http://blog.wuwii.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装JDK和环境变量的配置</title>
    <link href="http://blog.wuwii.com/linux-jdk.html"/>
    <id>http://blog.wuwii.com/linux-jdk.html</id>
    <published>2017-10-19T03:18:03.000Z</published>
    <updated>2017-10-19T03:18:40.443Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>系统环境：centos7</li>
<li>安装方式：rpm安装</li>
<li>版本：jdk1.8.0_144</li>
</ul>
<a id="more"></a>
<h4 id="首先查看电脑的-jdk"><a href="#首先查看电脑的-jdk" class="headerlink" title="首先查看电脑的 jdk"></a>首先查看电脑的 jdk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># java -version</span></div><div class="line">openjdk version <span class="string">"1.8.0_102"</span></div><div class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</div></pre></td></tr></table></figure>
<p>是默认安装的openjdk 不是我们需要的oracle 版本的，安装前需要卸载 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># rpm -qa | grep java</span></div><div class="line">javapackages-tools-3.4.1-11.el7.noarch</div><div class="line">java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</div><div class="line">java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">tzdata-java-2016g-2.el7.noarch</div><div class="line">java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</div><div class="line">java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">python-javapackages-3.4.1-11.el7.noarch</div><div class="line"></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps tzdata-java-2016g-2.el7.noarch</span></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e -nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span></div><div class="line">rpm: -nodeps: unknown option</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e -nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">rpm: -nodeps: unknown option</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">^[[A[root@server2 rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span></div></pre></td></tr></table></figure></p>
<p>最后查看卸载完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># java -version</span></div><div class="line">-bash: /usr/bin/java: No such file or directory</div></pre></td></tr></table></figure></p>
<h4 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h4><p>官网下载</p>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>我下载的是rpm 文件，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment"># rpm -ivh jdk-8u144-linux-x64.rpm </span></div><div class="line">Preparing...                          <span class="comment">################################# [100%]</span></div><div class="line">Updating / installing...</div><div class="line">   1:jdk1.8.0_144-2000:1.8.0_144-fcs  rpm                                  (  1%<span class="comment">################################# [100%]</span></div><div class="line">Unpacking JAR files...</div><div class="line">        tools.jar...</div><div class="line">        plugin.jar...</div><div class="line">        javaws.jar...</div><div class="line">        deploy.jar...</div><div class="line">        rt.jar...</div><div class="line">        jsse.jar...</div><div class="line">        charsets.jar...</div><div class="line">        localedata.jar...</div></pre></td></tr></table></figure></p>
<p>默认安装的是路径是 <code>/usr/java</code></p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>在 <code>/etc/profile</code> 文件中加入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/java/jdk1.8.0_144 PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/</div><div class="line">jre/lib/ext:<span class="variable">$JAVA_HOME</span>/lib/tools.jar <span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure>
<p>使生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment"># source /etc/profile</span></div><div class="line">-bash: jre/lib/ext:/usr/java/jdk1.8.0_144/lib/tools.jar: No such file or directory</div></pre></td></tr></table></figure></p>
<p>查看系统环境状态path 是否生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment">#  echo $PATH </span></div><div class="line">/usr/java/jdk1.8.0_144/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</div></pre></td></tr></table></figure></p>
<p>完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;系统环境：centos7&lt;/li&gt;
&lt;li&gt;安装方式：rpm安装&lt;/li&gt;
&lt;li&gt;版本：jdk1.8.0_144&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.wuwii.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>20171018</title>
    <link href="http://blog.wuwii.com/20171018.html"/>
    <id>http://blog.wuwii.com/20171018.html</id>
    <published>2017-10-18T13:53:03.000Z</published>
    <updated>2017-10-19T00:48:38.105Z</updated>
    
    <content type="html"><![CDATA[<p>最近看她的空间留言，写了又删，删了又写，心里也和不是滋味，现在一想起她，就想到昨天见到第一眼她那种憔悴的面容，真是令人疼惜。我想可能真的不应该去见她吧，弄得现在都没能说上两句话，可能是我太自私了点，打破了一点存留下的美好吧。</p>
<p>最近脑经确实有点炸裂，确实不怎么敢再去看她的空间了，不想再去看那种互相残忍的伤害的局面，不知道他们心里怎么想的，我根本就不想明白，明白的越多，失望估计也就越大了。突然想起，以前那么长时间公司有网，有wifi 也要强忍着不上QQ 不看手机， 就是怕突然看到她的动态，就像一下子惊起梦中的我，然后开始梦游，梦游开始不知觉中触碰各种神经，幻想着有人来刺伤自己。</p>
<p>自从昨天打通了她的手机，今天就无时无刻的想起要去给她拨号过去，问下，你怎么现在再干嘛，过得怎么样了。想着，还是算了，昨天她见到我那种惊慌失措的样子，是真的可爱极了，她一直说她很忙，口中支支吾吾的说还有什么事情没做完。我也是那种慢热的人，做事总是顾及其他，想想还是放下，生怕打扰她，弄不好什么时候又要拉黑了。</p>
<p>想着今晚再打过去吧，不论对错，或许，相见不如怀念，至少能不必再给她带来更多的压力，我想我这个人根本就读不懂女人的心吧，就是直嘛，也好，不要去想那些隐喻，也不要去有那些烦恼，姑且就将自己的快乐带给她人。</p>
<p>既然她想做个坚强的人，就希望她永远做个坚强的女人吧，不要轻易的被击倒。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看她的空间留言，写了又删，删了又写，心里也和不是滋味，现在一想起她，就想到昨天见到第一眼她那种憔悴的面容，真是令人疼惜。我想可能真的不应该去见她吧，弄得现在都没能说上两句话，可能是我太自私了点，打破了一点存留下的美好吧。&lt;/p&gt;
&lt;p&gt;最近脑经确实有点炸裂，确实不怎么敢
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 上永久修改hostname</title>
    <link href="http://blog.wuwii.com/linux-hostname.html"/>
    <id>http://blog.wuwii.com/linux-hostname.html</id>
    <published>2017-10-18T03:08:03.000Z</published>
    <updated>2017-10-18T03:18:43.540Z</updated>
    
    <content type="html"><![CDATA[<p>由于要做Hadoop集群，需要修改系统的<code>hostname</code> 做一个映射，hostname 命令只能临时修改，重启就会失效，为了有效性，所以需要永久修改系统的hostname。</p>
<p>百度了下，网上都是说修改 <code>/etc/sysconfig/network</code> 配置文件，修改<code>hostname</code><br>参数，reboot 重启后也生效，然而我这样做了并没有生效，而且我打开这个配置文件，并没有Hostname 参数，完全是自己后来加上去的，它里面只有一句话 <code># Created by anaconda</code>。<br><a id="more"></a></p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="临时生效"><a href="#临时生效" class="headerlink" title="临时生效"></a>临时生效</h5><p>使用 <code>hostname</code> 命令 ，hostname <new hostname="">，系统重启后失效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># hostname</span></div><div class="line">localhost.localdomain</div><div class="line">[root@localhost ~]<span class="comment"># hostname server1</span></div><div class="line">[root@localhost ~]<span class="comment"># hostname</span></div><div class="line">server1</div><div class="line">[root@localhost ~]<span class="comment">#</span></div></pre></td></tr></table></figure></new></p>
<p>也可以直接cat /proc/sys/kernel/hostname查看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat /proc/sys/kernel/hostname</span></div><div class="line">server1</div></pre></td></tr></table></figure></p>
<p><code>hostname newname</code> 即要设置的新的hostname，运行后立即生效，但是在系统重启后会丢失所做的修改，如果要永久更改系统的hostname，就要修改相关的设置文件。</p>
<h5 id="永久更改Linux的hostname"><a href="#永久更改Linux的hostname" class="headerlink" title="永久更改Linux的hostname"></a>永久更改Linux的hostname</h5><p>man hostname里有这么一句话，</p>
<blockquote>
<p>The host name is usually set once at system startup in<br>/etc/rc.d/rc.inet1 or /etc/init.d/boot (normally by reading the<br>contents of a file which contains the host name, e.g. /etc/hostname).”</p>
</blockquote>
<p>RedHat里没有这个文件，而是由/etc/rc.d/rc.sysinit这个脚本负责设置系统的hostname，它读取/etc/sysconfig/network这个文本文件，RedHat的hostname就是在这个文件里设置。</p>
<p>所以，如果要永久修改RedHat的hostname，就修改/etc/sysconfig/network文件，将里面的HOSTNAME这一行修改成 HOSTNAME=NEWNAME，其中NEWNAME就是你要设置的hostname。</p>
<p><strong>Debian发行版的hostname的配置文件是/etc/hostname。</strong></p>
<p>修该配置文件后，重启系统就会读取配置文件设置新的hostname。</p>
<p>我想我就是 Debian发行版 吧 执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/hostname </span></div><div class="line">localhost.localdomain</div></pre></td></tr></table></figure></p>
<p>果然是这里，直接修改，保存，退出，重启。<br>再去查看Hostname<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># hostname</span></div><div class="line">server1</div><div class="line">[root@server1 ~]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>修改成功</p>
<h4 id="hostname与-etc-hosts的关系"><a href="#hostname与-etc-hosts的关系" class="headerlink" title="hostname与/etc/hosts的关系"></a>hostname与/etc/hosts的关系</h4><p>很过人一提到更改hostname首先就想到修改/etc/hosts文件，认为hostname的配置文件就是/etc/hosts。其实不是的。</p>
<p>hosts文件的作用相当如DNS，提供IP地址到hostname的对应。</p>
<p>早期的互联网计算机少，单机hosts文件里足够存放所有联网计算机。</p>
<p>不过随着互联网的发展，这就远远不够了。于是就出现了分布式的DNS系统。由DNS服务器来提供类似的IP地址到域名的对应。具体可以man hosts。</p>
<p><strong>Linux系统在向DNS服务器发出域名解析请求之前会查询/etc/hosts文件，如果里面有相应的记录，就会使用hosts里面的记录。<code>/etc/hosts</code>文件通常里面包含这一条记录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1    localhost.localdomain   localhost</div></pre></td></tr></table></figure></p>
<p>hosts文件格式是一行一条记录，分别是IP地址 <code>hostname aliases</code>，三者用空白字符分隔，<code>aliases</code>可选。</p>
<p><strong>127.0.0.1到localhost这一条建议不要修改，因为很多应用程序会用到这个，比如sendmail，修改之后这些程序可能就无法正常运行。</strong><br>在<code>/etc/hosts</code> 添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.19.185  server1</div><div class="line">192.168.19.184  server2</div></pre></td></tr></table></figure></p>
<p>ping server2 能ping 通说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ping server2       </span></div><div class="line">PING server2 (192.168.19.184) 56(84) bytes of data.</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=1 ttl=64 time=0.421 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=2 ttl=64 time=0.602 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=3 ttl=64 time=0.304 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=4 ttl=64 time=1.10 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=5 ttl=64 time=0.545 ms</div></pre></td></tr></table></figure></p>
<p>还有一个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# hostname</div><div class="line">localhost.localdomain</div><div class="line">[root@localhost ~]# vim /etc/hosts</div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">192.168.19.199  server3</div></pre></td></tr></table></figure></p>
<p>重启系统后发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server3 ~]# hostname</div><div class="line">server3</div><div class="line">[root@server3 ~]#</div></pre></td></tr></table></figure></p>
<p>hostname 被修改了</p>
<p>在 <code>/etc/rc.d/rc.sysinit</code> 这个启动脚本里发现了问题的所在。<br>rc.sysinit文件里一开始就设置了hostname。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -f /etc/sysconfig/network ]; <span class="keyword">then</span></div><div class="line">. /etc/sysconfig/network</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$HOSTNAME</span>"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"(none)"</span> ]; <span class="keyword">then</span></div><div class="line">HOSTNAME=localhost</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<p>确实使用了<code>/etc/sysconfig/network</code> 里的hostname值。不过后面还有一段关于设置hostname的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ipaddr=</div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"localhost"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"localhost.localdomain"</span> ]</div><div class="line">; <span class="keyword">then</span></div><div class="line">ipaddr=$(ip addr show to 0/0 scope global | awk <span class="string">'/[[:space:]]inet</span></div><div class="line"><span class="string">/ &#123; print gensub("/.*","","g",$2) &#125;'</span>)</div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$ipaddr</span>"</span> ]; <span class="keyword">then</span></div><div class="line"><span class="built_in">eval</span> $(ipcalc -h <span class="variable">$ipaddr</span> 2&gt;/dev/null)</div><div class="line">hostname <span class="variable">$&#123;HOSTNAME&#125;</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>脚本判断hostname是否为localhost或者localhost.localdomain，如果是的话，将会使用接口IP地址对应的 hostname来重新设置系统的hostname。问题就出在这里，我的/etc/sysconfig/network 默认的hostname是 localhost.localdomain，它的IP是192.168.19.199，而/etc/hosts里有192.168.19.199的记录。 于是就用192.168.19.199这条记录来替换了hostname。</p>
<p>估计这也是很多人将/etc/hosts误以为是hostname的配置文件的原因。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>查看hostname : hostname</li>
<li>临时修改: hostname <new hostname=""></new></li>
<li>vim /etc/hosts 修改 hostname 参数为 newname</li>
<li>vim /etc/sysconfig/network 修改 hostname 参数为 newname</li>
</ol>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/yangshangwei/article/details/52878530">http://blog.csdn.net/yangshangwei/article/details/52878530</a>   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要做Hadoop集群，需要修改系统的&lt;code&gt;hostname&lt;/code&gt; 做一个映射，hostname 命令只能临时修改，重启就会失效，为了有效性，所以需要永久修改系统的hostname。&lt;/p&gt;
&lt;p&gt;百度了下，网上都是说修改 &lt;code&gt;/etc/sysconfig/network&lt;/code&gt; 配置文件，修改&lt;code&gt;hostname&lt;/code&gt;&lt;br&gt;参数，reboot 重启后也生效，然而我这样做了并没有生效，而且我打开这个配置文件，并没有Hostname 参数，完全是自己后来加上去的，它里面只有一句话 &lt;code&gt;# Created by anaconda&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.wuwii.com/tags/linux/"/>
    
  </entry>
  
</feed>
