<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>喃声细语</title>
  <subtitle>开始</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wuwii.com/"/>
  <updated>2017-10-26T07:12:12.655Z</updated>
  <id>http://blog.wuwii.com/</id>
  
  <author>
    <name>一棵树站在原野上</name>
    <email>k@wuwii.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8 新特性Stream 的学习和使用方法</title>
    <link href="http://blog.wuwii.com/java-stream.html"/>
    <id>http://blog.wuwii.com/java-stream.html</id>
    <published>2017-10-25T14:18:03.000Z</published>
    <updated>2017-10-26T07:12:12.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="流（Stream）"><a href="#流（Stream）" class="headerlink" title="流（Stream）"></a>流（Stream）</h3><p>流是java 8 中新引入的特性，用来处理集合中的数据，Stream 是一个来自数据源的元素队列并支持聚合操作。</p>
<ul>
<li>Java 中 Stream 不会存储元素。</li>
<li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li>
<li><p>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</p>
<a id="more"></a>
<p>Stream操作还有几个特征：</p>
</li>
<li><strong>只遍历一次</strong>。我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。</li>
<li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li>
<li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li>
</ul>
<h3 id="流的使用"><a href="#流的使用" class="headerlink" title="流的使用"></a>流的使用</h3><p>流的使用过程有三步：</p>
<ul>
<li>获取流；</li>
<li>中间操作，得到一个新的流；</li>
<li>最终操作，获取结果。</li>
</ul>
<h4 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h4><p>流有两种：</p>
<ul>
<li>stream() ： 创建串行流。</li>
<li>parallelStream()  ： 创建并行流。</li>
</ul>
<p>并行流的特点就是将一个大任务切分成多个小任务，无序一起执行，当然如果我们需要顺序输出的话可以使用<code>forEachOrdered</code>，速度会比串行流快一些。它通过默认的ForkJoinPool,可能提高你的多线程任务的速度。</p>
<h5 id="从集合获取流"><a href="#从集合获取流" class="headerlink" title="从集合获取流"></a>从集合获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">Stream&lt;FarmEntity&gt; stream = list.stream();</div></pre></td></tr></table></figure>
<h5 id="从数组获取流"><a href="#从数组获取流" class="headerlink" title="从数组获取流"></a>从数组获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] arrays = &#123;<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>&#125;;</div><div class="line">Stream&lt;String&gt; stream = Arrays.stream(arrays);</div></pre></td></tr></table></figure>
<h5 id="从值获取流"><a href="#从值获取流" class="headerlink" title="从值获取流"></a>从值获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>);</div></pre></td></tr></table></figure>
<h5 id="从文件获取流"><a href="#从文件获取流" class="headerlink" title="从文件获取流"></a>从文件获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Stream&lt;String&gt; file =Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</div><div class="line">    file.forEach(System.out::println);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用NIO获取流，可以打印出文本文件的内容。</p>
<h4 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h4><h5 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h5><p>filter函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</div><div class="line">Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<h5 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).distinct().forEach(System.out::print);</div></pre></td></tr></table></figure>
<h5 id="limit-截取"><a href="#limit-截取" class="headerlink" title="limit 截取"></a>limit 截取</h5><p>截取前面两个单位：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<h5 id="skip-跳过"><a href="#skip-跳过" class="headerlink" title="skip 跳过"></a>skip 跳过</h5><p>和上面的limit 相反，跳过前面两个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h5 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h5><p>map 方法用于映射每个元素到对应的结果。<br>给每个词语后面加个 “兮”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">珊瑚兮</div><div class="line">阳光兮</div><div class="line">细腻兮</div><div class="line">冷暖兮</div><div class="line">阳光兮</div></pre></td></tr></table></figure></p>
<h5 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted 排序"></a>sorted 排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></div><div class="line">Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">冷暖</div><div class="line">珊瑚</div><div class="line">细腻</div><div class="line">阳光</div><div class="line">阳光</div></pre></td></tr></table></figure></p>
<p>java8 以前排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before Java 8 sorted</span></div><div class="line">       System.out.println(<span class="string">"java8以前排序："</span>);</div><div class="line">       List&lt;String&gt; list1 = Arrays.asList(strings);</div><div class="line">       list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> o1.compareTo(o2);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java8以前排序：</div><div class="line">java8 以前的排序：[冷暖, 珊瑚, 细腻, 阳光, 阳光]</div></pre></td></tr></table></figure></p>
<h5 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//统计</span></div><div class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest number in List : 4</div><div class="line">Lowest  number in List : 1</div><div class="line">Sum of all numbers : 11</div><div class="line">Average of all numbers : 2.2</div></pre></td></tr></table></figure></p>
<h5 id="match-匹配"><a href="#match-匹配" class="headerlink" title="match 匹配"></a>match 匹配</h5><ul>
<li><code>anyMatch</code>用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为<code>boolean</code>类型。 </li>
<li><code>noneMatch</code>与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件</li>
<li><code>findAny</code>能够从流中随便选一个元素出来，它返回一个Optional类型的元素。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">       System.out.println(result1);</div><div class="line"></div><div class="line">       Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">       System.out.println(reslut2);</div><div class="line">       <span class="comment">//随机读取一个</span></div><div class="line">       Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</div><div class="line">       System.out.println(getResult);</div><div class="line">       System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">false</div><div class="line">true</div><div class="line">Optional[冷暖]</div><div class="line">获取Optional中的值：冷暖</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Optional是Java8新加入的一个容器，这个容器只存1个或0个元素，它用于防止出现NullpointException，它提供如下方法：</p>
<ul>
<li><code>isPresent()</code> 判断容器中是否有值。</li>
<li><code>ifPresent(Consume lambda)</code> 容器若不为空则执行括号中的Lambda表达式。</li>
<li><code>T get()</code>  获取容器中的元素，若容器为空则抛出NoSuchElement异常。</li>
<li><code>T orElse(T other)</code>  获取容器中的元素，若容器为空则返回括号中的默认值。</li>
</ul>
</blockquote>
<h5 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce 归约"></a>reduce 归约</h5><p>求和：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归约</span></div><div class="line">        <span class="comment">//第一种方法求和</span></div><div class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</div><div class="line">        System.out.println(connectStrings);</div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法求和</span></div><div class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</div><div class="line">        System.out.println(connectStrings1);</div></pre></td></tr></table></figure></p>
<p>getConnectStrings方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Connect Strings</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> s1 参数1</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> s2 参数2</span></div><div class="line"><span class="comment">* <span class="doctag">@return</span> java.lang.String</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> s1 + s2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h5><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。 </p>
<p>每种数值流都提供了数值计算函数，如max、min、sum等。</p>
<p>下面使用 mapToInt 为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line"><span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></div><div class="line">IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</div><div class="line"><span class="comment">//使用对应的 Optional 接收</span></div><div class="line">OptionalInt optionalNumber = intStream.max();</div><div class="line"><span class="comment">// 取值，给默认值 0，为空结果为0</span></div><div class="line">System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numberStrings&apos;s max number is: 3</div></pre></td></tr></table></figure></p>
<p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 所以可以直接使用 <code>OptionalInt.getAsInt()</code>获取容器的值。<br>为空的话捕捉异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.util.NoSuchElementException: No value present</div><div class="line">	at java.util.OptionalInt.getAsInt(OptionalInt.java:118)</div><div class="line">	at com.wuwii.test.TestStream.main(TestStream.java:105)</div></pre></td></tr></table></figure></p>
<p>此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong</p>
<h5 id="Collectors-集合归约"><a href="#Collectors-集合归约" class="headerlink" title="Collectors 集合归约"></a>Collectors 集合归约</h5><p>将流转换成集合和聚合元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Collectors 集合归约</span></div><div class="line">       <span class="comment">//  toList</span></div><div class="line">       List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</div><div class="line">       <span class="comment">// Get String by connected</span></div><div class="line">       String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">       System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collectors toList: [冷暖, 珊瑚, 细腻, 阳光, 阳光] , Conlletors Join Strings: 冷暖,珊瑚,细腻,阳光,阳光</div></pre></td></tr></table></figure></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"><span class="keyword">import</span> java.util.stream.IntStream;</div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Learn Java 8 Stream</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/25 22:16&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// Get Stream from file</span></div><div class="line">        System.out.println(<span class="string">"读取文件："</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Stream&lt;String&gt; file = Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</div><div class="line">            file.forEach(System.out::println);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Filter</span></div><div class="line">        String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</div><div class="line">        Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Distinct</span></div><div class="line">        System.out.println(<span class="string">"去重:"</span>);</div><div class="line">        Arrays.stream(strings).distinct().forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Limit</span></div><div class="line">        System.out.println(<span class="string">"截取:"</span>);</div><div class="line">        Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Skip</span></div><div class="line">        System.out.println(<span class="string">"跳过:"</span>);</div><div class="line">        Arrays.stream(strings).skip(<span class="number">2</span>).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Java 8 sorted</span></div><div class="line">        System.out.println(<span class="string">"排序："</span>);</div><div class="line">        <span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></div><div class="line">		Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">// Before Java 8 sorted</span></div><div class="line">        System.out.println(<span class="string">"java8以前排序："</span>);</div><div class="line">        List&lt;String&gt; list1 = Arrays.asList(strings);</div><div class="line">        list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o1.compareTo(o2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</div><div class="line"></div><div class="line">        <span class="comment">//Handle map</span></div><div class="line">        System.out.println(<span class="string">"map 映射："</span>);</div><div class="line">        Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">//Match</span></div><div class="line">        Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">        System.out.println(result1);</div><div class="line"></div><div class="line">        Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">        System.out.println(reslut2);</div><div class="line">        <span class="comment">//findAny to find anyone</span></div><div class="line">        Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</div><div class="line">        System.out.println(getResult);</div><div class="line">        System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</div><div class="line"></div><div class="line">        <span class="comment">//统计</span></div><div class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div><div class="line"></div><div class="line">        <span class="comment">//归约</span></div><div class="line">        <span class="comment">//第一种方法求和</span></div><div class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</div><div class="line">        System.out.println(connectStrings);</div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法求和</span></div><div class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</div><div class="line">        System.out.println(connectStrings1);</div><div class="line"></div><div class="line">        <span class="comment">//Collectors 集合归约</span></div><div class="line">        <span class="comment">//  toList</span></div><div class="line">        List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</div><div class="line">        <span class="comment">// Get String by connected</span></div><div class="line">        String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">        System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</div><div class="line"></div><div class="line">        String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line">        <span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></div><div class="line">        IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</div><div class="line">        <span class="comment">//使用对应的 Optional 接收</span></div><div class="line">        OptionalInt optionalNumber = intStream.max();</div><div class="line">        <span class="comment">// 取值，给默认值 0，为空结果为0</span></div><div class="line">        System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 拼接字符串</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s1 参数1</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s2 参数2</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s1 + s2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;流（Stream）&quot;&gt;&lt;a href=&quot;#流（Stream）&quot; class=&quot;headerlink&quot; title=&quot;流（Stream）&quot;&gt;&lt;/a&gt;流（Stream）&lt;/h3&gt;&lt;p&gt;流是java 8 中新引入的特性，用来处理集合中的数据，Stream 是一个来自数据源的元素队列并支持聚合操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 中 Stream 不会存储元素。&lt;/li&gt;
&lt;li&gt;数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>珍惜</title>
    <link href="http://blog.wuwii.com/cherish-her.html"/>
    <id>http://blog.wuwii.com/cherish-her.html</id>
    <published>2017-10-24T14:08:03.000Z</published>
    <updated>2017-10-25T03:05:42.771Z</updated>
    
    <content type="html"><![CDATA[<p>话说开会的时候，总是有人心不在焉的，没错，那个人就是我，开会随手刷刷手机，看到这个文章的不要学我哈。<br>无意中看到一个句子。<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1508832180808&amp;di=277bb0ccfa259488634243e76d0ca4bd&amp;imgtype=0&amp;src=http%3A%2F%2Fuploadfile.bizhizu.cn%2F2014%2F0529%2F20140529021838977.jpg" alt="img"><br><a id="more"></a></p>
<p>其实人生的路很漫长<br>在这条人生的路上<br>你会遇到很多的人<br>很多的风景<br>当你错过以后<br>你以为人生就已经结束了<br>实际上<br>没有<br>因为它还在继续<br>你还会遇到更多的人<br>更多的风景<br>也许下一个人才是真正适合你的人</p>
<p>可是你又没跟那个人在一起过<br>你怎么知道她不是最适合你的人呢<br>你错过了她<br>你以为你会碰到更好的人<br>可是事实证明呢<br>你到现在还是单着<br>这说明了什么<br>说明了你在潜意识里<br>你觉得她是最值得珍惜的<br>是最值得你去爱的<br>最值得你去关怀的<br>你所错过的<br>才是真正美丽的风景</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--宁财神 《龙门镖局》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说开会的时候，总是有人心不在焉的，没错，那个人就是我，开会随手刷刷手机，看到这个文章的不要学我哈。&lt;br&gt;无意中看到一个句子。&lt;br&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1508832180808&amp;amp;di=277bb0ccfa259488634243e76d0ca4bd&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fuploadfile.bizhizu.cn%2F2014%2F0529%2F20140529021838977.jpg&quot; alt=&quot;img&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="那些很美的句子" scheme="http://blog.wuwii.com/categories/%E9%82%A3%E4%BA%9B%E5%BE%88%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
    
    
      <category term="桔子" scheme="http://blog.wuwii.com/tags/%E6%A1%94%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>Programmer&#39;s Day</title>
    <link href="http://blog.wuwii.com/programmer-day.html"/>
    <id>http://blog.wuwii.com/programmer-day.html</id>
    <published>2017-10-23T13:18:03.000Z</published>
    <updated>2017-10-24T05:42:32.512Z</updated>
    
    <content type="html"><![CDATA[<p>今天议论关注最多的就是1024，程序猿节日，可怕，什么时候程序猿都有节日了。。。</p>
<p>当然公司明天还有活动，很高兴有这么个节日，作为一个单身狗，最讨厌的估计就是加班，尼玛，单身狗还害怕什么加班，太没志气了，怎么能跟那些秀恩爱的去比高低，逃。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoOT</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(</div><div class="line">                <span class="string">"1024不加班的理由："</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"太冷，我选择睡觉！！！   "</span>,</div><div class="line">                <span class="string">"                    ☽   "</span>,</div><div class="line">                <span class="string">"   //   /￣'- 、_      "</span>,</div><div class="line">                <span class="string">"  // ℂ/ &lt;_/ _____/    "</span>,</div><div class="line">                <span class="string">"  ￣￣￣￣￣￣￣     "</span></div><div class="line">        );</div><div class="line">        list.stream().forEach(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个是今年自己写在 华为云 论坛上的一个回帖，当然是为了福利的，其实我是为了混个华为P10，实在不行，给个鼠标垫算了，原谅了。</p>
<p>另外附几张论坛好玩的几个图（侵删）</p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1822231n1o90ucduykj2nw.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1537080ctfww4nlkmentap.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/142101oq4bb8bljw4dumuv.jpg" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1104512bbyq3whcaxxal26.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/102951fa586egackcjw4xl.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/22/200553auslkcexi5ohlhua.png" alt="image"></p>
<p>就发这么多了，，该洗洗睡了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天议论关注最多的就是1024，程序猿节日，可怕，什么时候程序猿都有节日了。。。&lt;/p&gt;
&lt;p&gt;当然公司明天还有活动，很高兴有这么个节日，作为一个单身狗，最讨厌的估计就是加班，尼玛，单身狗还害怕什么加班，太没志气了，怎么能跟那些秀恩爱的去比高低，逃。&lt;/p&gt;
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>java 中lambda表达式的使用</title>
    <link href="http://blog.wuwii.com/java-lambda.html"/>
    <id>http://blog.wuwii.com/java-lambda.html</id>
    <published>2017-10-20T09:18:03.000Z</published>
    <updated>2017-10-20T09:34:47.810Z</updated>
    
    <content type="html"><![CDATA[<p>java 中<code>lambda</code>表达式 实在 java 8 版本后新加入的特性，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>
<p><strong>特征:</strong></p>
<ul>
<li><strong>可选类型声明</strong>：不需要声明参数类型，编译器可以统一识别参数值。</li>
<li><strong>可选的参数圆括号</strong>：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
<li><strong>可选的大括号</strong>：如果主体包含了一个语句，就不需要使用大括号。</li>
<li><strong>可选的返回关键字</strong>：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。<a id="more"></a>
总结语法就是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(params) -&gt; expression</div><div class="line">(params) -&gt; statement</div><div class="line">(params) -&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<h4 id="使用lambda表达式替换匿名类"><a href="#使用lambda表达式替换匿名类" class="headerlink" title="使用lambda表达式替换匿名类"></a>使用lambda表达式替换匿名类</h4><p>以 Runnable 为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before java8</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></div><div class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></div><div class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></div><div class="line"><span class="comment">     * thread.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></div><div class="line"><span class="comment">     * take any action whatsoever.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> Thread#run()</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before jdk 1.8;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line"><span class="comment">// after jdk 1.8</span></div><div class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"after jdk 1.8;"</span>)).start();</div></pre></td></tr></table></figure></p>
<p>执行结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">before jdk 1.8;</div><div class="line">after jdk 1.8;</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式-迭代"><a href="#使用lambda表达式-迭代" class="headerlink" title="使用lambda表达式 迭代"></a>使用lambda表达式 迭代</h4><p>以 forEach 为例，迭代所有对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">        <span class="comment">//before java8</span></div><div class="line">        <span class="keyword">for</span> (String s : list1) &#123;</div><div class="line">            System.out.println(<span class="string">"before: "</span> + s);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//after</span></div><div class="line">        list1.forEach(n -&gt; System.out.println(<span class="string">"after: "</span> + n));</div><div class="line">        <span class="comment">//list1.forEach(System.out::println); //可以打印，方法引用由::双冒号操作符标示，</span></div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">before: spring</div><div class="line">before: summer</div><div class="line">before: autumn</div><div class="line">before: winter</div><div class="line">after: spring</div><div class="line">after: summer</div><div class="line">after: autumn</div><div class="line">after: winter</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式和函数式接口Predicate"><a href="#使用lambda表达式和函数式接口Predicate" class="headerlink" title="使用lambda表达式和函数式接口Predicate"></a>使用lambda表达式和函数式接口Predicate</h4><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用 java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。下面是Java 8 Predicate 的例子，展示了过滤集合数据的多种常用方法。Predicate接口非常适用于做过滤。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">        System.out.println(<span class="string">"Print which end with n: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).endsWith(<span class="string">"n"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print which start with s: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).startsWith(<span class="string">"s"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print whose length greater than 6: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).length() &gt; <span class="number">6</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print all:"</span>);</div><div class="line">        filter(list1, str -&gt; <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print none:"</span>);</div><div class="line">        filter(list1, str -&gt; <span class="keyword">false</span>);</div><div class="line">        </div><div class="line">        </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span> <span class="params">(List list, Predicate condition)</span> </span>&#123;</div><div class="line">        list.stream().</div><div class="line">                filter(s -&gt; condition.test(s)).</div><div class="line">                forEach(s -&gt; System.out.println(s));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Print which end with n: </div><div class="line">autumn</div><div class="line">Print which start with s: </div><div class="line">spring</div><div class="line">summer</div><div class="line">Print whose length greater than 6: </div><div class="line">Print all:</div><div class="line">spring</div><div class="line">summer</div><div class="line">autumn</div><div class="line">winter</div><div class="line">Print none:</div></pre></td></tr></table></figure></p>
<p>例外 filter 还提供逻辑操作符AND和OR的方法，名字叫做and()、or()和xor()，用于将传入 filter() 方法的条件合并起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">Predicate&lt;String&gt; startWithS = s -&gt; s.startsWith(<span class="string">"s"</span>);</div><div class="line">        Predicate&lt;String&gt; endWithG = g -&gt; g.endsWith(<span class="string">"g"</span>);</div><div class="line">        list1.stream()</div><div class="line">                .filter(startWithS.and(endWithG))</div><div class="line">                .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式的Map和Reduce"><a href="#使用lambda表达式的Map和Reduce" class="headerlink" title="使用lambda表达式的Map和Reduce"></a>使用lambda表达式的Map和Reduce</h4><p>给list 中 每个数据 增加 50%<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</div><div class="line">       <span class="keyword">for</span> (Integer num : list2) &#123;</div><div class="line">           Double result = num + num * <span class="number">0.5</span>;</div><div class="line">           System.out.println(result);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       list2.stream()</div><div class="line">               .map(num -&gt; num + num * <span class="number">0.5</span>)</div><div class="line">               .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">150.0</div><div class="line">300.0</div><div class="line">450.0</div><div class="line">600.0</div><div class="line">150.0</div><div class="line">300.0</div><div class="line">450.0</div><div class="line">600.0</div></pre></td></tr></table></figure></p>
<p>计算一个list 每个值加上 50%后的和<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</div><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Integer num : list2) &#123;</div><div class="line">            Double result = num + num * <span class="number">0.5</span>;</div><div class="line">            total += result;</div><div class="line">            System.out.println(total);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        total = list2.stream()</div><div class="line">                .map(num -&gt; num + num * <span class="number">0.5</span>)</div><div class="line">                .reduce((sum, result) -&gt; sum + result).get();</div><div class="line">        System.out.println(total);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1500.0</div><div class="line">1500.0</div></pre></td></tr></table></figure></p>
<p>map将集合类（例如列表）元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。</p>
<h4 id="通过过滤创建一个String列表"><a href="#通过过滤创建一个String列表" class="headerlink" title="通过过滤创建一个String列表"></a>通过过滤创建一个String列表</h4><p> 通过过滤创建一个新的字符串列表，每个字符串长度大于2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="comment">// 创建一个字符串列表，每个字符串长度大于2</span></div><div class="line">        List&lt;String&gt; filtered = list3.stream().filter(x -&gt; x.length()&gt; <span class="number">2</span>).collect(Collectors.toList());</div><div class="line">        System.out.printf(<span class="string">"Original List : %s, filtered list : %s %n"</span>, list3, filtered);</div></pre></td></tr></table></figure></p>
<h4 id="对列表的每个元素应用函数"><a href="#对列表的每个元素应用函数" class="headerlink" title="对列表的每个元素应用函数"></a>对列表的每个元素应用函数</h4><p>对list3 的每个元素转换成大写，并用逗号连接起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</div><div class="line">String string = list3.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">        System.out.printf(<span class="string">"Original List : %s, After String : %s %n"</span>, list3, string);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [abc, def, hi, hello], After String : ABC,DEF,HI,HELLO</div></pre></td></tr></table></figure></p>
<h4 id="复制不同的值，创建一个子列表"><a href="#复制不同的值，创建一个子列表" class="headerlink" title="复制不同的值，创建一个子列表"></a>复制不同的值，创建一个子列表</h4><p>如何利用流的 distinct() 方法来对集合进行去重。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        List&lt;Integer&gt; distinctList = list4.stream().map( i -&gt; i * i).distinct().collect(Collectors.toList());</div><div class="line">        System.out.printf(<span class="string">"Original List : %s,  Square Reslut : %s %n"</span>, list4, distinctList);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [1, 2, 3, 4, 1],  Square Reslut : [1, 4, 9, 16]</div></pre></td></tr></table></figure></p>
<h4 id="计算集合元素的最大值、最小值、总和以及平均值"><a href="#计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="计算集合元素的最大值、最小值、总和以及平均值"></a>计算集合元素的最大值、最小值、总和以及平均值</h4><p>IntStream、LongStream 和 DoubleStream 等流的类中，有个非常有用的方法叫做 summaryStatistics() 。可以返回 IntSummaryStatistics、LongSummaryStatistics 或者 DoubleSummaryStatistic s，描述流中元素的各种摘要数据。</p>
<p>我们用这个方法来计算列表的最大值和最小值。它也有 getSum() 和 getAverage() 方法来获得列表的所有元素的总和及平均值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest number in List : 4</div><div class="line">Lowest  number in List : 1</div><div class="line">Sum of all numbers : 11</div><div class="line">Average of all numbers : 2.2</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>lambda 表达式只能引用 <code>final</code> 或 final 局部变量，这就是说不能在 lambda 内部<code>修改</code>定义在域外的变量，否则会编译错误。</li>
<li>Lambda表达式在Java中又称为闭包或匿名函数，</li>
<li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li>
<li>如果在 lambda 表达式 内部不能调用参数方法的引用，需要声明参数类型。</li>
</ol>
<p><strong>参考博客：</strong> <a rel="external nofollow" target="_blank" href="http://www.importnew.com/16436.html">http://www.importnew.com/16436.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java 中&lt;code&gt;lambda&lt;/code&gt;表达式 实在 java 8 版本后新加入的特性，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特征:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可选类型声明&lt;/strong&gt;：不需要声明参数类型，编译器可以统一识别参数值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选的参数圆括号&lt;/strong&gt;：一个参数无需定义圆括号，但多个参数需要定义圆括号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选的大括号&lt;/strong&gt;：如果主体包含了一个语句，就不需要使用大括号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选的返回关键字&lt;/strong&gt;：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="lambda" scheme="http://blog.wuwii.com/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>Intellij Idea 的maven 项目设置 默认java编译版本</title>
    <link href="http://blog.wuwii.com/compiler-version.html"/>
    <id>http://blog.wuwii.com/compiler-version.html</id>
    <published>2017-10-20T03:28:03.000Z</published>
    <updated>2017-10-20T09:23:14.938Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Intellij Idea 创建maven 项目后，每次 reimport 都会回归默认 java 版本 1.5 ，每次都要重新设置版本，很麻烦。下面的方法同样适用Eclipse。<br><a id="more"></a></p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>修改该项目的pom.xml , 只对该项目有效。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">maven.compiler.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.compiler.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>保存，eclipse 是Update maven 项目， Intellij  reimport。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>修改 maven 的 配置文件 <code>settings.xml</code>，在<code>profiles</code>节点中加入自己的Jdk版本：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>这个方法对于所有使用这个maven 插件的项目都有效。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Intellij Idea 创建maven 项目后，每次 reimport 都会回归默认 java 版本 1.5 ，每次都要重新设置版本，很麻烦。下面的方法同样适用Eclipse。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://blog.wuwii.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>别太懂事了</title>
    <link href="http://blog.wuwii.com/sensible.html"/>
    <id>http://blog.wuwii.com/sensible.html</id>
    <published>2017-10-19T14:25:03.000Z</published>
    <updated>2017-10-20T00:48:26.059Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，又想起了她，自从上次见过她了，心里总是那么时刻的泛起她的影子吧，虽然说好久没见再相见，但是彼此应该没什么深刻的记忆吧，而且排斥的我很厉害，这让我心疼得厉害，到底是什么成为这样的她，不想懂了。</p>
<p>或许吧，是以前一个人久了，什么事都得自己撑着吧，什么事情都得面对，她也是一个很拼的女孩子，什么事情都得抢在前头吧，最后了，有了委屈自己忍，有了眼泪只好自己吞。总是在乎别人的感受，然而不知道自己会有多疼的人，就是这样太懂事的人吧。明明她也很脆弱，无关外表，还是心里，却总要装作坚强的样子，明明她也有时候表现的无所适从的害怕，却还要表现得无所畏惧的淡然。可是，在别人面前，她一直装作那么懂事，别人都不相信她会难过，会流泪了吧。但是，她不这么认为的，相信自己能够修复所有的伤疤，可以完成所有的事情。</p>
<p>但是，太懂事的人，常常会不太幸福吧，常常顾及别人得感受，不懂得去拒绝别人，更不忍心看别人难过，宁可自己委屈，宁可自己疲惫，也不想给任何人带来麻烦，这样真的会活得很累很累，考虑得太多，却总是忽略了自己。这也是我为什么总是说好担心你呀。</p>
<p>别太懂事了，不要太善良了，给别人一次心疼自己的机会，卸下面具，天 塌下来了也不用自己去抗；别再逞强了，你也值得被人疼人。别把所有的事情都揽到自己身上，你只是你自己，不需要活成别人，也可以不管不顾一切，活成自己的模样。</p>
<p>加油，姑娘。真希望你能好好的生活下去，忘了一切烦恼。</p>
<p>晚安。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉，又想起了她，自从上次见过她了，心里总是那么时刻的泛起她的影子吧，虽然说好久没见再相见，但是彼此应该没什么深刻的记忆吧，而且排斥的我很厉害，这让我心疼得厉害，到底是什么成为这样的她，不想懂了。&lt;/p&gt;
&lt;p&gt;或许吧，是以前一个人久了，什么事都得自己撑着吧，什么事情都
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 上安装Hadoop V 2.8.1集群及配置</title>
    <link href="http://blog.wuwii.com/linux-hadoop.html"/>
    <id>http://blog.wuwii.com/linux-hadoop.html</id>
    <published>2017-10-19T08:08:03.000Z</published>
    <updated>2017-10-25T08:52:30.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。<br> Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。<br>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。(百科)</p>
</blockquote>
<p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98010877b33533faf5b6942890e89a22/3c6d55fbb2fb4316ecfbfb0322a4462308f7d3e7.jpg" alt="image"></p>
<a id="more"></a>
<h2 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h2><p>本次使用的是2.8.1版本的Hadoop，官网地址<br><a rel="external nofollow" target="_blank" href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz">http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz</a></p>
<p>点击（不用进官网直接点这个链接就能下载）</p>
<p><a rel="external nofollow" target="_blank" href=" http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz "> http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz </a></p>
<h2 id="安装3个虚拟机并实现ssh免密码登录"><a href="#安装3个虚拟机并实现ssh免密码登录" class="headerlink" title="安装3个虚拟机并实现ssh免密码登录"></a>安装3个虚拟机并实现ssh免密码登录</h2><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>使用的Linux系统是CentOS 7 ，修改三台机器的Hosts，让它们能相互映射到，能ping t通<br>参考我的上一篇文章 </p>
<p><a href="http://blog.wuwii.com/linux-hostname.html">http://blog.wuwii.com/linux-hostname.html</a></p>
<p>添加Hosts，这是我的三台机器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.19.185  server1</div><div class="line">192.168.19.184  server2</div><div class="line">192.168.19.199  server3</div></pre></td></tr></table></figure></p>
<p>ping 结果都能ping 通<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># ping -c 4 server1</span></div><div class="line">PING server1 (192.168.19.185) 56(84) bytes of data.</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=1 ttl=64 time=0.536 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=2 ttl=64 time=0.388 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=3 ttl=64 time=0.309 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=4 ttl=64 time=0.368 ms</div><div class="line"></div><div class="line">--- server1 ping statistics ---</div><div class="line">4 packets transmitted, 4 received, 0% packet loss, time 3001ms</div><div class="line">rtt min/avg/max/mdev = 0.309/0.400/0.536/0.084 ms</div></pre></td></tr></table></figure></p>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>密钥三台机器都需要生成，就以一台 server1 机器为例</p>
<p>使用命令 <code>ssh-keygen -t rsa</code> 一路 enter<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ssh-keygen -t rsa</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </div><div class="line">Enter same passphrase again: </div><div class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">e0:ea:e3:5d:95:be:c5:9a:dc:90:99:22:d1:cf:99:49 root@server1</div><div class="line">The key<span class="string">'s randomart image is:</span></div><div class="line"><span class="string">+--[ RSA 2048]----+</span></div><div class="line"><span class="string">|                 |</span></div><div class="line"><span class="string">|                 |</span></div><div class="line"><span class="string">|      .          |</span></div><div class="line"><span class="string">|     . o   .     |</span></div><div class="line"><span class="string">|      o S E      |</span></div><div class="line"><span class="string">|     . . * O     |</span></div><div class="line"><span class="string">|    . . o % o    |</span></div><div class="line"><span class="string">|   ... o o B     |</span></div><div class="line"><span class="string">|   .o..   = .    |</span></div><div class="line"><span class="string">+-----------------+</span></div></pre></td></tr></table></figure></p>
<p>出现上面的 ，可以在本帐户的根目录看到一个 .ssh 文件夹 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment">#  ll -a</span></div><div class="line">总用量 68</div><div class="line">dr-xr-x---.  6 root root   256 10月 18 15:00 .</div><div class="line">dr-xr-xr-x. 20 root root  4096 10月 18 10:35 ..</div><div class="line">-rw-------.  1 root root  1456 8月  14 08:44 anaconda-ks.cfg</div><div class="line">-rw-------.  1 root root 24538 10月 18 10:35 .bash_history</div><div class="line">-rw-r--r--.  1 root root    18 12月 29 2013 .bash_logout</div><div class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bash_profile</div><div class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bashrc</div><div class="line">-rw-r--r--.  1 root root   100 12月 29 2013 .cshrc</div><div class="line">-rw-r--r--   1 root root   223 9月  27 10:47 dump.rdb</div><div class="line">drwxr-xr-x. 11 root root   270 8月  15 15:57 fastdfs</div><div class="line">drwxr-xr-x.  2 root root    40 8月  15 15:04 .oracle_jre_usage</div><div class="line">drwxr-----.  3 root root    19 8月  15 15:53 .pki</div><div class="line">-rw-------   1 root root   571 9月  27 16:58 .rediscli_history</div><div class="line">drwx------   2 root root    38 10月 18 14:56 .ssh</div><div class="line">-rw-r--r--.  1 root root   129 12月 29 2013 .tcshrc</div><div class="line">-rw-------   1 root root  7372 10月 18 11:35 .viminfo</div></pre></td></tr></table></figure>
<p>注意它是个隐藏的文件，我是用的是secureFx 显示隐藏文件，需要 视图 -&gt; 文件 勾选上就行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server1 .ssh]<span class="comment"># ll</span></div><div class="line">总用量 8</div><div class="line">-rw------- 1 root root 668 10月 18 15:12 id_rsa</div><div class="line">-rw-r--r-- 1 root root 602 10月 18 15:12 id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>打开 <code>/root/.ssh/id_rsa.pub</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server1 .ssh]# cat id_rsa.pub </div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</div></pre></td></tr></table></figure></p>
<p>查看到了我们生成的密钥成功了</p>
<p>然后我们把三个机器都生成密钥，然后把他们合并成一个文件创建一个<code>/root/.ssh/authorized_keys</code> 文件保存着。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171018152550.png" alt="image"></p>
<p>使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span></div></pre></td></tr></table></figure></p>
<p>其他机器的公共密钥也复制到到这个文件里来（补充，不要连着复制，上一行后面打个空格，再换行。）</p>
<p>所以最后是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@server1 .ssh]# vim authorized_keys</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFwe2pGEMWt+X0FXFPotOQrUAJFDOLflMjtwBIJxTSFBPQuVhoEtJHkacnpsPAtT4zOJxjieLOrsC/G5fKZVpSgYRwmMw6iobe3IsL5uElVfRYoO+HIr/BDep1imVFkmj0DTMUj0q+UYz3wiEaFQk4zh7Gas2qIdgyOtfSQcYN3T7qNh4dPDfdOrBIqZq/fP33UFDBgbUqGZUZhL6mHc8LRHo9+eby3ZPtiEudfeczvi3pI0Dcp0zX+WSuqPK/z47hBN2XlGMIDO2Ta5sAu9WfECe0WcxsPLOPsKPCRsakyMrYlnGk3hEQ9Ci1YsNKUX8j1RhBi3YLKsl5rjhQR67r root@server2</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFPaRkR/0i51MORrPVnsEZR60t7FZDmJ3DlhVKdt4crCHO+QhsHr5ZwbcLT/9vTBAdRoveuwHJreEO5MLnlcG0dxFjVDduip5M84zGjmKI1k7/tyeNT1bHUhoMWRAaDEk9RUx/rrYzR/DzHvkdXPwPK+uENFCFBo0RTEGxAMkrXkex7SFNITh8t48sto23D20v7O4A+h4Fbe4oiEjlFBeK6H+dJxZVqYE5Xof1Y4Nc0Xh0YfEg9rUT4BS1AdYWZB9ptVyuSzsbmBd1mve8GcR8cf0M75uSIovc3ww/z/sVpx+hluldhVN9wXyUtFZdWcbklJcq6oTMfejY7ISv2lKh root@server3</div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">&quot;authorized_keys&quot; [新] 5L, 1183C 已写入</div></pre></td></tr></table></figure></p>
<p>每个电脑都需要这个<code>/root/.ssh/authorized_keys</code>文件，所以直接把它复制到对应位置就行了。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171018152550.png" alt="image"></p>
<p><strong>注意</strong><br>我们需要给它们相应的权限，一般默认的就是这个权限，下面是root 用户的。<br><code>chmod 700 ~/.ssh</code> #注意：这两条权限设置特别重要，决定成败。<br><code>chmod 600 ~/.ssh/authorized_keys</code></p>
<p>测试使用ssh 密钥无密码登陆</p>
<p>首先测试下localhost ，看能否无密码登陆自己<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]# ssh localhost</div><div class="line">Last login: Thu Oct 19 09:01:34 2017 from 192.168.19.207</div><div class="line">[root@server1 ~]#</div></pre></td></tr></table></figure></p>
<p>演示下server2 电脑上进行登陆 server1 并进行操作，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># ssh server1</span></div><div class="line">The authenticity of host <span class="string">'server1 (192.168.19.185)'</span> can<span class="string">'t be established.</span></div><div class="line"><span class="string">ECDSA key fingerprint is bd:50:b8:e7:b3:69:ad:6c:14:6b:a9:fb:18:43:b9:c9.</span></div><div class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></div><div class="line"><span class="string">Warning: Permanently added '</span>server1,192.168.19.185<span class="string">' (ECDSA) to the list of known hosts.</span></div><div class="line"><span class="string">Last login: Wed Oct 18 16:46:53 2017 from server1</span></div><div class="line"><span class="string">[root@server1 ~]# exit</span></div><div class="line"><span class="string">logout</span></div><div class="line"><span class="string">Connection to server1 closed.</span></div></pre></td></tr></table></figure></p>
<p>之前配置 <code>authorized_keys</code> 搞了半天，虽然用了三行，但是后面没空格，导致 密钥不能使用，每次登陆还需要密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ssh server2</span></div><div class="line">root@server2<span class="string">'s password:</span></div></pre></td></tr></table></figure></p>
<p>没百度出来，自己最后卡了一个小时 恍然大悟，每行后面空出空格就好了。</p>
<p>在其余的电脑相互登陆试试，都能无密登陆，说明，配置成功。</p>
<p><strong>但是一定要注意的是，每次ssh登陆完成后，都要执行 <code>exit</code>，否则你的后续命令是在另外一台机器上执行的。</strong></p>
<h2 id="安装JDK-和Hadoop"><a href="#安装JDK-和Hadoop" class="headerlink" title="安装JDK 和Hadoop"></a>安装JDK 和Hadoop</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>三台机器都需要安装jdk，CentOS7 安装JDK参考 <a href="http://blog.wuwii.com/linux-jdk.html">http://blog.wuwii.com/linux-jdk.html</a></p>
<h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p>首先 三台机器都需要安装hadoop，都需要执行下面所有的操作。</p>
<h4 id="上载文件，并且解压"><a href="#上载文件，并且解压" class="headerlink" title="上载文件，并且解压"></a>上载文件，并且解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 opt]<span class="comment"># tar -xvf hadoop-2.8.1.tar.gz</span></div></pre></td></tr></table></figure>
<p>解压缩后得到<code>hadoop-2.8.1</code> 文件夹。</p>
<h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p>在/root 目录下新建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /root/hadoop</div><div class="line">mkdir /root/hadoop/tmp</div><div class="line">mkdir /root/hadoop/var</div><div class="line">mkdir /root/hadoop/dfs</div><div class="line">mkdir /root/hadoop/dfs/name</div><div class="line">mkdir /root/hadoop/dfs/data</div></pre></td></tr></table></figure></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>配置文件都在 解压后的文件夹 <code>hadoop-2.8.1/etc/hadoop</code> 下。</p>
<h5 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h5><p> 在configuration&gt;节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="修改-hadoop-env-sh文件"><a href="#修改-hadoop-env-sh文件" class="headerlink" title="修改 hadoop-env.sh文件"></a>修改 hadoop-env.sh文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hadoop-env.sh</code>文件<br>将<code>export JAVA_HOME=${JAVA_HOME}</code><br><strong>修改为：</strong><br><code>export JAVA_HOME=/usr/java/jdk1.8.0_144</code><br> <strong>说明：修改为自己的JDK路径和版本号</strong></p>
<h5 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hdfs-site.xml</code>文件，<br>在<configuration>节点内加入配置:</configuration></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明：dfs.permissions配置为false后，可以允许不要检查权限就生成dfs上的文件，方便倒是方便了，但是你需要防止误删除，请将它设置为true，或者直接将该property节点删除，因为默认就是true。</strong> </p>
<h5 id="新建并且修改mapred-site-xml"><a href="#新建并且修改mapred-site-xml" class="headerlink" title="新建并且修改mapred-site.xml"></a>新建并且修改mapred-site.xml</h5><p>在该版本中，有一个名为mapred-site.xml.template的文件，复制该文件，然后改名为mapred-site.xml，命令是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop]<span class="comment"># cp mapred-site.xml.template mapred-site.xml</span></div></pre></td></tr></table></figure></p>
<p>修改这个新建的mapred-site.xml文件，在<configuration>节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:49001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/var<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></configuration></p>
<h5 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h5><p> 修改<code>./hadoop-2.8.1/etc/hadoop/slaves</code>文件，将里面的localhost删除，添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server2</div><div class="line">server3</div></pre></td></tr></table></figure>
<h5 id="修改yarn-site-xml文件"><a href="#修改yarn-site-xml文件" class="headerlink" title="修改yarn-site.xml文件"></a>修改yarn-site.xml文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/yarn-site.xml</code> 文件，<br>在<configuration>节点内加入配置(注意了，内存根据机器配置越大越好):</configuration></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the applications manager interface in the RM.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The http address of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The https adddress of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the RM admin interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB,默认8182MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明：<code>yarn.nodemanager.vmem-check-enabled</code> 这个的意思是忽略虚拟内存的检查，如果你是安装在虚拟机上，这个配置很有用，配上去之后后续操作不容易出问题。如果是实体机上，并且内存够多，可以将这个配置去掉。</strong></p>
<h2 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h2><h3 id="在namenode上执行初始化"><a href="#在namenode上执行初始化" class="headerlink" title="在namenode上执行初始化"></a>在namenode上执行初始化</h3><p> 因为server1是namenode，server2和server3都是datanode，所以只需要对server1进行初始化操作，也就是对hdfs进行格式化。<br>进入到server1这台机器的/opt/hadoop-2.8.1/bin目录，执行初始化命令：<code>./hadoop namenode -format</code>  ，格式化一个新的分布式文件系统。<br>如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@server1 bin]<span class="comment"># cd /opt/hadoop-2.8.1/bin/                      </span></div><div class="line">[root@server1 bin]<span class="comment"># ./hadoop namenode -format                      </span></div><div class="line">DEPRECATED: Use of this script to execute hdfs <span class="built_in">command</span> is deprecated.</div><div class="line">Instead use the hdfs <span class="built_in">command</span> <span class="keyword">for</span> it.</div><div class="line"></div><div class="line">17/10/19 15:09:05 INFO namenode.NameNode: STARTUP_MSG: </div><div class="line">/************************************************************</div><div class="line">STARTUP_MSG: Starting NameNode</div><div class="line">STARTUP_MSG:   user = root</div><div class="line">STARTUP_MSG:   host = server1/192.168.19.185</div><div class="line">STARTUP_MSG:   args = [-format]</div><div class="line">STARTUP_MSG:   version = 2.8.1</div><div class="line">STARTUP_MSG:   classpath = /opt/hadoop-2.8.1/etc/hadoop:/opt/hadoop-2.8.1/share/</div></pre></td></tr></table></figure></p>
<p>执行完成，不报错，说明启动成功。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019151459.png" alt="image"></p>
<p>格式化成功后，可以在看到在<code>/root/hadoop/dfs/name/</code>目录多了一个current目录，而且该目录内有一系列文件。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019151635.png" alt="image"></p>
<h3 id="在namenode上执行启动命令"><a href="#在namenode上执行启动命令" class="headerlink" title="在namenode上执行启动命令"></a>在namenode上执行启动命令</h3><p>因为server1是namenode，server2和server3都是datanode，所以只需要再server1上执行启动命令即可。<br>进入到hserver1这台机器的<code>/opt/hadoop-2.8.1/sbin</code>目录，也就是执行命令：<br><code>cd /opt/hadoop/hadoop-2.8.0/sbin</code><br>执行初始化脚本，也就是执行命令：<br><code>./start-all.sh</code><br>第一次执行上面的启动命令，会需要我们进行交互操作，在问答界面上输入yes回车</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></div><div class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</div><div class="line">Starting namenodes on [server1]</div><div class="line">server1: namenode running as process 3609. Stop it first.</div><div class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</div><div class="line">server2: datanode running as process 17888. Stop it first.</div><div class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</div><div class="line">Starting secondary namenodes [0.0.0.0]</div><div class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</div><div class="line">starting yarn daemons</div><div class="line">resourcemanager running as process 3942. Stop it first.</div><div class="line">server3: starting nodemanager, logging to /opt/hadoop-2.8.1/logs/yarn-root-nodemanager-server3.out</div><div class="line">server2: nodemanager running as process 18038. Stop it first.</div><div class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</div><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></div><div class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</div><div class="line">Starting namenodes on [server1]</div><div class="line">server1: namenode running as process 3609. Stop it first.</div><div class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</div><div class="line">server2: datanode running as process 17888. Stop it first.</div><div class="line">Starting secondary namenodes [0.0.0.0]</div><div class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</div><div class="line">starting yarn daemons</div><div class="line">resourcemanager running as process 3942. Stop it first.</div><div class="line">server2: nodemanager running as process 18038. Stop it first.</div><div class="line">server3: starting no</div></pre></td></tr></table></figure>
<p>没报错，说明执行成功，之前我的server3 上的一个xml 配置错了，很明了的说出了错误的位置。  </p>
<h2 id="测试hadoop"><a href="#测试hadoop" class="headerlink" title="测试hadoop"></a>测试hadoop</h2><p>启动后，需要测试能使用，才能说明配置正确</p>
<p>首先需要关闭防火墙。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]# systemctl stop firewalld.service</div></pre></td></tr></table></figure>
<p>我们的namanode机器是server1，IP是192.168.19.185，直接在谷歌浏览器上输入到端口 50070，自动跳转到了overview页面 （dfshealth.html）<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019153415.png" alt="image"></p>
<p>继续；<br>测试 8088 端口 ：<br>自动跳转到了cluster页面<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019153453.png" alt="image"></p>
<p>在namenode机器上执行<code>jps</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># jps</span></div><div class="line">12469 ResourceManager</div><div class="line">12119 NameNode</div><div class="line">12313 SecondaryNameNode</div><div class="line">12730 Jps</div></pre></td></tr></table></figure></p>
<p>在datanode机器上执行<code>jps</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server3 hadoop-2.8.1]<span class="comment"># jps</span></div><div class="line">10776 NodeManager</div><div class="line">11114 Jps</div><div class="line">10635 DataNode</div></pre></td></tr></table></figure></p>
<p>这只能证明它们启动成功，还要看它们之间互相通信。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171025165042.png" alt="hadoop"><br>出现datanode 机器，通信成功。</p>
<p>配置完成。</p>
<p><strong>参考博客：</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/pucao_cug/article/details/71698903">http://blog.csdn.net/pucao_cug/article/details/71698903</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hadoop是一个由Apache基金会所开发的分布式系统基础架构。&lt;br&gt;用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。&lt;br&gt; Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。&lt;br&gt;Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。(百科)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98010877b33533faf5b6942890e89a22/3c6d55fbb2fb4316ecfbfb0322a4462308f7d3e7.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.wuwii.com/tags/linux/"/>
    
      <category term="Hadoop" scheme="http://blog.wuwii.com/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装JDK和环境变量的配置</title>
    <link href="http://blog.wuwii.com/linux-jdk.html"/>
    <id>http://blog.wuwii.com/linux-jdk.html</id>
    <published>2017-10-19T03:18:03.000Z</published>
    <updated>2017-10-19T03:18:40.443Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>系统环境：centos7</li>
<li>安装方式：rpm安装</li>
<li>版本：jdk1.8.0_144</li>
</ul>
<a id="more"></a>
<h4 id="首先查看电脑的-jdk"><a href="#首先查看电脑的-jdk" class="headerlink" title="首先查看电脑的 jdk"></a>首先查看电脑的 jdk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># java -version</span></div><div class="line">openjdk version <span class="string">"1.8.0_102"</span></div><div class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</div></pre></td></tr></table></figure>
<p>是默认安装的openjdk 不是我们需要的oracle 版本的，安装前需要卸载 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># rpm -qa | grep java</span></div><div class="line">javapackages-tools-3.4.1-11.el7.noarch</div><div class="line">java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</div><div class="line">java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">tzdata-java-2016g-2.el7.noarch</div><div class="line">java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</div><div class="line">java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">python-javapackages-3.4.1-11.el7.noarch</div><div class="line"></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps tzdata-java-2016g-2.el7.noarch</span></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e -nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span></div><div class="line">rpm: -nodeps: unknown option</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e -nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">rpm: -nodeps: unknown option</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">^[[A[root@server2 rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span></div></pre></td></tr></table></figure></p>
<p>最后查看卸载完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># java -version</span></div><div class="line">-bash: /usr/bin/java: No such file or directory</div></pre></td></tr></table></figure></p>
<h4 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h4><p>官网下载</p>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>我下载的是rpm 文件，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment"># rpm -ivh jdk-8u144-linux-x64.rpm </span></div><div class="line">Preparing...                          <span class="comment">################################# [100%]</span></div><div class="line">Updating / installing...</div><div class="line">   1:jdk1.8.0_144-2000:1.8.0_144-fcs  rpm                                  (  1%<span class="comment">################################# [100%]</span></div><div class="line">Unpacking JAR files...</div><div class="line">        tools.jar...</div><div class="line">        plugin.jar...</div><div class="line">        javaws.jar...</div><div class="line">        deploy.jar...</div><div class="line">        rt.jar...</div><div class="line">        jsse.jar...</div><div class="line">        charsets.jar...</div><div class="line">        localedata.jar...</div></pre></td></tr></table></figure></p>
<p>默认安装的是路径是 <code>/usr/java</code></p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>在 <code>/etc/profile</code> 文件中加入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/java/jdk1.8.0_144 PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/</div><div class="line">jre/lib/ext:<span class="variable">$JAVA_HOME</span>/lib/tools.jar <span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure>
<p>使生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment"># source /etc/profile</span></div><div class="line">-bash: jre/lib/ext:/usr/java/jdk1.8.0_144/lib/tools.jar: No such file or directory</div></pre></td></tr></table></figure></p>
<p>查看系统环境状态path 是否生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment">#  echo $PATH </span></div><div class="line">/usr/java/jdk1.8.0_144/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</div></pre></td></tr></table></figure></p>
<p>完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;系统环境：centos7&lt;/li&gt;
&lt;li&gt;安装方式：rpm安装&lt;/li&gt;
&lt;li&gt;版本：jdk1.8.0_144&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.wuwii.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>20171018</title>
    <link href="http://blog.wuwii.com/20171018.html"/>
    <id>http://blog.wuwii.com/20171018.html</id>
    <published>2017-10-18T13:53:03.000Z</published>
    <updated>2017-10-19T00:48:38.105Z</updated>
    
    <content type="html"><![CDATA[<p>最近看她的空间留言，写了又删，删了又写，心里也和不是滋味，现在一想起她，就想到昨天见到第一眼她那种憔悴的面容，真是令人疼惜。我想可能真的不应该去见她吧，弄得现在都没能说上两句话，可能是我太自私了点，打破了一点存留下的美好吧。</p>
<p>最近脑经确实有点炸裂，确实不怎么敢再去看她的空间了，不想再去看那种互相残忍的伤害的局面，不知道他们心里怎么想的，我根本就不想明白，明白的越多，失望估计也就越大了。突然想起，以前那么长时间公司有网，有wifi 也要强忍着不上QQ 不看手机， 就是怕突然看到她的动态，就像一下子惊起梦中的我，然后开始梦游，梦游开始不知觉中触碰各种神经，幻想着有人来刺伤自己。</p>
<p>自从昨天打通了她的手机，今天就无时无刻的想起要去给她拨号过去，问下，你怎么现在再干嘛，过得怎么样了。想着，还是算了，昨天她见到我那种惊慌失措的样子，是真的可爱极了，她一直说她很忙，口中支支吾吾的说还有什么事情没做完。我也是那种慢热的人，做事总是顾及其他，想想还是放下，生怕打扰她，弄不好什么时候又要拉黑了。</p>
<p>想着今晚再打过去吧，不论对错，或许，相见不如怀念，至少能不必再给她带来更多的压力，我想我这个人根本就读不懂女人的心吧，就是直嘛，也好，不要去想那些隐喻，也不要去有那些烦恼，姑且就将自己的快乐带给她人。</p>
<p>既然她想做个坚强的人，就希望她永远做个坚强的女人吧，不要轻易的被击倒。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看她的空间留言，写了又删，删了又写，心里也和不是滋味，现在一想起她，就想到昨天见到第一眼她那种憔悴的面容，真是令人疼惜。我想可能真的不应该去见她吧，弄得现在都没能说上两句话，可能是我太自私了点，打破了一点存留下的美好吧。&lt;/p&gt;
&lt;p&gt;最近脑经确实有点炸裂，确实不怎么敢
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 上永久修改hostname</title>
    <link href="http://blog.wuwii.com/linux-hostname.html"/>
    <id>http://blog.wuwii.com/linux-hostname.html</id>
    <published>2017-10-18T03:08:03.000Z</published>
    <updated>2017-10-18T03:18:43.540Z</updated>
    
    <content type="html"><![CDATA[<p>由于要做Hadoop集群，需要修改系统的<code>hostname</code> 做一个映射，hostname 命令只能临时修改，重启就会失效，为了有效性，所以需要永久修改系统的hostname。</p>
<p>百度了下，网上都是说修改 <code>/etc/sysconfig/network</code> 配置文件，修改<code>hostname</code><br>参数，reboot 重启后也生效，然而我这样做了并没有生效，而且我打开这个配置文件，并没有Hostname 参数，完全是自己后来加上去的，它里面只有一句话 <code># Created by anaconda</code>。<br><a id="more"></a></p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="临时生效"><a href="#临时生效" class="headerlink" title="临时生效"></a>临时生效</h5><p>使用 <code>hostname</code> 命令 ，hostname <new hostname="">，系统重启后失效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># hostname</span></div><div class="line">localhost.localdomain</div><div class="line">[root@localhost ~]<span class="comment"># hostname server1</span></div><div class="line">[root@localhost ~]<span class="comment"># hostname</span></div><div class="line">server1</div><div class="line">[root@localhost ~]<span class="comment">#</span></div></pre></td></tr></table></figure></new></p>
<p>也可以直接cat /proc/sys/kernel/hostname查看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat /proc/sys/kernel/hostname</span></div><div class="line">server1</div></pre></td></tr></table></figure></p>
<p><code>hostname newname</code> 即要设置的新的hostname，运行后立即生效，但是在系统重启后会丢失所做的修改，如果要永久更改系统的hostname，就要修改相关的设置文件。</p>
<h5 id="永久更改Linux的hostname"><a href="#永久更改Linux的hostname" class="headerlink" title="永久更改Linux的hostname"></a>永久更改Linux的hostname</h5><p>man hostname里有这么一句话，</p>
<blockquote>
<p>The host name is usually set once at system startup in<br>/etc/rc.d/rc.inet1 or /etc/init.d/boot (normally by reading the<br>contents of a file which contains the host name, e.g. /etc/hostname).”</p>
</blockquote>
<p>RedHat里没有这个文件，而是由/etc/rc.d/rc.sysinit这个脚本负责设置系统的hostname，它读取/etc/sysconfig/network这个文本文件，RedHat的hostname就是在这个文件里设置。</p>
<p>所以，如果要永久修改RedHat的hostname，就修改/etc/sysconfig/network文件，将里面的HOSTNAME这一行修改成 HOSTNAME=NEWNAME，其中NEWNAME就是你要设置的hostname。</p>
<p><strong>Debian发行版的hostname的配置文件是/etc/hostname。</strong></p>
<p>修该配置文件后，重启系统就会读取配置文件设置新的hostname。</p>
<p>我想我就是 Debian发行版 吧 执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/hostname </span></div><div class="line">localhost.localdomain</div></pre></td></tr></table></figure></p>
<p>果然是这里，直接修改，保存，退出，重启。<br>再去查看Hostname<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># hostname</span></div><div class="line">server1</div><div class="line">[root@server1 ~]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>修改成功</p>
<h4 id="hostname与-etc-hosts的关系"><a href="#hostname与-etc-hosts的关系" class="headerlink" title="hostname与/etc/hosts的关系"></a>hostname与/etc/hosts的关系</h4><p>很过人一提到更改hostname首先就想到修改/etc/hosts文件，认为hostname的配置文件就是/etc/hosts。其实不是的。</p>
<p>hosts文件的作用相当如DNS，提供IP地址到hostname的对应。</p>
<p>早期的互联网计算机少，单机hosts文件里足够存放所有联网计算机。</p>
<p>不过随着互联网的发展，这就远远不够了。于是就出现了分布式的DNS系统。由DNS服务器来提供类似的IP地址到域名的对应。具体可以man hosts。</p>
<p><strong>Linux系统在向DNS服务器发出域名解析请求之前会查询/etc/hosts文件，如果里面有相应的记录，就会使用hosts里面的记录。<code>/etc/hosts</code>文件通常里面包含这一条记录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1    localhost.localdomain   localhost</div></pre></td></tr></table></figure></p>
<p>hosts文件格式是一行一条记录，分别是IP地址 <code>hostname aliases</code>，三者用空白字符分隔，<code>aliases</code>可选。</p>
<p><strong>127.0.0.1到localhost这一条建议不要修改，因为很多应用程序会用到这个，比如sendmail，修改之后这些程序可能就无法正常运行。</strong><br>在<code>/etc/hosts</code> 添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.19.185  server1</div><div class="line">192.168.19.184  server2</div></pre></td></tr></table></figure></p>
<p>ping server2 能ping 通说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ping server2       </span></div><div class="line">PING server2 (192.168.19.184) 56(84) bytes of data.</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=1 ttl=64 time=0.421 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=2 ttl=64 time=0.602 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=3 ttl=64 time=0.304 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=4 ttl=64 time=1.10 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=5 ttl=64 time=0.545 ms</div></pre></td></tr></table></figure></p>
<p>还有一个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# hostname</div><div class="line">localhost.localdomain</div><div class="line">[root@localhost ~]# vim /etc/hosts</div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">192.168.19.199  server3</div></pre></td></tr></table></figure></p>
<p>重启系统后发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server3 ~]# hostname</div><div class="line">server3</div><div class="line">[root@server3 ~]#</div></pre></td></tr></table></figure></p>
<p>hostname 被修改了</p>
<p>在 <code>/etc/rc.d/rc.sysinit</code> 这个启动脚本里发现了问题的所在。<br>rc.sysinit文件里一开始就设置了hostname。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -f /etc/sysconfig/network ]; <span class="keyword">then</span></div><div class="line">. /etc/sysconfig/network</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$HOSTNAME</span>"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"(none)"</span> ]; <span class="keyword">then</span></div><div class="line">HOSTNAME=localhost</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<p>确实使用了<code>/etc/sysconfig/network</code> 里的hostname值。不过后面还有一段关于设置hostname的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ipaddr=</div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"localhost"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"localhost.localdomain"</span> ]</div><div class="line">; <span class="keyword">then</span></div><div class="line">ipaddr=$(ip addr show to 0/0 scope global | awk <span class="string">'/[[:space:]]inet</span></div><div class="line"><span class="string">/ &#123; print gensub("/.*","","g",$2) &#125;'</span>)</div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$ipaddr</span>"</span> ]; <span class="keyword">then</span></div><div class="line"><span class="built_in">eval</span> $(ipcalc -h <span class="variable">$ipaddr</span> 2&gt;/dev/null)</div><div class="line">hostname <span class="variable">$&#123;HOSTNAME&#125;</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>脚本判断hostname是否为localhost或者localhost.localdomain，如果是的话，将会使用接口IP地址对应的 hostname来重新设置系统的hostname。问题就出在这里，我的/etc/sysconfig/network 默认的hostname是 localhost.localdomain，它的IP是192.168.19.199，而/etc/hosts里有192.168.19.199的记录。 于是就用192.168.19.199这条记录来替换了hostname。</p>
<p>估计这也是很多人将/etc/hosts误以为是hostname的配置文件的原因。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>查看hostname : hostname</li>
<li>临时修改: hostname <new hostname=""></new></li>
<li>vim /etc/hosts 修改 hostname 参数为 newname</li>
<li>vim /etc/sysconfig/network 修改 hostname 参数为 newname</li>
</ol>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/yangshangwei/article/details/52878530">http://blog.csdn.net/yangshangwei/article/details/52878530</a>   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要做Hadoop集群，需要修改系统的&lt;code&gt;hostname&lt;/code&gt; 做一个映射，hostname 命令只能临时修改，重启就会失效，为了有效性，所以需要永久修改系统的hostname。&lt;/p&gt;
&lt;p&gt;百度了下，网上都是说修改 &lt;code&gt;/etc/sysconfig/network&lt;/code&gt; 配置文件，修改&lt;code&gt;hostname&lt;/code&gt;&lt;br&gt;参数，reboot 重启后也生效，然而我这样做了并没有生效，而且我打开这个配置文件，并没有Hostname 参数，完全是自己后来加上去的，它里面只有一句话 &lt;code&gt;# Created by anaconda&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.wuwii.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>20171017</title>
    <link href="http://blog.wuwii.com/20171017.html"/>
    <id>http://blog.wuwii.com/20171017.html</id>
    <published>2017-10-17T14:53:03.000Z</published>
    <updated>2017-10-24T09:54:44.208Z</updated>
    
    <content type="html"><![CDATA[<p>我想我是个固执的人吧，今天上午看到你跟我说她胃疼，最终还是下定决心，去学校见见她吧。</p>
<p>中午下班跟经理打声招呼说下午晚点来，得到回应马上就出发了，第一站是来到药店帮忙询问下暖胃的药吧，平时自己吃过的拿吧，外加一盒消炎的。</p>
<p>我到了学校，我感觉到我已经怂了，好多年没见她了，能把她叫出来吗，经历一段波折，通过手机还是成功约出了她，最终在人海的广场上看到了她，第一眼看上去她看起来憔悴了好多，人也是超级的瘦弱，心中都是一阵疼痛，这么一段时间，人都成什么样子了，这么突然的见面，在这种场合，都有些紧张吧，曾经说，最喜欢看的就是她的眼睛了，现在突然不敢看了，是内心的愧疚吧。</p>
<p>在遇见她的时候，感觉到内心好像充满了惊喜，又有点害怕马上消失，我想是我真的还没准备好，自己现在还是像以前一样的差劲，不敢怎么看她，但是就是这么恰巧，她就这么的一直住在我心里。</p>
<p>她就这样在前面走着，我就在旁边跟着，真是个大傻蛋啊，但是我当时真的什么也想不到说什么了，因为脑子想的都是她，杂乱到无法思考我是来干嘛的，怎么聊下去。说了点心里话，她却一直浅浅的回应，就像手足无措的孩子一样，人还往树上撞，我是超级的难受啊，这样的人怎么去照顾好自己，真的想过去抓住她的手，跟她说，跟着我吧。期间问了她以后想去哪，她说哪里工资高就去哪，我问，你不是那种缺钱的人吧；她回答得那么快，生活开支很高的，我明白她，其实她是个很节俭的人，没什么攀比的，只是想让身边的人过得更好些吧，却一直在逞强着，难受。我随口提了下为什么会留在武汉吧，以前对她说过，她大概忘了，我也不想再提了，或许，很难受，即使不难受，也没人敢承诺一辈子能在一个地方工作的，承诺太多，都是废话了，再自己没信心办好一件事的时候，再也不会去承诺了，我只是轻轻的告诉自己，以后跟着你了。说了下以前高中的时候，我想我可能是个固执的人，这么多年都没能忘记她，内心都是你，这个姑娘，真是个骗子，居然跟我小声说可能不合适。。。当然说的好多我走的时候都想不起来。。有点情绪了。</p>
<p>最后很简单，她送我离开了，走的时候看着她，她太害羞了，她见到我那种惊慌失措的样子，是真的可爱极了，她一直说她很忙，口中支支吾吾的说还有什么事情没做完，我也没听清，压根没打算听这些无用的话语，我将药给她了，离开了，没去追回她，只是留了张背影照片，模糊了视线。告诉她，等我。</p>
<p>好好善待自己，活出最美丽的自己，多么希望有些事情不要变了。</p>
<p>我想我也是个大傻蛋，中午没吃饭，赶回来两点半，吃了两个包子，混了个苹果，就是直接困了一下午吧，，，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我想我是个固执的人吧，今天上午看到你跟我说她胃疼，最终还是下定决心，去学校见见她吧。&lt;/p&gt;
&lt;p&gt;中午下班跟经理打声招呼说下午晚点来，得到回应马上就出发了，第一站是来到药店帮忙询问下暖胃的药吧，平时自己吃过的拿吧，外加一盒消炎的。&lt;/p&gt;
&lt;p&gt;我到了学校，我感觉到我已经
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Log4j格式输出工具类</title>
    <link href="http://blog.wuwii.com/custom-log.html"/>
    <id>http://blog.wuwii.com/custom-log.html</id>
    <published>2017-10-17T03:28:03.000Z</published>
    <updated>2017-10-17T03:51:08.027Z</updated>
    
    <content type="html"><![CDATA[<p>将输出的Log日志进行输出到指定位置，控制台、文件、邮件和数据库等，需要对每一条日志的输出格式，把日志分为不同的级别，写一个工具类可以把日志信息格式化输出到 控制台 或 文件等。<a id="more"></a></p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.io.StringWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: Log </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>: LOG工具类</span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span></span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(Log.class);</div><div class="line">	 <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印警告</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.warn(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.warn(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印信息</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.info(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.info(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印错误</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            </div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.error(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.error(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * debug</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            </div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.debug(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.debug(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码忘了从哪里copy 过来的，暂时是这么用的，感觉可以自己定制打印这个规则很好，而且使用的时候直接调用静态方法就可以了，在也不用去各个类上面获取Logger 。</p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util; </div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test; </div><div class="line"><span class="keyword">import</span> org.junit.Before; </div><div class="line"><span class="keyword">import</span> org.junit.After; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* Log Tester. </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> Zhang Kai </span></div><div class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;10/17/2017&lt;/pre&gt; </span></div><div class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123; </div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: warn(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWarn</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.warn(<span class="string">"他真的很喜欢你 像春雨下得淅淅沥沥"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: info(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.info(<span class="string">"他真的很喜欢你 像夏日聒噪的蝉鸣"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: error(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testError</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.error(<span class="string">"他真的很想念你 像秋叶落得悄无声息"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: debug(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDebug</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.debug(<span class="string">"他真的很喜欢你 想冬天的雪沁在心里"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果， 这样定制的结果，更符合我们的阅读习惯，更加清晰的查看日志内容<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171017111758.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将输出的Log日志进行输出到指定位置，控制台、文件、邮件和数据库等，需要对每一条日志的输出格式，把日志分为不同的级别，写一个工具类可以把日志信息格式化输出到 控制台 或 文件等。
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="log4j" scheme="http://blog.wuwii.com/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>Java中Log4j的使用及配置详情</title>
    <link href="http://blog.wuwii.com/java-log4j.html"/>
    <id>http://blog.wuwii.com/java-log4j.html</id>
    <published>2017-10-16T14:47:03.000Z</published>
    <updated>2017-10-17T03:51:54.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>Log4j</code>是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p>
</blockquote>
<p>项目中日志功能十分强大，可以实时监控你的代码的运行情况，并且就像书页一样清晰可见。<br><a id="more"></a></p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>首先在pom.xml 配置好相关依赖，我这里只使用Log4j，当然还可以使用slf4j 可以管理，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在web.xml 监听 log4j.properties<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启动Log4j --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="配置log4j-properties-配置文件"><a href="#配置log4j-properties-配置文件" class="headerlink" title="配置log4j.properties 配置文件"></a>配置log4j.properties 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG, stdout , R  </div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender  </div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  </div><div class="line">log4j.appender.stdout.layout.ConversionPattern=[QC] %p [%t] %C.%M(%L) | %m%n  </div><div class="line">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  </div><div class="line">log4j.appender.R.File=d://log//FTASWorkFlow.log  </div><div class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout  </div><div class="line">log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n&lt;/span&gt;</div></pre></td></tr></table></figure>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p><code>rootLogger</code>也可以写作<code>rootCategory</code>,<br>rootLogger value的含义<br>第一个逗号前表示log的级别：<code>FATAL</code>,<code>ERROR</code>,<code>WARN</code>,<code>INFO</code>,<code>DEBUG</code>,级别依次降低，开发的时候一般选作DEBUG，上线前期可以INFO或者DEBUG，版本稳定了可以WARN或者ERROR。稳定以后可以每天将日志发送到你的邮箱（至于怎么发，看最下面的Appender），这样就不需要每天去看检查上线的项目有没有异常。</p>
<p>第一个逗号后面的表示你定义的<code>appender</code>，比如我们这里定义了stdout和R，这个名字可以随便定，和下面的对应就好了。这里的stdout代表控制台输出，上线的时候别忘记关掉，直接在rootLogger里去掉stdout就好了。</p>
<h5 id="Log4j提供的appender有以下几种："><a href="#Log4j提供的appender有以下几种：" class="headerlink" title="Log4j提供的appender有以下几种："></a>Log4j提供的appender有以下几种：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">org.apache.log4j.ConsoleAppender（控制台）</div><div class="line">org.apache.log4j.FileAppender（文件）</div><div class="line">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</div><div class="line">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生新文件）</div><div class="line">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</div><div class="line">ConsoleAppender和DailyRollingFileAppender以及RollingFileAppender用的比较多，后面两个用哪个看需求。</div></pre></td></tr></table></figure>
<h5 id="log4j提供以下4种布局样式："><a href="#log4j提供以下4种布局样式：" class="headerlink" title="log4j提供以下4种布局样式："></a>log4j提供以下4种布局样式：</h5><p>不同的Appender有不同的属性，但是Appender都会有一个属性layout，layout又有一个属性PatternLayout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">org.apache.log4j.HTMLLayout（以HTML表格形式布局）</div><div class="line">org.apache.log4j.PatternLayout（可以灵活地指定布局模式，就是可以自定义输出样式），</div><div class="line">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</div><div class="line">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</div></pre></td></tr></table></figure></p>
<h5 id="再看一下PatternLayout的值代表的什么意思"><a href="#再看一下PatternLayout的值代表的什么意思" class="headerlink" title="再看一下PatternLayout的值代表的什么意思"></a>再看一下PatternLayout的值代表的什么意思</h5><p><code>%d</code> 输出日志时间点的日期或时间，紧跟一对花括号进行自定义格式<br><code>%t</code> 输出产生该日志事件的线程名<br><code>%c</code> 输出所属的类目，通常就是所在类的全名<br><code>%l</code>  输出行号<br><code>%m</code> 输出代码中指定的消息<br><code>%n</code> 输出一个回车换行符，Windows平台为 <code>\r\n</code>，Unix平台为 <code>\n</code>，也就是一跳消息占用一行，所以<code>%m%n</code>基本都是一起用<br><code>%p</code> 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>   我们经常会看到[%-5p]这样的用法，就是对%p进行格式化，占用几个字符空间，因为INFO，DEBUG他们有的占用4个有的占用5个，日志看起来不对其，进行一个格式化而已。<br><code>%r</code> 输出自应用启动到输出该log信息耗费的毫秒数<br><code>%c</code> 输出所属的类目，通常就是所在类的全名<br><code>%x</code> 输出对齐  </p>
<h5 id="再看看appender的其他属性"><a href="#再看看appender的其他属性" class="headerlink" title="再看看appender的其他属性"></a>再看看appender的其他属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log4j.appender.FILE.File=D:/logs/log4j.log      --------定义输出文件的位置及文件名</div><div class="line">log4j.appender.FILE.MaxFileSize=1MB             --------定义每个文件的大小，超过这个大小，则新建一个文件，注意单位 MB 或 KB</div><div class="line">log4j.appender.D.Threshold = DEBUG              --------输出DEBUG级别以上的日志</div></pre></td></tr></table></figure>
<h5 id="输出到邮件"><a href="#输出到邮件" class="headerlink" title="输出到邮件"></a>输出到邮件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender（指定输出到邮件）</div><div class="line">log4j.appender.MAIL.Threshold=FATAL</div><div class="line">log4j.appender.MAIL.BufferSize=10</div><div class="line">log4j.appender.MAIL.From=chenyl@hollycrm.com（发件人）</div><div class="line">log4j.appender.MAIL.SMTPHost=mail.hollycrm.com（SMTP服务器）</div><div class="line">log4j.appender.MAIL.Subject=Log4J Message</div><div class="line">log4j.appender.MAIL.To=chenyl@hollycrm.com（收件人）</div><div class="line">log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout（布局）</div><div class="line">log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）</div><div class="line"> </div><div class="line">输出到数据库</div><div class="line">log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender（指定输出到数据库）</div><div class="line">log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test（指定数据库URL）</div><div class="line">log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver（指定数据库driver）</div><div class="line">log4j.appender.DATABASE.user=root（指定数据库用户）</div><div class="line">log4j.appender.DATABASE.password=root（指定数据库用户密码）</div><div class="line">log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES (&apos;[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n&apos;)（组织SQL语句）</div><div class="line">log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout（布局）</div><div class="line">log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）</div></pre></td></tr></table></figure>
<h5 id="我的项目最终配置"><a href="#我的项目最终配置" class="headerlink" title="我的项目最终配置"></a>我的项目最终配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">### 设置级别和目的地(这里多个目的地) ###</div><div class="line">#级别为DEBUG</div><div class="line">#目的地为CONSOLE，zhangLog；zhangLog为自定义输出端，可随意命名</div><div class="line">log4j.rootLogger = DEBUG,CONSOLE,zhangLog</div><div class="line">### 这里的com.wuwii是包，也就是在这个包记录日志时，是只记录debug及以上级别的日志</div><div class="line">#### 当然就可以设定特定包打印的级别</div><div class="line">log4j.logger.com.wuwii=DEBUG</div><div class="line"></div><div class="line">#Log4j提供的appender有以下几种：</div><div class="line">#org.apache.log4j.ConsoleAppender（控制台），</div><div class="line">#org.apache.log4j.FileAppender（文件），</div><div class="line">#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</div><div class="line">#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</div><div class="line">#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</div><div class="line"></div><div class="line">### 输出到控制台 ###</div><div class="line">log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.CONSOLE.Target = System.out</div><div class="line">log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.CONSOLE.layout.ConversionPattern =  %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line"></div><div class="line">### 输出到日志文件 ###</div><div class="line">#写到文件中，并且追加</div><div class="line">log4j.appender.zhangLog = org.apache.log4j.DailyRollingFileAppender</div><div class="line">log4j.appender.zhangLog.File =D\:\\debug.log</div><div class="line">#log4j.appender.zhangLog.File =/var/debug/debug.log</div><div class="line">log4j.appender.zhangLog.Append = true</div><div class="line">## 只输出DEBUG级别以上的日志</div><div class="line">log4j.appender.zhangLog.Threshold = DEBUG</div><div class="line">#&apos;.&apos;yyyy-MM-dd: 设置为每天产生一个新的文件</div><div class="line">#1)’.’yyyy-MM: 每月</div><div class="line">#2)’.’yyyy-ww: 每周</div><div class="line">#3)’.’yyyy-MM-dd: 每天</div><div class="line">#4)’.’yyyy-MM-dd-a: 每天两次</div><div class="line">#5)’.’yyyy-MM-dd-HH: 每小时</div><div class="line">#6)’.’yyyy-MM-dd-HH-mm: 每分钟</div><div class="line">log4j.appender.zhangLog.DatePattern = &apos;.&apos;yyyy-MM-dd</div><div class="line">#当文件达到2kb时，文件会被备份成&quot;debug.txt.1&quot;，新的&quot;log.txt&quot;继续记录log信息</div><div class="line">## 在DailyRollingFileAppender 没这个属性</div><div class="line">log4j.appender.zhangLog.MaxFileSize = 2KB </div><div class="line">#最多建5个文件，当文件个数较多时，后面不再新建文件</div><div class="line">## 在DailyRollingFileAppender 没这个属性</div><div class="line">log4j.appender.zhangLog.MaxBackupIndex = 5</div><div class="line">log4j.appender.zhangLog.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.zhangLog.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] - [%p] [%c&#123;1&#125;:%L] [%M] %m%n</div><div class="line">#设置子Logger是否继承父Logger的输出源</div><div class="line">#默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出</div><div class="line">log4j.additivity.zhangLog = false</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试的类没有启动 web ，默认的是查找 resources 根目录下的  <code>log4j.properties</code> ，没有则找不到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.wuwii.test;</div><div class="line">import org.apache.log4j.Logger;</div><div class="line"></div><div class="line">public class Log4jTest &#123;</div><div class="line">    public static Logger logger1 = Logger.getLogger(Log4jTest.class);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //logger1</div><div class="line">        logger1.trace(&quot;他真的很喜欢你 像春雨下得淅淅沥沥，trace&quot;);</div><div class="line">        logger1.debug(&quot;他真的很喜欢你 像夏日聒噪的蝉鸣，debug&quot;);</div><div class="line">        logger1.info(&quot;他真的很想念你 像秋叶落得悄无声息，info&quot;);</div><div class="line">        logger1.warn(&quot;他真的很喜欢你 想冬天的雪沁在心里，warn&quot;);</div><div class="line">        logger1.error(&quot;他真的很喜欢你 像狗本性难移，error&quot;);</div><div class="line">        logger1.fatal(&quot;他真的很喜欢你 所以他可以一直没脸没皮，fatal&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行代码后，我们可以看到控制台打印了：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016224024.png" alt="image"></p>
<p>因为我们设置了输入到控制台了，再去查看我们的打印日志文件的位置，也可以看到报错信息，使用的 是<code>org.apache.log4j.DailyRollingFileAppender</code>，并没有 <code>maxBackupIndex</code> 和 <code>maxFileSize</code> 属性，所以上面的配置文件也不正确，需要删掉这两行，</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016224226.png" alt="image"></p>
<p>使用的是每天生成一个文件，前一天的备份成<code>yyyy-MM-dd</code> 符合。</p>
<p>打开文件看到</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016224532.png" alt="image"></p>
<p>正确写入，</p>
<p>Log4j的使用及配置就是这样的了。</p>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/zhengliusu/article/details/44619023">http://blog.csdn.net/zhengliusu/article/details/44619023</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Log4j&lt;/code&gt;是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目中日志功能十分强大，可以实时监控你的代码的运行情况，并且就像书页一样清晰可见。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="log4j" scheme="http://blog.wuwii.com/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>使用spring-test 结合JUnit完成单元测试</title>
    <link href="http://blog.wuwii.com/spring-test.html"/>
    <id>http://blog.wuwii.com/spring-test.html</id>
    <published>2017-10-16T06:33:03.000Z</published>
    <updated>2017-10-16T09:35:52.581Z</updated>
    
    <content type="html"><![CDATA[<p>Java web项目怎么能少了spring ,当然少不了代码的单元测试，学习一下spring-test 结合 JUnit 完成单元测试，这样做会有很多好处，可以不用写额外一些方法去重复加载 applicationContext ，而且可以事务回滚等特点。下面再详细介绍。<br><a id="more"></a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>很多人做单元测试的时候，还要在Before方法中，初始化Spring容器，导致容器被初始化多次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Before</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  </div><div class="line">      ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext( <span class="string">"classpath:spring/spring-basic.xml"</span>);  </div><div class="line">      baseDao = (IBaseDao) ctx.getBean(<span class="string">"baseDao"</span>);  </div><div class="line">      assertNotNull(baseDao);  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在开发基于Spring的应用时，如果你还直接使用Junit进行单元测试，那你就错过了Spring满汉全席中最重要的一道硬菜。</p>
<p>再说这道菜之前，我们先来讨论下，在基于Spring的javaweb项目中使用Junit直接进行单元测试有什么不足</p>
<h4 id="导致多次Spring容器初始化问题"><a href="#导致多次Spring容器初始化问题" class="headerlink" title="导致多次Spring容器初始化问题"></a>导致多次Spring容器初始化问题</h4><p>根据JUnit测试方法的调用流程，每执行一个测试方法都会创建一个测试用例的实例并调用setUp()方法。由于一般情况下，我们在setUp()方法中初始化Spring容器，这意味着如果测试用例有多少个测试方法，Spring容器就会被重复初始化多次。虽然初始化Spring容器的速度并不会太慢，但由于可能会在Spring容器初始化时执行加载Hibernate映射文件等耗时的操作，如果每执行一个测试方法都必须重复初始化Spring容器，则对测试性能的影响是不容忽视的；<br> /////////使用Spring测试套件，Spring容器只会初始化一次！ </p>
<h4 id="需要使用硬编码方式手工获取Bean"><a href="#需要使用硬编码方式手工获取Bean" class="headerlink" title="需要使用硬编码方式手工获取Bean"></a>需要使用硬编码方式手工获取Bean</h4><p>  在测试用例类中我们需要通过ctx.getBean()方法从Spirng容器中获取需要测试的目标Bean，并且还要进行强制类型转换的造型操作。这种乏味的操作迷漫在测试用例的代码中，让人觉得烦琐不堪； </p>
<p>////////使用Spring测试套件，测试用例类中的属性会被自动填充Spring容器的对应Bean ，无须在手工设置Bean！ </p>
<h4 id="数据库现场容易遭受破坏"><a href="#数据库现场容易遭受破坏" class="headerlink" title="数据库现场容易遭受破坏"></a>数据库现场容易遭受破坏</h4><p>  测试方法对数据库的更改操作会持久化到数据库中。虽然是针对开发数据库进行操作，但如果数据操作的影响是持久的，可能会影响到后面的测试行为。举个例子，用户在测试方法中插入一条ID为1的User记录，第一次运行不会有问题，第二次运行时，就会因为主键冲突而导致测试用例失败。所以应该既能够完成功能逻辑检查，又能够在测试完成后恢复现场，不会留下“后遗症”； </p>
<p>////////使用Spring测试套件，Spring会在你验证后，自动回滚对数据库的操作，保证数据库的现场不被破坏，因此重复测试不会发生问题！ </p>
<h4 id="不方便对数据操作正确性进行检查"><a href="#不方便对数据操作正确性进行检查" class="headerlink" title="不方便对数据操作正确性进行检查"></a>不方便对数据操作正确性进行检查</h4><p>假如我们向登录日志表插入了一条成功登录日志，可是我们却没有对t_login_log表中是否确实添加了一条记录进行检查。一般情况下，我们可能是打开数据库，肉眼观察是否插入了相应的记录，但这严重违背了自动测试的原则。试想在测试包括成千上万个数据操作行为的程序时，如何用肉眼进行检查？ </p>
<p>////////只要你继承Spring的测试套件的用例类，你就可以通过jdbcTemplate在同一事务中访问数据库，查询数据的变化，验证操作的正确性！ </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>在pom.xml中加入相关依赖 spring-test,  JUnit</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要注意使用前查看两个包相关版本能否兼容使用</p>
<h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><p>我使用的是<code>JUnitGenerator</code>自动生成的测试文件，后面再加入相关的 加载配置文件的注解，最后的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> com.devframe.entity.FarmEntity;</div><div class="line"><span class="keyword">import</span> com.devframe.service.FarmService;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.Before; </div><div class="line"><span class="keyword">import</span> org.junit.After;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* FarmServiceImpl Tester. </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> Zhang Kai </span></div><div class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;10/16/2017&lt;/pre&gt; </span></div><div class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/applicationContext-base.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FarmServiceImplTest</span> </span>&#123; </div><div class="line"></div><div class="line"><span class="meta">@Resource</span></div><div class="line">FarmService service;</div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: setBaseDao(FarmDao dao) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetBaseDao</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: findByOrgids(String pageindex, String pagesize, String where) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByOrgids</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: updateFarm(FarmEntity farmEntity) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateFarm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    String sql = <span class="string">"UPDATE \"AGRI_FARM\" SET \"REMARK\"='备注'"</span>;</div><div class="line">    service.executeUpdate(sql);</div><div class="line">    String sql1 = <span class="string">"SELECT * FROM \"AGRI_FARM\""</span>;</div><div class="line">    List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">    System.out.println(list.get(<span class="number">0</span>).getRemark());</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: exist(String name) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果（表里面只有一条数据，简单写下，平时千万不要这样写，哈哈）</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016131207.png" alt="image"></p>
<p>证明测试成功了</p>
<p>把rollback改成 true ,默认就是为true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span></div><div class="line"><span class="keyword">private</span> FarmDao dao;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: updateFarm(FarmEntity farmEntity) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="comment">//@Rollback(true)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateFarm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    dao.setRemarkValue(<span class="string">"备注44"</span>);</div><div class="line">    String sql1 = <span class="string">"SELECT * FROM \"AGRI_FARM\""</span>;</div><div class="line">    List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">    System.out.println(list.get(<span class="number">0</span>).getRemark());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果  </p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016140842.png" alt="image"><br>我update 的值是 “备注44” 查询出来的是 “备注11” ，后来一想这样自己写得有点傻了，其实这个方法写的没有一点用，现在只能证明数据库还没更改，但是事务还没结束嘛，肯定没入库，就不要介意了，就是这个意思了，测试完成看下数据变了没有，可以验证成功。</p>
<p><strong>需要注意</strong>  的是不能使用自己写的事务，不然会覆盖掉spring 容器的Transactional，导致测试的事务不能回滚，直接保存到数据库中的。</p>
<p>之前一直被这个问题卡住了，设置了<code>@Rollback(true)</code>都不能成功回滚事务，睡了一觉才知道，这个<code>executeUpdate</code>方法中自己写了一个事务，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 删除表中的数据通过条件</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> sql：删改命令</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 执行是否成功</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">	EntityManager em = emf.createEntityManager();</div><div class="line">	em.getTransaction().begin();</div><div class="line">	Query query = em.createNativeQuery(sql);</div><div class="line">	<span class="keyword">int</span> count = query.executeUpdate();</div><div class="line">	em.getTransaction().commit();</div><div class="line">	em.close();</div><div class="line">	<span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是这样的。改成自己再Dao层重新写了个测试方法。可以的了。到此结束了。</p>
<p><strong>参考文章</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/shan9liang/article/details/40452469">http://blog.csdn.net/shan9liang/article/details/40452469</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java web项目怎么能少了spring ,当然少不了代码的单元测试，学习一下spring-test 结合 JUnit 完成单元测试，这样做会有很多好处，可以不用写额外一些方法去重复加载 applicationContext ，而且可以事务回滚等特点。下面再详细介绍。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="JUnit" scheme="http://blog.wuwii.com/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>Maven Scope定义值说明</title>
    <link href="http://blog.wuwii.com/maven-scope.html"/>
    <id>http://blog.wuwii.com/maven-scope.html</id>
    <published>2017-10-16T03:11:03.000Z</published>
    <updated>2017-10-17T01:10:43.909Z</updated>
    
    <content type="html"><![CDATA[<h4 id="maven依赖关系中Scope的作用"><a href="#maven依赖关系中Scope的作用" class="headerlink" title="maven依赖关系中Scope的作用"></a>maven依赖关系中Scope的作用</h4><p><code>Dependency Scope</code> </p>
<p>在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值： </scope></scope></dependency></p>
<ul>
<li>compile，缺省值，适用于所有阶段，会随着项目一起发布。 </li>
<li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 </li>
<li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 </li>
<li>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 </li>
<li>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。<a id="more"></a>
</li>
</ul>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>依赖范围控制哪些依赖在哪些classpath 中可用，哪些依赖包含在一个应用中。让我们详细看一下每一种范围：</p>
<h5 id="compile-（编译范围）"><a href="#compile-（编译范围）" class="headerlink" title="compile （编译范围）"></a>compile （编译范围）</h5><p>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath 中可用，同时它们也会被打包。</p>
<h5 id="provided-（已提供范围）"><a href="#provided-（已提供范围）" class="headerlink" title="provided （已提供范围）"></a>provided （已提供范围）</h5><p>provided 依赖只有在当JDK 或者一个容器已提供该依赖之后才使用。例如，<br>如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，但是你不会想要在打包好的WAR 中包含这个Servlet API；这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。</p>
<h5 id="runtime-（运行时范围）"><a href="#runtime-（运行时范围）" class="headerlink" title="runtime （运行时范围）"></a>runtime （运行时范围）</h5><p>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，<br>而只有在运行的时候才需要JDBC<br>驱动实现。</p>
<h5 id="test-（测试范围）"><a href="#test-（测试范围）" class="headerlink" title="test （测试范围）"></a>test （测试范围）</h5><p>test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p>
<h5 id="system-（系统范围）"><a href="#system-（系统范围）" class="headerlink" title="system （系统范围）"></a>system （系统范围）</h5><p>system范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。<br>这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。<br>如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>默认的依赖范围是complie</li>
<li>test范围指的是测试范围有效，在编译和打包时都不会使用这个依赖，<scope>为test的jar不会传递依赖项目；</scope></li>
<li>compile范围指的是编译范围有效，在编译和打包时都会讲依赖存储进去；</li>
<li>provided依赖，在编译和测试的过程有效，最后生成var包时不会加入，诸如：servlet——api，因为servlet-api，tomcat等web服务器已经存在了，如果再打包会冲突；</li>
<li>runtime在运行的时候依赖，在编译的时候不依赖；</li>
</ul>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/ld513508088/article/details/23827945">http://blog.csdn.net/ld513508088/article/details/23827945</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;maven依赖关系中Scope的作用&quot;&gt;&lt;a href=&quot;#maven依赖关系中Scope的作用&quot; class=&quot;headerlink&quot; title=&quot;maven依赖关系中Scope的作用&quot;&gt;&lt;/a&gt;maven依赖关系中Scope的作用&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Dependency Scope&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;在POM 4中，&lt;dependency&gt;中还引入了&lt;scope&gt;，它主要管理依赖的部署。目前&lt;scope&gt;可以使用5个值： &lt;/scope&gt;&lt;/scope&gt;&lt;/dependency&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compile，缺省值，适用于所有阶段，会随着项目一起发布。 &lt;/li&gt;
&lt;li&gt;provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 &lt;/li&gt;
&lt;li&gt;runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 &lt;/li&gt;
&lt;li&gt;test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 &lt;/li&gt;
&lt;li&gt;system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://blog.wuwii.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>20171015</title>
    <link href="http://blog.wuwii.com/20171015.html"/>
    <id>http://blog.wuwii.com/20171015.html</id>
    <published>2017-10-15T13:43:03.000Z</published>
    <updated>2017-10-16T00:44:51.482Z</updated>
    
    <content type="html"><![CDATA[<p>每次看到你发的那些难过的句子，</p>
<p>我也感觉心快要化了，</p>
<p>你曾经说过，</p>
<p>不谈恋爱了就不会有烦恼了，</p>
<p>那现在我真的不希望你谈恋爱了，<br>幸福真是个大鬼头，<br>我从没有拥有过，<br>也都对它失望了。</p>
<p>姑娘，你一定要好好照顾自己，</p>
<p>我在想好的女生都是被这样被逼的不想谈恋爱了吗，</p>
<p>在这段时间里，曾经天真活泼的你，瞬间就变得忧郁，有脾气了， 可能很多人认为你变了，不认识了吧。</p>
<p>虽然了解的你不多，但是我想你根本没变吧，只是善于伪装吧，伪装得太好，让别人看不出伤疤，看不到疼痛。</p>
<p>姑娘，真的没必要不要这样了，你说 心比长相好，懂比爱重要。我想一个对的人最起码不会让身边得人这么的难受，我想我虽然一直抱有幻想，但我可能也不是你生命中那个对的人，因为，我也伤害过你，现在留下的只有伤口和已经上锁的心。你这么优秀，没有什么错过的青春，错过的爱情，只是没遇到对的，总有一天，你可以等到那个对的人，宠着你的人，不让你难过的人，愿生活有诗，有梦，有远方，还有一个懂你、爱你的可心人。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次看到你发的那些难过的句子，&lt;/p&gt;
&lt;p&gt;我也感觉心快要化了，&lt;/p&gt;
&lt;p&gt;你曾经说过，&lt;/p&gt;
&lt;p&gt;不谈恋爱了就不会有烦恼了，&lt;/p&gt;
&lt;p&gt;那现在我真的不希望你谈恋爱了，&lt;br&gt;幸福真是个大鬼头，&lt;br&gt;我从没有拥有过，&lt;br&gt;也都对它失望了。&lt;/p&gt;
&lt;p&gt;姑
    
    </summary>
    
      <category term="碎碎念" scheme="http://blog.wuwii.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="心情" scheme="http://blog.wuwii.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Intellij使用JUnitGenerator V2.0自动生成单元测试代码</title>
    <link href="http://blog.wuwii.com/junitgenerator.html"/>
    <id>http://blog.wuwii.com/junitgenerator.html</id>
    <published>2017-10-15T11:19:03.000Z</published>
    <updated>2017-10-16T00:44:51.451Z</updated>
    
    <content type="html"><![CDATA[<p>单元测试平时开发的时候是大有打交道了，使用Intellij后，发现有这个自动生成Junit 4 单元测试代码的插件，就是要说的 <code>JUnitGenerator</code>。<a id="more"></a></p>
<h4 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4><p>首先我的Intellij 版本是201702</p>
<p>settings -&gt; 搜索 JUnitGenerator 下载V2.0版本，安装插件，重启Intellij</p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>安装完插件，我们就可以进行自动生成单元测试代码了。<br>在要测试的类的页面，使用快捷键 <code>Alt + Insert</code> ，安装了JUnitGenerator 插件就会出现这个<code>JUnit Test</code> 选项，我们选择<code>Junit 4</code></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015170801.png" alt="image"></p>
<p>这个时候虽然能生成测试代码，但是你会发现，它生成的位置不是我们需要的，没有生成到<code>test source</code> 文件夹下，所以需要设置下它的生成目录，</p>
<p>打开首先我的Intellij的 settings -&gt; Other Settings -&gt; 选第一个。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015171518.png" alt="image"><br>其中 Output Path 是设置我们自动生成的测试文件的位置，需要重新设置下到<br><code>${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}</code></p>
<p>然后就是最后的日期格式乱码，点开JUnit 4 选项卡，将<code>date</code> 改成 <code>today</code>，里面是模板，可以根据自己的需求自己改，毕竟，测试代码的命名就没那么严格了。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>我们使用的是Junit 4 的，肯定得先引入Junit 的依赖包，在pom.xml中加入它得依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>不然生成出来的代码会报错的，找不到Jar包。。</p>
<p>改了上面的，应该就没什么问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单元测试平时开发的时候是大有打交道了，使用Intellij后，发现有这个自动生成Junit 4 单元测试代码的插件，就是要说的 &lt;code&gt;JUnitGenerator&lt;/code&gt;。
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Intellij" scheme="http://blog.wuwii.com/tags/Intellij/"/>
    
      <category term="JUnitGenerator" scheme="http://blog.wuwii.com/tags/JUnitGenerator/"/>
    
  </entry>
  
  <entry>
    <title>使用Intellij 打包maven 项目，忽略单元测试代码</title>
    <link href="http://blog.wuwii.com/install-skip-test.html"/>
    <id>http://blog.wuwii.com/install-skip-test.html</id>
    <published>2017-10-15T07:40:03.000Z</published>
    <updated>2017-10-16T00:44:51.451Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>Eclipse</code> 的maven 打包部署项目，以前都是直接直接勾选 <code>Skip Tests</code> <a id="more"></a></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015152112.png" alt="image"></p>
<p><del>使用好像 Intellij 没有这个选项</del>，只能使用maven 的命令 来进行这个操作，可以在项目的根目录直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install -DskipTests</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install -Dmaven.test.skip=true</div></pre></td></tr></table></figure></p>
<p>或者直接在 Intellij 中Install 的时候 带上参数，点开 Intellij中右侧 的 MAVEN PROJECT -&gt; Lifecycle -&gt; install -&gt;右键选择 Create… -&gt; 在 install 后面加上参数 <code>-DskipTests</code></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015153116.png" alt="image"></p>
<p>再去执行</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015153608.png" alt="image"></p>
<p>SUCCESS!再去看看项目，单元测试代码没有打包。</p>
<hr>
<p>更新，发现了Intellij，有 Skip Tests 选项<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015155149.png" alt="image"></p>
<hr>
<p>上面的小选项卡里的功能以前并没有注意到，仔细看了看，主要的还是跟Eclipse maven相似，只是源码可以自动下载，更强大了。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;code&gt;Eclipse&lt;/code&gt; 的maven 打包部署项目，以前都是直接直接勾选 &lt;code&gt;Skip Tests&lt;/code&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="maven" scheme="http://blog.wuwii.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>他真的很喜欢你</title>
    <link href="http://blog.wuwii.com/really-love.html"/>
    <id>http://blog.wuwii.com/really-love.html</id>
    <published>2017-10-14T15:30:03.000Z</published>
    <updated>2017-10-16T00:44:51.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>他真的很喜欢你，认真且怂，从一而终。</p>
</blockquote>
<p><img src="https://i.loli.net/2017/10/15/59e238a08a631.jpg" alt="image"></p>
<a id="more"></a>
<p>“何谓孤寂？”<br>“清风，艳日，无笑意。”<br>“可否具体？”<br>“左拥，右抱，无情欲。”<br>“可否再具体？”<br>“不得你。”</p>
<p>“何为思念？”<br>“日月，星辰，旷野雨落。”<br>“可否具体？”<br>“山川，江流，烟袅湖泊。”<br>“可否再具体？”<br>“万物是你，无可躲。</p>
<p>“何为无救？”<br>“良药、妙方，无可医。”<br>“可否具体？”<br>“扁鹊、华佗，俱无策。”<br>“可否再具体？”<br>“念你成疾。”</p>
<p>“何谓求索？”<br>“落霞，朝阳，七千里。”<br>“可否具体？”<br>“夏雨，冬雪，九万顷。”<br>“可否再具体？”<br>“追寻你。”</p>
<p>“何谓伴侣？”<br>“柴米，油盐，木栅栏。”<br>“可否具体？”<br>“粗茶，淡饭，执子手。”<br>“可否再具体？”<br>“和你。”</p>
<p>“何谓漂泊？”<br>“飞蓬，飘萍，无根底。”<br>“可否具体？”<br>“只鹤，孤雁，寒塘独下迟。”<br>“可否再具体？”<br>“南游，东出，客愁，旅思，离乡千万里。”<br>“可否更具体？”<br>“春行，秋度，杳杳无归期。”<br>“仍是不解。”<br>“浪迹云游，何处寻你。”</p>
<p>“何谓难得？”<br>“落虹，繁星，山间风。”<br>“可否具体？”<br>“雾凇，凤翎，黄粱梦。”<br>“可否再具体？”<br>“伴你而生，有始无终。”</p>
<p>“何谓欢喜？”<br>“清风，晓月，伴星辰。”<br>“可否具体？”<br>“一见，再见，已倾心。”<br>“可否再具体？”<br>“余光皆是你。”</p>
<p>“何谓欣悦？”<br>“四海，三山，两心。”<br>“可否具体？”<br>“两人，三餐，四季。”<br>“可否再具体？”<br>“与你。”</p>
<p>“何谓愁？”<br>“江湖，灯市，檐下躲雨。”<br>“可否具体？”<br>“孤舟，青衫，长亭垂柳。”<br>“可否再具体？”<br>“所见是你，无可避。”</p>
<p>“何谓美人？”<br>“纤手，漾眸，柔腰肢。”<br>“可否具体？”<br>“橘子香气。”<br>“可否再具体？”<br>“汝。”</p>
<p>“何谓忧？”<br>“无笑，无乐，郁积于心。”<br>“可否具体？”<br>“思你，念你，不得见你。”<br>“可否再具体？”<br>“你已无意。”</p>
<p>“何谓空寂？”<br>“抬头，艳阳，流云里。”<br>“可否具体？”<br>“飘摇，流浪，无归期。”<br>“可否再具体？”<br>“没等到你。”  </p>
<p>“何为习性？”<br>“清茶，浊酒，和音伴。”<br>“可否具体？”<br>“跋山，涉水，曲随行。”<br>“可否再具体？”<br>“予你。”  </p>
<p>“何为等待？”<br>“不知几分红颜悴，多少相思碎。”<br>“可否详言？”<br>“花开花落两不知，惟介音无回。”<br>“可否甚解？”<br>“一叶一追寻，待一人与归。”    </p>
<p>“何为距离？”<br>“白云，大地，止相望。”<br>“可否具体？”<br>“树木，微风，终轻拂。”<br>“可否再具体？”<br>“你与我。”  </p>
<p>“何为思兮？”<br>“惦念，不语，乱了心。”<br>“可否具体？”<br>“失神差可拟。”<br>“可否再具体？”<br>“哪里都是你。”  </p>
<p>“何谓心安？”<br>“同月沽酌，千诗可叙”<br>“可否具体？”<br>“红色屋顶，白色窗棂。”<br>“可否再具体？”<br>“身边有你。”   </p>
<p>“何为心寒？”<br>“白雪、冷雨，冻寒骨。”<br>“可否具体？”<br>“深夜、凌晨，无可分。”<br>“可否再具体？”<br>“你，已弃。”  </p>
<p>“何为归途？”<br>“夜鸟 荒路 漫漫无期。”<br>“可否具体 ？”<br>“碎言 华灯 喧嚣无际。”<br>“可否再具体？”<br>“一诗 一酌 不觉千里。”<br>“仍是不解。”<br>“与你，四处为安。”  </p>
<p>“何谓笑意？”<br>“单车，白衣，晴空万里”<br>“可否具体？”<br>“天台，茉莉，七月初七”<br>“可否再具体？”<br>“花裙，背影，安然静谧”<br>“可否更具体？”<br>“一看到你”  </p>
<p>“何谓卑微？”<br>“清水，野草，无艳色。”<br>“可否具体？”<br>“爱情，亲情，无回报。”<br>“可否再具体？”<br>“入尘埃。”  </p>
<p>“何为知己？”<br>“相视，不语，已了然”<br>“可否具体？”<br>“浮华万物皆可抛”<br>“可否再具体？”<br>“愿得你”  </p>
<hr>
<p><strong>内容来自网易云《浮生》下面的热门的评论</strong></p>
<p>侵删</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;他真的很喜欢你，认真且怂，从一而终。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/10/15/59e238a08a631.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="那些很美的句子" scheme="http://blog.wuwii.com/categories/%E9%82%A3%E4%BA%9B%E5%BE%88%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%AD%90/"/>
    
    
      <category term="他真的很喜欢你" scheme="http://blog.wuwii.com/tags/%E4%BB%96%E7%9C%9F%E7%9A%84%E5%BE%88%E5%96%9C%E6%AC%A2%E4%BD%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java客户端使用Jedis操作Redis</title>
    <link href="http://blog.wuwii.com/catch-jedis.html"/>
    <id>http://blog.wuwii.com/catch-jedis.html</id>
    <published>2017-10-13T07:38:03.000Z</published>
    <updated>2017-10-24T02:47:55.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>搭建好redis ，这是我们需要在java中操作它，在这里我使用<code>jedis</code>  ，这次主要使用redis，存储信息，到时间超时，并且自动删除超时信息，累计数据List，达到一定数量，入库，删除，所以这个时候为了数据安全，删除完，才去写入新数据，需要写一个简单的分布式锁。</p>
<a id="more"></a>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="准备，导入Jar包"><a href="#准备，导入Jar包" class="headerlink" title="准备，导入Jar包"></a>准备，导入Jar包</h4><p>首先在<code>pox.xml</code>加入所需要的Jar 包：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jedis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="编写连接工具类"><a href="#编写连接工具类" class="headerlink" title="编写连接工具类"></a>编写连接工具类</h4><p>首先编写工具类去连接redis：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: RedisUtil </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>: redis工具类 </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月26日 下午3:20:29 </span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1149678082569464779L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//Redis服务器IP</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String addr;</div><div class="line">    </div><div class="line">    <span class="comment">//Redis的端口号</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;</div><div class="line">    </div><div class="line">    <span class="comment">//访问密码</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String auth;</div><div class="line">    </div><div class="line">    <span class="comment">//可用连接实例的最大数目，默认值为8；</span></div><div class="line">    <span class="comment">//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxActive;</div><div class="line">    </div><div class="line">    <span class="comment">//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxIdle;</div><div class="line">    </div><div class="line">    <span class="comment">//等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxWait;</div><div class="line">    </div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> timeOut;</div><div class="line">    </div><div class="line">    <span class="comment">//在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> testOnBorrow;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis jedis;<span class="comment">//非切片额客户端连接</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JedisPool jedisPool;<span class="comment">//非切片连接池</span></div><div class="line">    </div><div class="line">   <span class="comment">// public static ShardedJedis shardedJedis;//切片额客户端连接</span></div><div class="line">    </div><div class="line">   <span class="comment">// public static ShardedJedisPool shardedJedisPool;//切片连接池</span></div><div class="line">    </div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">    	addr = PropertyUtil.get(<span class="string">"redis.addr"</span>);</div><div class="line">    	auth = PropertyUtil.get(<span class="string">"redis.auth"</span>);</div><div class="line">    	port = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.port"</span>));</div><div class="line">    	maxIdle = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.maxIdle"</span>));</div><div class="line">    	maxActive = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.maxActive"</span>));</div><div class="line">    	maxWait = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.maxWait"</span>));</div><div class="line">    	timeOut = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.timeOut"</span>));</div><div class="line">    	testOnBorrow = PropertyUtil.get(<span class="string">"redis.testOnBorrow"</span>).equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> :<span class="keyword">false</span>;</div><div class="line">    	initialPool();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">()</span></span>&#123;</div><div class="line">    	initialPool(); </div><div class="line">        jedis = getJedis();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化非切片池</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 池基本配置 </span></div><div class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">        config.setMaxTotal(maxActive); </div><div class="line">        config.setMaxIdle(maxIdle); </div><div class="line">        config.setMaxWaitMillis(maxWait); </div><div class="line">        config.setTestOnBorrow(testOnBorrow);</div><div class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config, addr, port);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取Jedis实例</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (jedisPool != <span class="keyword">null</span>) &#123;</div><div class="line">               jedis = jedisPool.getResource();</div><div class="line">               jedis.auth(auth);<span class="comment">//认证</span></div><div class="line">               <span class="keyword">return</span> jedis;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            Log.error(e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 释放jedis资源</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">returnResource</span><span class="params">(<span class="keyword">final</span> Jedis jedis)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</div><div class="line">        	jedis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># Redis Settings</div><div class="line">redis.addr=192.168.19.200</div><div class="line">redis.port=6379</div><div class="line">redis.auth=master</div><div class="line"></div><div class="line">redis.maxIdle=300</div><div class="line">redis.maxActive=1024</div><div class="line">redis.maxWait=10000</div><div class="line">redis.timeOut=10000</div><div class="line">redis.testOnBorrow=false</div></pre></td></tr></table></figure></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>连接上redis我们就可以使用jedis操作我们的redis，直接写业务</p>
<h5 id="登陆，保存会话"><a href="#登陆，保存会话" class="headerlink" title="登陆，保存会话"></a>登陆，保存会话</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String ucid)</span> </span>&#123;</div><div class="line">        Jedis jedisindex = getJedis();</div><div class="line">        String key = <span class="string">"login"</span> + ucid;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//设置登陆时常保存到30m，每次操作都会过来重新存下，重新刷新时间;</span></div><div class="line">            jedisindex.expire(key,  <span class="number">1800</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//TODO code </span></div><div class="line">            </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(e.getMessage(), e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            returnResource(jedisindex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="使用redis完成分布式锁"><a href="#使用redis完成分布式锁" class="headerlink" title="使用redis完成分布式锁"></a>使用redis完成分布式锁</h5><p>当一个用户满60条数据，进行数据入库，使用分布式锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * xxxxxxx</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> track</span></div><div class="line"><span class="comment">  * 满到60个 TIDD add</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTrack</span><span class="params">(String ucid, String track, Jedis jedisindex)</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         Boolean lockFlag = <span class="keyword">false</span>;</div><div class="line">         <span class="keyword">while</span> (!lockFlag) &#123;</div><div class="line">             lockFlag = lock(<span class="string">"lock"</span> + ucid, jedisindex); <span class="comment">//上锁</span></div><div class="line">             jedisindex.lpush(ucid, track); <span class="comment">//添加数据</span></div><div class="line">             unlock(<span class="string">"lock"</span> + ucid, jedisindex); <span class="comment">//释放锁</span></div><div class="line">         &#125;</div><div class="line">         <span class="keyword">long</span> len = jedisindex.llen(ucid);</div><div class="line">         lockFlag = <span class="keyword">false</span>;</div><div class="line">         <span class="keyword">if</span> (len &gt;= <span class="number">60</span>) &#123;</div><div class="line">             <span class="keyword">while</span> (!lockFlag) &#123;</div><div class="line">                 lockFlag = lock(<span class="string">"lock"</span> + ucid, jedisindex); <span class="comment">//上锁</span></div><div class="line">                  <span class="comment">//满了60条数据 去数据入库，并且删除redis中的value,</span></div><div class="line">               <span class="comment">// 我的下个业务 addHistoryTrack(ucid, jedisindex.lrange(ucid, 0, 59), jedisindex);</span></div><div class="line">                 unlock(<span class="string">"lock"</span> + ucid, jedisindex); <span class="comment">//释放锁</span></div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         LOGGER.error(e.getMessage(), e);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOCK_TIMEOUT = <span class="number">1</span>; <span class="comment">//加锁超时时间 单位秒  意味着加锁期间内执行完操作 如果未完成会有并发现象</span></div><div class="line"> </div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">  * 上锁</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Boolean <span class="title">lock</span><span class="params">(String lock, Jedis jedisindex)</span> </span>&#123;</div><div class="line">     <span class="comment">// 1. 通过SETNX试图获取一个lock</span></div><div class="line">     <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">long</span> value = System.currentTimeMillis() + LOCK_TIMEOUT * <span class="number">1000</span> + <span class="number">1</span>;</div><div class="line">     <span class="keyword">long</span> acquired = jedis.setnx(lock, String.valueOf(value));</div><div class="line">     jedisindex.expire(lock, LOCK_TIMEOUT);<span class="comment">//设置1秒超时 ,到时候自动释放锁</span></div><div class="line">     <span class="comment">//SETNX成功，则成功获取一个锁  </span></div><div class="line">     <span class="keyword">if</span> (acquired == <span class="number">1</span>) success = <span class="keyword">true</span>;</div><div class="line">     <span class="keyword">return</span> success;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 解锁</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lock, Jedis jedisindex)</span> </span>&#123;</div><div class="line">     jedisindex.del(lock);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>使用jedis操作redis，使用的是spring 框架，可以使用<code>Spring Data Redis</code> ,更符合java spring框架依赖注入的特性，使用上大同小异。</li>
<li>使用多线程操作redis 不要把 jedis 存入到<code>ThreadLocal</code> 或各种全局变量中， 可能出现冲突。需要重新从<code>jedisPool</code>获取<code>jedis</code>，然后用完关闭连接就行。</li>
</ol>
<h4 id="学习："><a href="#学习：" class="headerlink" title="学习："></a>学习：</h4><ol>
<li>以后了解对jedis关于事务、管道和分布式的使用。</li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">1）连接操作命令</div><div class="line">   quit：关闭连接（connection）</div><div class="line">   auth：简单密码认证</div><div class="line">   help cmd： 查看cmd帮助，例如：help quit</div><div class="line">   </div><div class="line">   2）持久化</div><div class="line">   save：将数据同步保存到磁盘</div><div class="line">   bgsave：将数据异步保存到磁盘</div><div class="line">   lastsave：返回上次成功将数据保存到磁盘的Unix时戳</div><div class="line">   shundown：将数据同步保存到磁盘，然后关闭服务</div><div class="line">   </div><div class="line">   3）远程服务控制</div><div class="line">   info：提供服务器的信息和统计</div><div class="line">   monitor：实时转储收到的请求</div><div class="line">   slaveof：改变复制策略设置</div><div class="line">   config：在运行时配置Redis服务器</div><div class="line">   </div><div class="line">   4）对value操作的命令</div><div class="line">   exists(key)：确认一个key是否存在</div><div class="line">   del(key)：删除一个key</div><div class="line">   type(key)：返回值的类型</div><div class="line">   keys(pattern)：返回满足给定pattern的所有key</div><div class="line">   randomkey：随机返回key空间的一个</div><div class="line">   keyrename(oldname, newname)：重命名key</div><div class="line">   dbsize：返回当前数据库中key的数目</div><div class="line">   expire：设定一个key的活动时间（s）</div><div class="line">   ttl：获得一个key的活动时间</div><div class="line">   select(index)：按索引查询</div><div class="line">   move(key, dbindex)：移动当前数据库中的key到dbindex数据库</div><div class="line">   flushdb：删除当前选择数据库中的所有key</div><div class="line">   flushall：删除所有数据库中的所有key</div><div class="line">   </div><div class="line">   5）String</div><div class="line">   set(key, value)：给数据库中名称为key的string赋予值value</div><div class="line">   get(key)：返回数据库中名称为key的string的value</div><div class="line">   getset(key, value)：给名称为key的string赋予上一次的value</div><div class="line">   mget(key1, key2,…, key N)：返回库中多个string的value</div><div class="line">   setnx(key, value)：添加string，名称为key，值为value</div><div class="line">   setex(key, time, value)：向库中添加string，设定过期时间time</div><div class="line">   mset(key N, value N)：批量设置多个string的值</div><div class="line">   msetnx(key N, value N)：如果所有名称为key i的string都不存在</div><div class="line">   incr(key)：名称为key的string增1操作</div><div class="line">   incrby(key, integer)：名称为key的string增加integer</div><div class="line">   decr(key)：名称为key的string减1操作</div><div class="line">   decrby(key, integer)：名称为key的string减少integer</div><div class="line">   append(key, value)：名称为key的string的值附加value</div><div class="line">   substr(key, start, end)：返回名称为key的string的value的子串</div><div class="line">   </div><div class="line">   6）List </div><div class="line">   rpush(key, value)：在名称为key的list尾添加一个值为value的元素</div><div class="line">   lpush(key, value)：在名称为key的list头添加一个值为value的 元素</div><div class="line">   llen(key)：返回名称为key的list的长度</div><div class="line">   lrange(key, start, end)：返回名称为key的list中start至end之间的元素</div><div class="line">   ltrim(key, start, end)：截取名称为key的list</div><div class="line">   lindex(key, index)：返回名称为key的list中index位置的元素</div><div class="line">   lset(key, index, value)：给名称为key的list中index位置的元素赋值</div><div class="line">   lrem(key, count, value)：删除count个key的list中值为value的元素</div><div class="line">   lpop(key)：返回并删除名称为key的list中的首元素</div><div class="line">   rpop(key)：返回并删除名称为key的list中的尾元素</div><div class="line">   blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</div><div class="line">   brpop(key1, key2,… key N, timeout)：rpop的block版本。</div><div class="line">   rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</div><div class="line">   </div><div class="line">   7）Set</div><div class="line">   sadd(key, member)：向名称为key的set中添加元素member</div><div class="line">   srem(key, member) ：删除名称为key的set中的元素member</div><div class="line">   spop(key) ：随机返回并删除名称为key的set中一个元素</div><div class="line">   smove(srckey, dstkey, member) ：移到集合元素</div><div class="line">   scard(key) ：返回名称为key的set的基数</div><div class="line">   sismember(key, member) ：member是否是名称为key的set的元素</div><div class="line">   sinter(key1, key2,…key N) ：求交集</div><div class="line">   sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合</div><div class="line">   sunion(key1, (keys)) ：求并集</div><div class="line">   sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合</div><div class="line">   sdiff(key1, (keys)) ：求差集</div><div class="line">   sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合</div><div class="line">   smembers(key) ：返回名称为key的set的所有元素</div><div class="line">   srandmember(key) ：随机返回名称为key的set的一个元素</div><div class="line">   </div><div class="line">   8）Hash</div><div class="line">   hset(key, field, value)：向名称为key的hash中添加元素field</div><div class="line">   hget(key, field)：返回名称为key的hash中field对应的value</div><div class="line">   hmget(key, (fields))：返回名称为key的hash中field i对应的value</div><div class="line">   hmset(key, (fields))：向名称为key的hash中添加元素field </div><div class="line">   hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</div><div class="line">   hexists(key, field)：名称为key的hash中是否存在键为field的域</div><div class="line">   hdel(key, field)：删除名称为key的hash中键为field的域</div><div class="line">   hlen(key)：返回名称为key的hash中元素个数</div><div class="line">   hkeys(key)：返回名称为key的hash中所有键</div><div class="line">   hvals(key)：返回名称为key的hash中所有键对应的value</div><div class="line">   hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;p&gt;搭建好redis ，这是我们需要在java中操作它，在这里我使用&lt;code&gt;jedis&lt;/code&gt;  ，这次主要使用redis，存储信息，到时间超时，并且自动删除超时信息，累计数据List，达到一定数量，入库，删除，所以这个时候为了数据安全，删除完，才去写入新数据，需要写一个简单的分布式锁。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.wuwii.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.wuwii.com/tags/java/"/>
    
      <category term="redis" scheme="http://blog.wuwii.com/tags/redis/"/>
    
      <category term="jedis" scheme="http://blog.wuwii.com/tags/jedis/"/>
    
  </entry>
  
</feed>
