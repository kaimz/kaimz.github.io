<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[XSS攻击过滤处理]]></title>
      <url>/java-xss-filter.html</url>
      <content type="html"><![CDATA[<h3 id="关于XSS攻击"><a href="#关于XSS攻击" class="headerlink" title="关于XSS攻击"></a>关于XSS攻击</h3><p>XSS是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。</p>
<h3 id="XSS漏洞的危害"><a href="#XSS漏洞的危害" class="headerlink" title="XSS漏洞的危害"></a>XSS漏洞的危害</h3><ol>
<li>网络钓鱼，包括盗取各类用户账号； </li>
<li>窃取用户cookies资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作； </li>
<li>劫持用户（浏览器）会话，从而执行任意操作，例如进行非法转账、强制发表日志、发送电子邮件等； </li>
<li>强制弹出广告页面、刷流量等； </li>
<li>网页挂马； </li>
<li>进行恶意操作，例如任意篡改页面信息、删除文章等；</li>
<li>进行大量的客户端攻击，如DDoS攻击；</li>
<li>获取客户端信息，例如用户的浏览历史、真实IP、开放端口等；</li>
<li>控制受害者机器向其他网站发起攻击；</li>
<li>结合其他漏洞，如CSRF漏洞，实施进一步作恶；</li>
<li>提升用户权限，包括进一步渗透网站； </li>
<li>传播跨站脚本蠕虫等；<br>……</li>
</ol>
<h3 id="避免XSS攻击"><a href="#避免XSS攻击" class="headerlink" title="避免XSS攻击"></a>避免XSS攻击</h3><p>XSS类似SQL 注入攻击，都是通过客户端恶意植入，一样也是用过滤器进行过滤。</p>
<p>框架使用的是SpringMVC。</p>
<h4 id="XSS过滤器"><a href="#XSS过滤器" class="headerlink" title="XSS过滤器"></a>XSS过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * XSS过滤器</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/12/14 10:00&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        XssHttpServletRequestWrapper xssRequest = <span class="keyword">new</span> XssHttpServletRequestWrapper(</div><div class="line">                (HttpServletRequest) request);</div><div class="line">        chain.doFilter(xssRequest, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="request进行XSS过滤"><a href="#request进行XSS过滤" class="headerlink" title="request进行XSS过滤"></a>request进行XSS过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ReadListener;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * XSS过滤处理</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/12/14 9:33&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 没被包装过的HttpServletRequest（特殊场景，需要自己过滤）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> HttpServletRequest orgRequest;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * html过滤</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> HTMLFilter HTML_FILTER = <span class="keyword">new</span> HTMLFilter();</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Constructs a request object wrapping the given request.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request request</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the request is null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    XssHttpServletRequestWrapper(HttpServletRequest request) <span class="keyword">throws</span> IllegalArgumentException &#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        orgRequest = request;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//非json类型，直接返回</span></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">super</span>.getHeader(HttpHeaders.CONTENT_TYPE).equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getInputStream();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//为空，直接返回</span></div><div class="line">        String json = IOUtils.toString(<span class="keyword">super</span>.getInputStream(), <span class="string">"utf-8"</span>);</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasText(json)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getInputStream();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//xss过滤</span></div><div class="line">        json = xssEncode(json);</div><div class="line">        <span class="keyword">final</span> ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(json.getBytes(<span class="string">"utf-8"</span>));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> bis.read();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 过滤参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name 参数name，也要过滤</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> String value</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        String value = <span class="keyword">super</span>.getParameter(xssEncode(name));</div><div class="line">        <span class="keyword">if</span> (StringUtils.hasText(value)) &#123;</div><div class="line">            value = xssEncode(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 过滤参数，值为数组</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name 参数名</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> String[]</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</div><div class="line">        String[] parameters = <span class="keyword">super</span>.getParameterValues(name);</div><div class="line">        <span class="keyword">if</span> (parameters == <span class="keyword">null</span> || parameters.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</div><div class="line">            parameters[i] = xssEncode(parameters[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> parameters;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 过滤参数，返回键值对形式的参数类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> Map</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Map&lt;String,String[]&gt; getParameterMap() &#123;</div><div class="line">        Map&lt;String,String[]&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">        Map&lt;String,String[]&gt; parameters = <span class="keyword">super</span>.getParameterMap();</div><div class="line">        <span class="keyword">for</span> (String key : parameters.keySet()) &#123;</div><div class="line">            String[] values = parameters.get(key);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</div><div class="line">                values[i] = xssEncode(values[i]);</div><div class="line">            &#125;</div><div class="line">            map.put(key, values);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取request的头属性，并且进行xss过滤，返回它的值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name 属性名</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> String 值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        String value = <span class="keyword">super</span>.getHeader(xssEncode(name));</div><div class="line">        <span class="keyword">if</span> (StringUtils.hasText(value)) &#123;</div><div class="line">            value = xssEncode(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">xssEncode</span><span class="params">(String input)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> HTML_FILTER.filter(input);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取最原始的request</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> HttpServletRequest 原始的request</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> HttpServletRequest <span class="title">getOrgRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> orgRequest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取最原始的request，明确不进行xss过滤的</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request request</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> HttpServletRequest 原始request</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getOrgRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> XssHttpServletRequestWrapper) &#123;</div><div class="line">            <span class="keyword">return</span> ((XssHttpServletRequestWrapper) request).getOrgRequest();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> request;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="XSS过滤工具类"><a href="#XSS过滤工具类" class="headerlink" title="XSS过滤工具类"></a>XSS过滤工具类</h4><p>这个是网上看到直接copy过来，肯定比自己写的全面多了，好东西。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</div><div class="line"><span class="keyword">import</span> java.util.logging.Logger;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * HTML filtering utility for protecting against XSS (Cross Site Scripting).</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This code is licensed LGPLv3</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This code is a Java port of the original work in PHP by Cal Hendersen.</span></div><div class="line"><span class="comment"> * http://code.iamcal.com/php/lib_filter/</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * The trickiest part of the translation was handling the differences in regex handling</span></div><div class="line"><span class="comment"> * between PHP and Java.  These resources were helpful in the process:</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html</span></div><div class="line"><span class="comment"> * http://us2.php.net/manual/en/reference.pcre.pattern.modifiers.php</span></div><div class="line"><span class="comment"> * http://www.regular-expressions.info/modifiers.html</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * A note on naming conventions: instance variables are prefixed with a "v"; global</span></div><div class="line"><span class="comment"> * constants are in all caps.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Sample use:</span></div><div class="line"><span class="comment"> * String input = ...</span></div><div class="line"><span class="comment"> * String clean = new HTMLFilter().filter( input );</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * The class is not thread safe. Create a new instance if in doubt.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * If you find bugs or have suggestions on improvement (especially regarding</span></div><div class="line"><span class="comment"> * performance), please contact us.  The latest version of this</span></div><div class="line"><span class="comment"> * source, and our contact details, can be found at http://xss-html-filter.sf.net</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Joseph O'Connell</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Cal Hendersen</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Michael Semb Wever</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HTMLFilter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** regex flag union representing /si modifiers in php **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REGEX_FLAGS_SI = Pattern.CASE_INSENSITIVE | Pattern.DOTALL;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_COMMENTS = Pattern.compile(<span class="string">"&lt;!--(.*?)--&gt;"</span>, Pattern.DOTALL);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_COMMENT = Pattern.compile(<span class="string">"^!--(.*)--$"</span>, REGEX_FLAGS_SI);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_TAGS = Pattern.compile(<span class="string">"&lt;(.*?)&gt;"</span>, Pattern.DOTALL);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_END_TAG = Pattern.compile(<span class="string">"^/([a-z0-9]+)"</span>, REGEX_FLAGS_SI);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_START_TAG = Pattern.compile(<span class="string">"^([a-z0-9]+)(.*?)(/?)$"</span>, REGEX_FLAGS_SI);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_QUOTED_ATTRIBUTES = Pattern.compile(<span class="string">"([a-z0-9]+)=([\"'])(.*?)\\2"</span>, REGEX_FLAGS_SI);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_UNQUOTED_ATTRIBUTES = Pattern.compile(<span class="string">"([a-z0-9]+)(=)([^\"\\s']+)"</span>, REGEX_FLAGS_SI);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_PROTOCOL = Pattern.compile(<span class="string">"^([^:]+):"</span>, REGEX_FLAGS_SI);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_ENTITY = Pattern.compile(<span class="string">"&amp;#(\\d+);?"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_ENTITY_UNICODE = Pattern.compile(<span class="string">"&amp;#x([0-9a-f]+);?"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_ENCODE = Pattern.compile(<span class="string">"%([0-9a-f]&#123;2&#125;);?"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_VALID_ENTITIES = Pattern.compile(<span class="string">"&amp;([^&amp;;]*)(?=(;|&amp;|$))"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_VALID_QUOTES = Pattern.compile(<span class="string">"(&gt;|^)([^&lt;]+?)(&lt;|$)"</span>, Pattern.DOTALL);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_END_ARROW = Pattern.compile(<span class="string">"^&gt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_BODY_TO_END = Pattern.compile(<span class="string">"&lt;([^&gt;]*?)(?=&lt;|$)"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_XML_CONTENT = Pattern.compile(<span class="string">"(^|&gt;)([^&lt;]*?)(?=&gt;)"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_STRAY_LEFT_ARROW = Pattern.compile(<span class="string">"&lt;([^&gt;]*?)(?=&lt;|$)"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_STRAY_RIGHT_ARROW = Pattern.compile(<span class="string">"(^|&gt;)([^&lt;]*?)(?=&gt;)"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_AMP = Pattern.compile(<span class="string">"&amp;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_QUOTE = Pattern.compile(<span class="string">"&lt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_LEFT_ARROW = Pattern.compile(<span class="string">"&lt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_RIGHT_ARROW = Pattern.compile(<span class="string">"&gt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern P_BOTH_ARROWS = Pattern.compile(<span class="string">"&lt;&gt;"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// @xxx could grow large... maybe use sesat's ReferenceMap</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String,Pattern&gt; P_REMOVE_PAIR_BLANKS = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Pattern&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String,Pattern&gt; P_REMOVE_SELF_BLANKS = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Pattern&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/** set of allowed html elements, along with allowed attributes for each element **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;String&gt;&gt; vAllowed;</div><div class="line">    <span class="comment">/** counts of open tags for each (allowable) html element **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; vTagCounts = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/** html elements which must always be self-closing (e.g. "&lt;img /&gt;") **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vSelfClosingTags;</div><div class="line">    <span class="comment">/** html elements which must always have separate opening and closing tags (e.g. "&lt;b&gt;&lt;/b&gt;") **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vNeedClosingTags;</div><div class="line">    <span class="comment">/** set of disallowed html elements **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vDisallowed;</div><div class="line">    <span class="comment">/** attributes which should be checked for valid protocols **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vProtocolAtts;</div><div class="line">    <span class="comment">/** allowed protocols **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vAllowedProtocols;</div><div class="line">    <span class="comment">/** tags which should be removed if they contain no content (e.g. "&lt;b&gt;&lt;/b&gt;" or "&lt;b /&gt;") **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vRemoveBlanks;</div><div class="line">    <span class="comment">/** entities allowed within html markup **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] vAllowedEntities;</div><div class="line">    <span class="comment">/** flag determining whether comments are allowed in input String. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> stripComment;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> encodeQuotes;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> vDebug = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * flag determining whether to try to make tags when presented with "unbalanced"</span></div><div class="line"><span class="comment">     * angle brackets (e.g. "&lt;b text &lt;/b&gt;" becomes "&lt;b&gt; text &lt;/b&gt;").  If set to false,</span></div><div class="line"><span class="comment">     * unbalanced angle brackets will be html escaped.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> alwaysMakeTags;</div><div class="line"></div><div class="line">    <span class="comment">/** Default constructor.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HTMLFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        vAllowed = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ArrayList&lt;String&gt; a_atts = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        a_atts.add(<span class="string">"href"</span>);</div><div class="line">        a_atts.add(<span class="string">"target"</span>);</div><div class="line">        vAllowed.put(<span class="string">"a"</span>, a_atts);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ArrayList&lt;String&gt; img_atts = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        img_atts.add(<span class="string">"src"</span>);</div><div class="line">        img_atts.add(<span class="string">"width"</span>);</div><div class="line">        img_atts.add(<span class="string">"height"</span>);</div><div class="line">        img_atts.add(<span class="string">"alt"</span>);</div><div class="line">        vAllowed.put(<span class="string">"img"</span>, img_atts);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ArrayList&lt;String&gt; no_atts = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        vAllowed.put(<span class="string">"b"</span>, no_atts);</div><div class="line">        vAllowed.put(<span class="string">"strong"</span>, no_atts);</div><div class="line">        vAllowed.put(<span class="string">"i"</span>, no_atts);</div><div class="line">        vAllowed.put(<span class="string">"em"</span>, no_atts);</div><div class="line"></div><div class="line">        vSelfClosingTags = <span class="keyword">new</span> String[]&#123;<span class="string">"img"</span>&#125;;</div><div class="line">        vNeedClosingTags = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"strong"</span>, <span class="string">"i"</span>, <span class="string">"em"</span>&#125;;</div><div class="line">        vDisallowed = <span class="keyword">new</span> String[]&#123;&#125;;</div><div class="line">        vAllowedProtocols = <span class="keyword">new</span> String[]&#123;<span class="string">"http"</span>, <span class="string">"mailto"</span>, <span class="string">"https"</span>&#125;; <span class="comment">// no ftp.</span></div><div class="line">        vProtocolAtts = <span class="keyword">new</span> String[]&#123;<span class="string">"src"</span>, <span class="string">"href"</span>&#125;;</div><div class="line">        vRemoveBlanks = <span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"strong"</span>, <span class="string">"i"</span>, <span class="string">"em"</span>&#125;;</div><div class="line">        vAllowedEntities = <span class="keyword">new</span> String[]&#123;<span class="string">"amp"</span>, <span class="string">"gt"</span>, <span class="string">"lt"</span>, <span class="string">"quot"</span>&#125;;</div><div class="line">        stripComment = <span class="keyword">true</span>;</div><div class="line">        encodeQuotes = <span class="keyword">true</span>;</div><div class="line">        alwaysMakeTags = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Set debug flag to true. Otherwise use default settings. See the default constructor.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> debug turn debug on with a true argument</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HTMLFilter</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> debug)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>();</div><div class="line">        vDebug = debug;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Map-parameter configurable constructor.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> conf map containing configuration. keys match field names.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HTMLFilter</span><span class="params">(<span class="keyword">final</span> Map&lt;String,Object&gt; conf)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vAllowed"</span>) : <span class="string">"configuration requires vAllowed"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vSelfClosingTags"</span>) : <span class="string">"configuration requires vSelfClosingTags"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vNeedClosingTags"</span>) : <span class="string">"configuration requires vNeedClosingTags"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vDisallowed"</span>) : <span class="string">"configuration requires vDisallowed"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vAllowedProtocols"</span>) : <span class="string">"configuration requires vAllowedProtocols"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vProtocolAtts"</span>) : <span class="string">"configuration requires vProtocolAtts"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vRemoveBlanks"</span>) : <span class="string">"configuration requires vRemoveBlanks"</span>;</div><div class="line">        <span class="keyword">assert</span> conf.containsKey(<span class="string">"vAllowedEntities"</span>) : <span class="string">"configuration requires vAllowedEntities"</span>;</div><div class="line"></div><div class="line">        vAllowed = Collections.unmodifiableMap((HashMap&lt;String, List&lt;String&gt;&gt;) conf.get(<span class="string">"vAllowed"</span>));</div><div class="line">        vSelfClosingTags = (String[]) conf.get(<span class="string">"vSelfClosingTags"</span>);</div><div class="line">        vNeedClosingTags = (String[]) conf.get(<span class="string">"vNeedClosingTags"</span>);</div><div class="line">        vDisallowed = (String[]) conf.get(<span class="string">"vDisallowed"</span>);</div><div class="line">        vAllowedProtocols = (String[]) conf.get(<span class="string">"vAllowedProtocols"</span>);</div><div class="line">        vProtocolAtts = (String[]) conf.get(<span class="string">"vProtocolAtts"</span>);</div><div class="line">        vRemoveBlanks = (String[]) conf.get(<span class="string">"vRemoveBlanks"</span>);</div><div class="line">        vAllowedEntities = (String[]) conf.get(<span class="string">"vAllowedEntities"</span>);</div><div class="line">        stripComment =  conf.containsKey(<span class="string">"stripComment"</span>) ? (Boolean) conf.get(<span class="string">"stripComment"</span>) : <span class="keyword">true</span>;</div><div class="line">        encodeQuotes = conf.containsKey(<span class="string">"encodeQuotes"</span>) ? (Boolean) conf.get(<span class="string">"encodeQuotes"</span>) : <span class="keyword">true</span>;</div><div class="line">        alwaysMakeTags = conf.containsKey(<span class="string">"alwaysMakeTags"</span>) ? (Boolean) conf.get(<span class="string">"alwaysMakeTags"</span>) : <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        vTagCounts.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">final</span> String msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (vDebug) &#123;</div><div class="line">            Logger.getAnonymousLogger().info(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//---------------------------------------------------------------</span></div><div class="line">    <span class="comment">// my versions of some PHP library functions</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">chr</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> decimal)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> String.valueOf((<span class="keyword">char</span>) decimal);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">htmlSpecialChars</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">        String result = s;</div><div class="line">        result = regexReplace(P_AMP, <span class="string">"&amp;amp;"</span>, result);</div><div class="line">        result = regexReplace(P_QUOTE, <span class="string">"&amp;quot;"</span>, result);</div><div class="line">        result = regexReplace(P_LEFT_ARROW, <span class="string">"&amp;lt;"</span>, result);</div><div class="line">        result = regexReplace(P_RIGHT_ARROW, <span class="string">"&amp;gt;"</span>, result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//---------------------------------------------------------------</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * given a user submitted input String, filter out any invalid or restricted</span></div><div class="line"><span class="comment">     * html.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> input text (i.e. submitted by a user) than may contain html</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> "clean" version of input, with only valid, whitelisted html elements allowed</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filter</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">        reset();</div><div class="line">        String s = input;</div><div class="line"></div><div class="line">        debug(<span class="string">"************************************************"</span>);</div><div class="line">        debug(<span class="string">"              INPUT: "</span> + input);</div><div class="line"></div><div class="line">        s = escapeComments(s);</div><div class="line">        debug(<span class="string">"     escapeComments: "</span> + s);</div><div class="line"></div><div class="line">        s = balanceHTML(s);</div><div class="line">        debug(<span class="string">"        balanceHTML: "</span> + s);</div><div class="line"></div><div class="line">        s = checkTags(s);</div><div class="line">        debug(<span class="string">"          checkTags: "</span> + s);</div><div class="line"></div><div class="line">        s = processRemoveBlanks(s);</div><div class="line">        debug(<span class="string">"processRemoveBlanks: "</span> + s);</div><div class="line"></div><div class="line">        s = validateEntities(s);</div><div class="line">        debug(<span class="string">"    validateEntites: "</span> + s);</div><div class="line"></div><div class="line">        debug(<span class="string">"************************************************\n\n"</span>);</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAlwaysMakeTags</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> alwaysMakeTags;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStripComments</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> stripComment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">escapeComments</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Matcher m = P_COMMENTS.matcher(s);</div><div class="line">        <span class="keyword">final</span> StringBuffer buf = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">if</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String match = m.group(<span class="number">1</span>); <span class="comment">//(.*?)</span></div><div class="line">            m.appendReplacement(buf, Matcher.quoteReplacement(<span class="string">"&lt;!--"</span> + htmlSpecialChars(match) + <span class="string">"--&gt;"</span>));</div><div class="line">        &#125;</div><div class="line">        m.appendTail(buf);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> buf.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">balanceHTML</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (alwaysMakeTags) &#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">// try and form html</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            s = regexReplace(P_END_ARROW, <span class="string">""</span>, s);</div><div class="line">            s = regexReplace(P_BODY_TO_END, <span class="string">"&lt;$1&gt;"</span>, s);</div><div class="line">            s = regexReplace(P_XML_CONTENT, <span class="string">"$1&lt;$2"</span>, s);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">// escape stray brackets</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            s = regexReplace(P_STRAY_LEFT_ARROW, <span class="string">"&amp;lt;$1"</span>, s);</div><div class="line">            s = regexReplace(P_STRAY_RIGHT_ARROW, <span class="string">"$1$2&amp;gt;&lt;"</span>, s);</div><div class="line"></div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">// the last regexp causes '&lt;&gt;' entities to appear</span></div><div class="line">            <span class="comment">// (we need to do a lookahead assertion so that the last bracket can</span></div><div class="line">            <span class="comment">// be used in the next pass of the regexp)</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            s = regexReplace(P_BOTH_ARROWS, <span class="string">""</span>, s);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">checkTags</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Matcher m = P_TAGS.matcher(s);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> StringBuffer buf = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">            String replaceStr = m.group(<span class="number">1</span>);</div><div class="line">            replaceStr = processTag(replaceStr);</div><div class="line">            m.appendReplacement(buf, Matcher.quoteReplacement(replaceStr));</div><div class="line">        &#125;</div><div class="line">        m.appendTail(buf);</div><div class="line"></div><div class="line">        s = buf.toString();</div><div class="line"></div><div class="line">        <span class="comment">// these get tallied in processTag</span></div><div class="line">        <span class="comment">// (remember to reset before subsequent calls to filter method)</span></div><div class="line">        <span class="keyword">for</span> (String key : vTagCounts.keySet()) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; vTagCounts.get(key); ii++) &#123;</div><div class="line">                s += <span class="string">"&lt;/"</span> + key + <span class="string">"&gt;"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">processRemoveBlanks</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">        String result = s;</div><div class="line">        <span class="keyword">for</span> (String tag : vRemoveBlanks) &#123;</div><div class="line">            <span class="keyword">if</span>(!P_REMOVE_PAIR_BLANKS.containsKey(tag))&#123;</div><div class="line">                P_REMOVE_PAIR_BLANKS.putIfAbsent(tag, Pattern.compile(<span class="string">"&lt;"</span> + tag + <span class="string">"(\\s[^&gt;]*)?&gt;&lt;/"</span> + tag + <span class="string">"&gt;"</span>));</div><div class="line">            &#125;</div><div class="line">            result = regexReplace(P_REMOVE_PAIR_BLANKS.get(tag), <span class="string">""</span>, result);</div><div class="line">            <span class="keyword">if</span>(!P_REMOVE_SELF_BLANKS.containsKey(tag))&#123;</div><div class="line">                P_REMOVE_SELF_BLANKS.putIfAbsent(tag, Pattern.compile(<span class="string">"&lt;"</span> + tag + <span class="string">"(\\s[^&gt;]*)?/&gt;"</span>));</div><div class="line">            &#125;</div><div class="line">            result = regexReplace(P_REMOVE_SELF_BLANKS.get(tag), <span class="string">""</span>, result);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">regexReplace</span><span class="params">(<span class="keyword">final</span> Pattern regex_pattern, <span class="keyword">final</span> String replacement, <span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">        Matcher m = regex_pattern.matcher(s);</div><div class="line">        <span class="keyword">return</span> m.replaceAll(replacement);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">processTag</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">        <span class="comment">// ending tags</span></div><div class="line">        Matcher m = P_END_TAG.matcher(s);</div><div class="line">        <span class="keyword">if</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String name = m.group(<span class="number">1</span>).toLowerCase();</div><div class="line">            <span class="keyword">if</span> (allowed(name)) &#123;</div><div class="line">                <span class="keyword">if</span> (!inArray(name, vSelfClosingTags)) &#123;</div><div class="line">                    <span class="keyword">if</span> (vTagCounts.containsKey(name)) &#123;</div><div class="line">                        vTagCounts.put(name, vTagCounts.get(name) - <span class="number">1</span>);</div><div class="line">                        <span class="keyword">return</span> <span class="string">"&lt;/"</span> + name + <span class="string">"&gt;"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// starting tags</span></div><div class="line">        m = P_START_TAG.matcher(s);</div><div class="line">        <span class="keyword">if</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String name = m.group(<span class="number">1</span>).toLowerCase();</div><div class="line">            <span class="keyword">final</span> String body = m.group(<span class="number">2</span>);</div><div class="line">            String ending = m.group(<span class="number">3</span>);</div><div class="line"></div><div class="line">            <span class="comment">//debug( "in a starting tag, name='" + name + "'; body='" + body + "'; ending='" + ending + "'" );</span></div><div class="line">            <span class="keyword">if</span> (allowed(name)) &#123;</div><div class="line">                String params = <span class="string">""</span>;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> Matcher m2 = P_QUOTED_ATTRIBUTES.matcher(body);</div><div class="line">                <span class="keyword">final</span> Matcher m3 = P_UNQUOTED_ATTRIBUTES.matcher(body);</div><div class="line">                <span class="keyword">final</span> List&lt;String&gt; paramNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                <span class="keyword">final</span> List&lt;String&gt; paramValues = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                <span class="keyword">while</span> (m2.find()) &#123;</div><div class="line">                    paramNames.add(m2.group(<span class="number">1</span>)); <span class="comment">//([a-z0-9]+)</span></div><div class="line">                    paramValues.add(m2.group(<span class="number">3</span>)); <span class="comment">//(.*?)</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (m3.find()) &#123;</div><div class="line">                    paramNames.add(m3.group(<span class="number">1</span>)); <span class="comment">//([a-z0-9]+)</span></div><div class="line">                    paramValues.add(m3.group(<span class="number">3</span>)); <span class="comment">//([^\"\\s']+)</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                String paramName, paramValue;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; paramNames.size(); ii++) &#123;</div><div class="line">                    paramName = paramNames.get(ii).toLowerCase();</div><div class="line">                    paramValue = paramValues.get(ii);</div><div class="line"></div><div class="line"><span class="comment">//          debug( "paramName='" + paramName + "'" );</span></div><div class="line"><span class="comment">//          debug( "paramValue='" + paramValue + "'" );</span></div><div class="line"><span class="comment">//          debug( "allowed? " + vAllowed.get( name ).contains( paramName ) );</span></div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (allowedAttribute(name, paramName)) &#123;</div><div class="line">                        <span class="keyword">if</span> (inArray(paramName, vProtocolAtts)) &#123;</div><div class="line">                            paramValue = processParamProtocol(paramValue);</div><div class="line">                        &#125;</div><div class="line">                        params += <span class="string">" "</span> + paramName + <span class="string">"=\""</span> + paramValue + <span class="string">"\""</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (inArray(name, vSelfClosingTags)) &#123;</div><div class="line">                    ending = <span class="string">" /"</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (inArray(name, vNeedClosingTags)) &#123;</div><div class="line">                    ending = <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (ending == <span class="keyword">null</span> || ending.length() &lt; <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (vTagCounts.containsKey(name)) &#123;</div><div class="line">                        vTagCounts.put(name, vTagCounts.get(name) + <span class="number">1</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        vTagCounts.put(name, <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ending = <span class="string">" /"</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="string">"&lt;"</span> + name + params + ending + <span class="string">"&gt;"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// comments</span></div><div class="line">        m = P_COMMENT.matcher(s);</div><div class="line">        <span class="keyword">if</span> (!stripComment &amp;&amp; m.find()) &#123;</div><div class="line">            <span class="keyword">return</span>  <span class="string">"&lt;"</span> + m.group() + <span class="string">"&gt;"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">processParamProtocol</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        s = decodeEntities(s);</div><div class="line">        <span class="keyword">final</span> Matcher m = P_PROTOCOL.matcher(s);</div><div class="line">        <span class="keyword">if</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String protocol = m.group(<span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (!inArray(protocol, vAllowedProtocols)) &#123;</div><div class="line">                <span class="comment">// bad protocol, turn into local anchor link instead</span></div><div class="line">                s = <span class="string">"#"</span> + s.substring(protocol.length() + <span class="number">1</span>, s.length());</div><div class="line">                <span class="keyword">if</span> (s.startsWith(<span class="string">"#//"</span>)) &#123;</div><div class="line">                    s = <span class="string">"#"</span> + s.substring(<span class="number">3</span>, s.length());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">decodeEntities</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">        Matcher m = P_ENTITY.matcher(s);</div><div class="line">        <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String match = m.group(<span class="number">1</span>);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> decimal = Integer.decode(match).intValue();</div><div class="line">            m.appendReplacement(buf, Matcher.quoteReplacement(chr(decimal)));</div><div class="line">        &#125;</div><div class="line">        m.appendTail(buf);</div><div class="line">        s = buf.toString();</div><div class="line"></div><div class="line">        buf = <span class="keyword">new</span> StringBuffer();</div><div class="line">        m = P_ENTITY_UNICODE.matcher(s);</div><div class="line">        <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String match = m.group(<span class="number">1</span>);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> decimal = Integer.valueOf(match, <span class="number">16</span>).intValue();</div><div class="line">            m.appendReplacement(buf, Matcher.quoteReplacement(chr(decimal)));</div><div class="line">        &#125;</div><div class="line">        m.appendTail(buf);</div><div class="line">        s = buf.toString();</div><div class="line"></div><div class="line">        buf = <span class="keyword">new</span> StringBuffer();</div><div class="line">        m = P_ENCODE.matcher(s);</div><div class="line">        <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String match = m.group(<span class="number">1</span>);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> decimal = Integer.valueOf(match, <span class="number">16</span>).intValue();</div><div class="line">            m.appendReplacement(buf, Matcher.quoteReplacement(chr(decimal)));</div><div class="line">        &#125;</div><div class="line">        m.appendTail(buf);</div><div class="line">        s = buf.toString();</div><div class="line"></div><div class="line">        s = validateEntities(s);</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">validateEntities</span><span class="params">(<span class="keyword">final</span> String s)</span> </span>&#123;</div><div class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">        <span class="comment">// validate entities throughout the string</span></div><div class="line">        Matcher m = P_VALID_ENTITIES.matcher(s);</div><div class="line">        <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">            <span class="keyword">final</span> String one = m.group(<span class="number">1</span>); <span class="comment">//([^&amp;;]*)</span></div><div class="line">            <span class="keyword">final</span> String two = m.group(<span class="number">2</span>); <span class="comment">//(?=(;|&amp;|$))</span></div><div class="line">            m.appendReplacement(buf, Matcher.quoteReplacement(checkEntity(one, two)));</div><div class="line">        &#125;</div><div class="line">        m.appendTail(buf);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> encodeQuotes(buf.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encodeQuotes</span><span class="params">(<span class="keyword">final</span> String s)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(encodeQuotes)&#123;</div><div class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer();</div><div class="line">            Matcher m = P_VALID_QUOTES.matcher(s);</div><div class="line">            <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">                <span class="keyword">final</span> String one = m.group(<span class="number">1</span>); <span class="comment">//(&gt;|^)</span></div><div class="line">                <span class="keyword">final</span> String two = m.group(<span class="number">2</span>); <span class="comment">//([^&lt;]+?)</span></div><div class="line">                <span class="keyword">final</span> String three = m.group(<span class="number">3</span>); <span class="comment">//(&lt;|$)</span></div><div class="line">                m.appendReplacement(buf, Matcher.quoteReplacement(one + regexReplace(P_QUOTE, <span class="string">"&amp;quot;"</span>, two) + three));</div><div class="line">            &#125;</div><div class="line">            m.appendTail(buf);</div><div class="line">            <span class="keyword">return</span> buf.toString();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> s;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">checkEntity</span><span class="params">(<span class="keyword">final</span> String preamble, <span class="keyword">final</span> String term)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">";"</span>.equals(term) &amp;&amp; isValidEntity(preamble)</div><div class="line">                ? <span class="string">'&amp;'</span> + preamble</div><div class="line">                : <span class="string">"&amp;amp;"</span> + preamble;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValidEntity</span><span class="params">(<span class="keyword">final</span> String entity)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> inArray(entity, vAllowedEntities);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">inArray</span><span class="params">(<span class="keyword">final</span> String s, <span class="keyword">final</span> String[] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String item : array) &#123;</div><div class="line">            <span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; item.equals(s)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">allowed</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (vAllowed.isEmpty() || vAllowed.containsKey(name)) &amp;&amp; !inArray(name, vDisallowed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">allowedAttribute</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> String paramName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> allowed(name) &amp;&amp; (vAllowed.isEmpty() || vAllowed.get(name).contains(paramName));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="web-xml配置filter"><a href="#web-xml配置filter" class="headerlink" title="web.xml配置filter"></a>web.xml配置filter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>xssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.devframe.filter.XssFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>xssFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="不进行过滤的请求"><a href="#不进行过滤的请求" class="headerlink" title="不进行过滤的请求"></a>不进行过滤的请求</h4><p>只能使用servlet 的request获取原始的请求，然后 再获取参数，处理，稍微麻烦一下下。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[某一个安静的寒冷的夜晚]]></title>
      <url>/20171213.html</url>
      <content type="html"><![CDATA[<p>感觉最近很迷。</p>
<p>一种不知所措的迷。</p>
<p>也许这就是活着，遇到，离开；没有一个人能够保持着这份单纯持续下去，这就是成长的代价。</p>
<p>相信每一天的太阳都是新的，每处总是充满了希望。</p>
<p>毕竟每个人都有自己的目的地，一个又一个的终点，每一次去触摸它的时候，都会有新的成长，也会失去某些东西。慢慢的就像一棵树，逐渐成长起来，最终都会明白，自己想要的是什么，想成为什么样子，但是来不及回忆以前的模样，只能更加用力的成长。</p>
<p>在这场旅行中，每段故事都交错在不同时空，最终，都将到达终点，我们将会找到自己的答案。</p>
<p>那个答案一定藏在我现在的目光无法企及的某个角落；带上草帽，有一颗真挚的内心去寻找它。</p>
<p>晚安……<br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[No Dialect mapping for JDBC type 的问题]]></title>
      <url>/java-no-dialect-mapping.html</url>
      <content type="html"><![CDATA[<p>问题很简单，就是方言不能把该数据库类型映射到Java中， 方言不认识这个数据库类型。</p>
<h4 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因"></a>出现原因</h4><ol>
<li>数据库字段类型和JAVA类型不匹配。</li>
<li>错误地配置了数据库方言。</li>
</ol>
<a id="more"></a>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先查看java.sql.Types类型，以及各种错误代码。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型</th>
<th>状态码</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>ARRAY</td>
<td>2003</td>
</tr>
<tr>
<td>2</td>
<td>BIGINT</td>
<td>-5</td>
</tr>
<tr>
<td>3</td>
<td>BINARY</td>
<td>-2</td>
</tr>
<tr>
<td>4</td>
<td>BIT</td>
<td>-7</td>
</tr>
<tr>
<td>5</td>
<td>BLOB</td>
<td>2004</td>
</tr>
<tr>
<td>6</td>
<td>BOOLEAN</td>
<td>16</td>
</tr>
<tr>
<td>7</td>
<td>CHAR</td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td>CLOB</td>
<td>2005</td>
</tr>
<tr>
<td>9</td>
<td>DATALINK</td>
<td>70</td>
</tr>
<tr>
<td>10</td>
<td>DATE</td>
<td>91</td>
</tr>
<tr>
<td>11</td>
<td>DECIMAL</td>
<td>3</td>
</tr>
<tr>
<td>12</td>
<td>DISTINCT</td>
<td>2001</td>
</tr>
<tr>
<td>13</td>
<td>DOUBLE</td>
<td>8</td>
</tr>
<tr>
<td>14</td>
<td>FLOAT</td>
<td>6</td>
</tr>
<tr>
<td>15</td>
<td>INTEGER</td>
<td>4</td>
</tr>
<tr>
<td>16</td>
<td>JAVA_OBJECT</td>
<td>2000</td>
</tr>
<tr>
<td>17</td>
<td>LONGNVARCHAR</td>
<td>-16</td>
</tr>
<tr>
<td>18</td>
<td>LONGVARBINARY</td>
<td>-4</td>
</tr>
<tr>
<td>19</td>
<td>LONGVARCHAR</td>
<td>-1</td>
</tr>
<tr>
<td>20</td>
<td>NCHAR</td>
<td>-15</td>
</tr>
<tr>
<td>21</td>
<td>NCLOB</td>
<td>2011</td>
</tr>
<tr>
<td>22</td>
<td>NULL</td>
<td>0</td>
</tr>
<tr>
<td>23</td>
<td>NUMERIC</td>
<td>2</td>
</tr>
<tr>
<td>24</td>
<td>NVARCHAR</td>
<td>-9</td>
</tr>
<tr>
<td>25</td>
<td>OTHER</td>
<td>1111</td>
</tr>
<tr>
<td>26</td>
<td>REAL</td>
<td>7</td>
</tr>
<tr>
<td>27</td>
<td>REF</td>
<td>2006</td>
</tr>
<tr>
<td>28</td>
<td>ROWID</td>
<td>-8</td>
</tr>
<tr>
<td>29</td>
<td>SMALLINT</td>
<td>5</td>
</tr>
<tr>
<td>30</td>
<td>SQLXML</td>
<td>2009</td>
</tr>
<tr>
<td>31</td>
<td>STRUCT</td>
<td>2002</td>
</tr>
<tr>
<td>32</td>
<td>TIME</td>
<td>92</td>
</tr>
<tr>
<td>33</td>
<td>TIMESTAMP</td>
<td>93</td>
</tr>
<tr>
<td>34</td>
<td>TINYINT</td>
<td>-6</td>
</tr>
<tr>
<td>35</td>
<td>VARBINARY</td>
<td>-3</td>
</tr>
<tr>
<td>36</td>
<td>VARCHAR</td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h5><p>根据错误代码就可以找到我们是哪一种错误。</p>
<p>比如：我这次出现的错误的是No Dialect mapping for JDBC type: 1111<br>输入 序号25 中的 other 。<br>复制sql 执行查询发现，它查出的数据库类型是<code>unknown</code>。</p>
<p>现在知道了问题所在，可以执行sql 的时候指定数据类型，各种数据库都有相应的函数或方法转换。</p>
<p>例外，如果是方言配置错误，需要配置正确的方言。</p>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><p>既然是方言的问题，我们可以取看下方言的实现，我使用的是postgresql，就以它为例，它的实现其实就是这样的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostgreSQL81Dialect</span> <span class="keyword">extends</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * Constructs a PostgreSQL81Dialect</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PostgreSQL81Dialect</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		registerColumnType( Types.BIT, <span class="string">"bool"</span> );</div><div class="line">		registerColumnType( Types.BIGINT, <span class="string">"int8"</span> );</div><div class="line">		registerColumnType( Types.SMALLINT, <span class="string">"int2"</span> );</div><div class="line">		registerColumnType( Types.TINYINT, <span class="string">"int2"</span> );</div><div class="line">		registerColumnType( Types.INTEGER, <span class="string">"int4"</span> );</div><div class="line">		registerColumnType( Types.CHAR, <span class="string">"char(1)"</span> );</div><div class="line">		registerColumnType( Types.VARCHAR, <span class="string">"varchar($l)"</span> );</div><div class="line">		registerColumnType( Types.FLOAT, <span class="string">"float4"</span> );</div><div class="line">		registerColumnType( Types.DOUBLE, <span class="string">"float8"</span> );</div><div class="line">		registerColumnType( Types.DATE, <span class="string">"date"</span> );</div><div class="line">		registerColumnType( Types.TIME, <span class="string">"time"</span> );</div><div class="line">		registerColumnType( Types.TIMESTAMP, <span class="string">"timestamp"</span> );</div><div class="line">		registerColumnType( Types.VARBINARY, <span class="string">"bytea"</span> );</div><div class="line">		registerColumnType( Types.BINARY, <span class="string">"bytea"</span> );</div><div class="line">		registerColumnType( Types.LONGVARCHAR, <span class="string">"text"</span> );</div><div class="line">		registerColumnType( Types.LONGVARBINARY, <span class="string">"bytea"</span> );</div><div class="line">		registerColumnType( Types.CLOB, <span class="string">"text"</span> );</div><div class="line">		registerColumnType( Types.BLOB, <span class="string">"oid"</span> );</div><div class="line">		registerColumnType( Types.NUMERIC, <span class="string">"numeric($p, $s)"</span> );</div><div class="line">		registerColumnType( Types.OTHER, <span class="string">"uuid"</span> );</div><div class="line"></div><div class="line">		registerFunction( <span class="string">"abs"</span>, <span class="keyword">new</span> StandardSQLFunction(<span class="string">"abs"</span>) );</div><div class="line">		registerFunction( <span class="string">"sign"</span>, <span class="keyword">new</span> StandardSQLFunction(<span class="string">"sign"</span>, StandardBasicTypes.INTEGER) );</div><div class="line">        </div><div class="line">       <span class="comment">//  ……太多了，</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>去看下 java.sql.Types的定义<br><img src="http://image.wuwii.com/java-types.png" alt="image"></p>
<p>明白了它是我们上面表格中状态码定义的地方。</p>
<p>所以我们做一个方言，只要在构造函数中实现相应类型码的对应类类型就可以了，上面是<code>1111</code> 出现错误，我只要将它的类型重新定义为<code>text</code>即可，就是它怎么写的我们就怎么写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.dialect.PostgreSQLDialect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.sql.Types.OTHER;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 重写方言，指定代码相应的数据库类型</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/12/11 14:28&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPostgreSQLDialect</span> <span class="keyword">extends</span> <span class="title">PostgreSQLDialect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserPostgreSQLDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        registerColumnType(OTHER, <span class="string">"text"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在数据库的配置文件中，将方言的类改成我们自定义的就OK了。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[leaflet加载谷歌地图]]></title>
      <url>/leaflet-load-googlemap.html</url>
      <content type="html"><![CDATA[<p>主要是使用： <a rel="external nofollow" target="_blank" href="https://github.com/htoooth/Leaflet.ChineseTmsProviders">ChineseTmsProviders</a> 插件完成的，详细使用可以进入它的文档了解，它还封装加载各种在线地图的方法，以谷歌地图为例。</p>
<ul>
<li><strong>Leaflet</strong>  <em>v-1.2.0</em> </li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Leaflet&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">    &lt;link rel="stylesheet" href="css/</span>leaflet.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body style="</span>position:absolute; left:<span class="number">0</span>; top:<span class="number">0</span>; display:block; width:<span class="number">100</span>%; height:<span class="number">100</span>%; overflow:hidden;<span class="string">"&gt;</span></div><div class="line"><span class="string">&lt;div style="</span>width:<span class="number">100</span>%; height:<span class="number">100</span>%<span class="string">" id="</span>map<span class="string">"&gt;&lt;/div&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;script src="</span>js/leaflet.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">&lt;script src="</span>js/leaflet.ChineseTmsProviders.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;script type='text/javascript'&gt;</span></div><div class="line"><span class="string">    /**</span></div><div class="line"><span class="string">     * 获取谷歌切片图层</span></div><div class="line"><span class="string">     */</span></div><div class="line"><span class="string">    var normalMap = L.tileLayer.chinaProvider('Google.Normal.Map', &#123;</span></div><div class="line"><span class="string">            maxZoom: 18,</span></div><div class="line"><span class="string">            minZoom: 5</span></div><div class="line"><span class="string">        &#125;),</span></div><div class="line"><span class="string">        satelliteMap = L.tileLayer.chinaProvider('Google.Satellite.Map', &#123;</span></div><div class="line"><span class="string">            maxZoom: 18,</span></div><div class="line"><span class="string">            minZoom: 5</span></div><div class="line"><span class="string">        &#125;);</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    var map = L.map("</span>map<span class="string">", &#123;</span></div><div class="line"><span class="string">        center: [30.460742, 114.416269],</span></div><div class="line"><span class="string">        zoom: 15,</span></div><div class="line"><span class="string">        layers: [satelliteMap],</span></div><div class="line"><span class="string">        zoomControl: false</span></div><div class="line"><span class="string">    &#125;);</span></div><div class="line"><span class="string">    /**</span></div><div class="line"><span class="string">     * 图层组</span></div><div class="line"><span class="string">     */</span></div><div class="line"><span class="string">    var baseLayers = &#123;</span></div><div class="line"><span class="string">        "</span>Google <span class="built_in">Map</span><span class="string">": normalMap,</span></div><div class="line"><span class="string">        "</span>Google Image<span class="string">": satelliteMap</span></div><div class="line"><span class="string">    &#125;;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">    L.control.layers(baseLayers, null).addTo(map);</span></div><div class="line"><span class="string">    L.control.zoom(&#123;</span></div><div class="line"><span class="string">        zoomInTitle: '放大',</span></div><div class="line"><span class="string">        zoomOutTitle: '缩小'</span></div><div class="line"><span class="string">    &#125;).addTo(map);</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure>
<p>地图：<br><img src="https://i.loli.net/2017/12/07/5a28ab3e0175b.png" alt="image"><br>影像：<br><img src="https://i.loli.net/2017/12/07/5a28ab3f4c7ee.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> leaflet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发容器ConcurrentHashMap]]></title>
      <url>/java-concurrenthashmap.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文出处：<a rel="external nofollow" target="_blank" href="http://pettyandydog.com/2017/07/27/concurrentHashMap/">pettyandydog</a></p>
</blockquote>
<p>HashMap在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触发扩容操作，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，所以HashMap是线程不安全的。<br>我们来了解另一个键值存储集合HashTable，它是线程安全的，它在所有涉及到多线程操作的都加上了synchronized关键字来锁住整个table，这就意味着所有的线程都在竞争一把锁，在多线程的环境下，它是安全的，但是无疑是效率低下的。<br>其实HashTable有很多的优化空间，锁住整个table这么粗暴的方法可以变相的柔和点，比如在多线程的环境下，对不同的数据集进行操作时其实根本就不需要去竞争一个锁，因为他们不同hash值，不会因为rehash造成线程不安全，所以互不影响，这就是锁分离技术，将锁的粒度降低，利用多个锁来控制多个小的table，这就是这篇文章的主角ConcurrentHashMap JDK1.7版本的核心思想。</p>
<p>ConcurrentHashMap可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个ConcurrentHashMap加锁。</p>
<a id="more"></a>
<p>　</p>
<h3 id="JDK1-7的实现"><a href="#JDK1-7的实现" class="headerlink" title="JDK1.7的实现"></a>JDK1.7的实现</h3><p>在java 8 以前ConcurrentHashMap使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p>
<p>java 8 中。实现线程安全的思想已经完全变了，它摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法。它沿用了与它同时期的HashMap版本的思想，底层依然由“数组”+链表+红黑树的方式思想，但是为了做到并发，又增加了很多辅助的类，例如TreeBin，Traverser等对象内部类。</p>
<p>ConcurrentHashMap为了提高本身的并发能力，在内部采用了一个叫做Segment的结构，一个Segment其实就是一个类Hash Table的结构，Segment内部维护了一个链表数组，我们用下面这一幅图来看下ConcurrentHashMap的内部结构：<br>　<br><img src="http://image.wuwii.com/concurrenthashmap1.png" alt="image"><br>　<br>从图中可以看到，ConcurrentHashMap内部分为很多个Segment，每一个Segment拥有一把锁，然后每个Segment（继承ReentrantLock）下面包含很多个HashEntry列表数组。对于一个key，需要经过三次（为什么要hash三次下文会详细讲解）hash操作，才能最终定位这个元素的位置，这三次hash分别为：</p>
<ol>
<li>对于一个key，先进行一次hash操作，得到hash值h1，也即h1 = hash1(key)；</li>
<li>将得到的h1的高几位进行第二次hash，得到hash值h2，也即h2 = hash2(h1高几位)，通过h2能够确定该元素的放在哪个Segment；</li>
<li>将得到的h1进行第三次hash，得到hash值h3，也即h3 = hash3(h1)，通过h3能够确定该元素放置在哪个HashEntry。
　<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4>ConcurrentHashMap的初始化是会通过位与运算来初始化Segment的大小，用ssize来表示，如下所示<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</div><div class="line">    ++sshift;</div><div class="line">    ssize &lt;&lt;= <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如上所示，因为ssize用位于运算来计算（<code>ssize &lt;&lt;=1</code>），所以Segment的大小取值都是以2的N次方，无关concurrencyLevel的取值，当然concurrencyLevel最大只能用16位的二进制来表示，即65536，换句话说，Segment的大小最多65536个，没有指定concurrencyLevel元素初始化，Segment的大小ssize默认为16</p>
<p>每一个Segment元素下的HashEntry的初始化也是按照位于运算来计算，用cap来表示，如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int cap = 1;</div><div class="line">while (cap &lt; c)</div><div class="line">    cap &lt;&lt;= 1;</div></pre></td></tr></table></figure>
<p>如上所示，HashEntry大小的计算也是2的N次方（<code>cap &lt;&lt;=1</code>）， cap的初始值为1，所以HashEntry最小的容量为2</p>
<h4 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h4><p>对于ConcurrentHashMap的数据插入，这里要进行两次Hash去定位数据的存储位置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div></pre></td></tr></table></figure></p>
<p>从上Segment的继承体系可以看出，Segment实现了ReentrantLock,也就带有锁的功能，当执行put操作时，会进行第一次key的hash来定位Segment的位置，如果该Segment还没有初始化，即通过CAS操作进行赋值，然后进行第二次hash操作，找到相应的HashEntry的位置，这里会利用继承过来的锁的特性，在将数据插入指定的HashEntry位置时（链表的尾端），会通过继承ReentrantLock的tryLock（）方法尝试去获取锁，如果获取成功就直接插入相应的位置，如果已经有线程获取该Segment的锁，那当前线程会以自旋的方式去继续的调用tryLock（）方法去获取锁，超过指定次数就挂起，等待唤醒。</p>
<h4 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h4><p>ConcurrentHashMap的get操作跟HashMap类似，只是ConcurrentHashMap第一次需要经过一次hash定位到Segment的位置，然后再hash定位到指定的HashEntry，遍历该HashEntry下的链表进行对比，成功就返回，不成功就返回null。</p>
<h4 id="size操作"><a href="#size操作" class="headerlink" title="size操作"></a>size操作</h4><p>计算ConcurrentHashMap的元素大小是一个有趣的问题，因为他是并发操作的，就是在你计算size的时候，他还在并发的插入数据，可能会导致你计算出来的size和你实际的size有相差（在你return size的时候，插入了多个数据），要解决这个问题，JDK1.7版本用两种方案。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) ensureSegment(j).lock(); <span class="comment">// force creation</span></div><div class="line">        &#125;</div><div class="line">        sum = <span class="number">0L</span>;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        overflow = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</div><div class="line">            Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class="line">            <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123; sum += seg.modCount; <span class="keyword">int</span> c = seg.count; <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</div><div class="line">               overflow = <span class="keyword">true</span>;</div><div class="line">            &#125; &#125;</div><div class="line">        <span class="keyword">if</span> (sum == last) <span class="keyword">break</span>;</div><div class="line">        last = sum; &#125; &#125;</div><div class="line"><span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</div><div class="line">            segmentAt(segments, j).unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>第一种方案他会使用不加锁的模式去尝试多次计算ConcurrentHashMap的size，最多三次，比较前后两次计算的结果，结果一致就认为当前没有元素加入，计算的结果是准确的；</li>
<li>第二种方案是如果第一种方案不符合，他就会给每个Segment加上锁，然后计算ConcurrentHashMap的size返回。</li>
</ol>
<h3 id="JDK1-8的实现"><a href="#JDK1-8的实现" class="headerlink" title="JDK1.8的实现"></a>JDK1.8的实现</h3><p>JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap，虽然在JDK1.8中还能看到Segment的数据结构，但是已经简化了属性，只是为了兼容旧版本。<br><img src="http://image.wuwii.com/concurrenthashmap2.png" alt="image"></p>
<p>在深入JDK1.8的put和get实现之前要知道一些常量设计和数据结构，这些是构成ConcurrentHashMap实现结构的基础，下面看一下基本属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// node数组最大容量：2^30=1073741824</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"><span class="comment">// 默认初始值，必须是2的幕数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</div><div class="line"><span class="comment">//数组可能最大值，需要与toArray（）相关方法关联</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"><span class="comment">//并发级别，遗留下来的，为兼容以前的版本</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</div><div class="line"><span class="comment">// 负载因子</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"><span class="comment">// 链表转红黑树阀值,&gt; 8 链表转换为红黑树</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line"><span class="comment">//树转链表阀值，小于等于6（tranfer时，lc、hc=0两个计数器分别++记录原bin、新binTreeNode数量，&lt;=UNTREEIFY_THRESHOLD 则untreeify(lo)）</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</div><div class="line"><span class="comment">// 2^15-1，help resize的最大线程数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</div><div class="line"><span class="comment">// 32-16=16，sizeCtl中记录size大小的偏移量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</div><div class="line"><span class="comment">// forwarding nodes的hash值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; </div><div class="line"><span class="comment">// 树根节点的hash值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; </div><div class="line"><span class="comment">// ReservationNode的hash值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; </div><div class="line"><span class="comment">// 可用处理器数量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</div><div class="line"><span class="comment">//存放node的数组</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</div><div class="line"><span class="comment">/*控制标识符，用来控制table的初始化和扩容的操作，不同的值有不同的含义</span></div><div class="line"><span class="comment"> *当为负数时：-1代表正在初始化，-N代表有N-1个线程正在 进行扩容</span></div><div class="line"><span class="comment"> *当为0时：代表当时的table还没有被初始化</span></div><div class="line"><span class="comment"> *当为正数时：表示初始化或者下一次进行扩容的大小</span></div><div class="line"><span class="comment">private transient volatile int sizeCtl;</span></div></pre></td></tr></table></figure>
<p>基本属性定义了ConcurrentHashMap的一些边界以及操作时的一些控制，下面看一些内部的一些结构组成，这些是整个ConcurrentHashMap整个数据结构的核心。</p>
<h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node是ConcurrentHashMap存储结构的基本单元，继承于HashMap中的Entry，用于存储数据，源代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//链表的数据结构</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    <span class="comment">//val和next都会在扩容时发生变化，所以加上volatile来保持可见性和禁止重排序</span></div><div class="line">    <span class="keyword">volatile</span> V val;</div><div class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</div><div class="line">    Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + val; &#125;</div><div class="line">    <span class="comment">//不允许更新value  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</div><div class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</div><div class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                (k == key || k.equals(key)) &amp;&amp;</div><div class="line">                (v == (u = val) || v.equals(u)));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//用于map中的get（）方法，子类重写</span></div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                K ek;</div><div class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Node数据结构很简单，从上可知，就是一个链表，但是只允许对数据进行查找，不允许进行修改。</p>
<h4 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h4><p>TreeNode继承与Node，但是数据结构换成了二叉树结构，它是红黑树的数据的存储结构，用于红黑树中存储数据，当链表的节点数大于8时会转换成红黑树的结构，他就是通过TreeNode作为存储结构代替Node来转换成黑红树源代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//树形结构的属性定义</span></div><div class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></div><div class="line">    TreeNode&lt;K,V&gt; left;</div><div class="line">    TreeNode&lt;K,V&gt; right;</div><div class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></div><div class="line">    <span class="keyword">boolean</span> red; <span class="comment">//标志红黑树的红节点</span></div><div class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</div><div class="line">             TreeNode&lt;K,V&gt; parent) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, val, next);</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> findTreeNode(h, k, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//根据key查找 从根节点开始找出相应的TreeNode，</span></div><div class="line">    <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">findTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">do</span>  &#123;</div><div class="line">                <span class="keyword">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</div><div class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</div><div class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">                    p = pl;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                    p = pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</div><div class="line">                    <span class="keyword">return</span> p;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</div><div class="line">                    p = pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</div><div class="line">                    p = pl;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</div><div class="line">                          (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                         (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</div><div class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> q;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    p = pl;</div><div class="line">            &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h4><p>TreeBin从字面含义中可以理解为存储树形结构的容器，而树形结构就是指TreeNode，所以TreeBin就是封装TreeNode的容器，它提供转换黑红树的一些条件和锁的控制，部分源码结构如下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">//指向TreeNode列表和根节点</span></div><div class="line">    TreeNode&lt;K,V&gt; root;</div><div class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</div><div class="line">    <span class="keyword">volatile</span> Thread waiter;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</div><div class="line">    <span class="comment">// 读写锁状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// 获取写锁的状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// 等待写锁的状态</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// 增加数据时读锁的状态</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化红黑树</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    TreeBin(TreeNode&lt;K,V&gt; b) &#123;</div><div class="line">        <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">this</span>.first = b;</div><div class="line">        TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;</div><div class="line">            next = (TreeNode&lt;K,V&gt;)x.next;</div><div class="line">            x.left = x.right = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</div><div class="line">                x.parent = <span class="keyword">null</span>;</div><div class="line">                x.red = <span class="keyword">false</span>;</div><div class="line">                r = x;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                K k = x.key;</div><div class="line">                <span class="keyword">int</span> h = x.hash;</div><div class="line">                Class&lt;?&gt; kc = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</div><div class="line">                    <span class="keyword">int</span> dir, ph;</div><div class="line">                    K pk = p.key;</div><div class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">                        dir = -<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                        dir = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</div><div class="line">                              (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</div><div class="line">                             (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</div><div class="line">                        dir = tieBreakOrder(k, pk);</div><div class="line">                        TreeNode&lt;K,V&gt; xp = p;</div><div class="line">                    <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</div><div class="line">                        x.parent = xp;</div><div class="line">                        <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</div><div class="line">                            xp.left = x;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            xp.right = x;</div><div class="line">                        r = balanceInsertion(r, x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.root = r;</div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><p>通过一个简单的例子以debug的视角看看ConcurrentHashMap的具体操作细节。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConcurrentHashMap</span></span>&#123;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        ConcurrentHashMap&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap(); <span class="comment">//初始化ConcurrentHashMap</span></div><div class="line">        <span class="comment">//新增个人信息</span></div><div class="line">        map.put(<span class="string">"id"</span>,<span class="string">"1"</span>);</div><div class="line">        map.put(<span class="string">"name"</span>,<span class="string">"andy"</span>);</div><div class="line">        map.put(<span class="string">"sex"</span>,<span class="string">"男"</span>);</div><div class="line">        <span class="comment">//获取姓名</span></div><div class="line">        String name = map.get(<span class="string">"name"</span>);</div><div class="line">        Assert.assertEquals(name,<span class="string">"andy"</span>);</div><div class="line">        <span class="comment">//计算大小</span></div><div class="line">        <span class="keyword">int</span> size = map.size();</div><div class="line">        Assert.assertEquals(size,<span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过new ConcurrentHashMap()来进行初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由上你会发现ConcurrentHashMap的初始化其实是一个空实现，并没有做任何事，这里后面会讲到，这也是和其他的集合类有区别的地方，初始化操作并不是在构造函数实现的，而是在put操作中实现，当然ConcurrentHashMap还提供了其他的构造函数，有指定容量大小或者指定负载因子，跟HashMap一样，这里就不做介绍了。</p>
<h4 id="put操作-1"><a href="#put操作-1" class="headerlink" title="put操作"></a>put操作</h4><p>在上面的例子中我们新增个人信息会调用put方法，我们来看下它的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">int</span> hash = spread(key.hashCode()); <span class="comment">//两次hash，减少hash冲突，可以均匀分布</span></div><div class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123; <span class="comment">//对这个table进行迭代</span></div><div class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</div><div class="line">        <span class="comment">//这里就是上面构造方法没有进行初始化，在这里进行判断，为null就调用initTable进行初始化，属于懒汉模式初始化</span></div><div class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">            tab = initTable();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;<span class="comment">//如果i位置没有数据，就直接无锁插入</span></div><div class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</div><div class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</div><div class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)<span class="comment">//如果在进行扩容，则先进行扩容操作</span></div><div class="line">            tab = helpTransfer(tab, f);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            V oldVal = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">//如果以上条件都不满足，那就要进行加锁操作，也就是存在hash冲突，锁住链表或者红黑树的头结点</span></div><div class="line">            <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">//表示该节点是链表结构</span></div><div class="line">                        binCount = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class="line">                            K ek;</div><div class="line">                            <span class="comment">//这里涉及到相同的key进行put就会覆盖原先的value</span></div><div class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                                ((ek = e.key) == key ||</div><div class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</div><div class="line">                                oldVal = e.val;</div><div class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                    e.val = value;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                            Node&lt;K,V&gt; pred = e;</div><div class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;  <span class="comment">//插入链表尾部</span></div><div class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</div><div class="line">                                                          value, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;<span class="comment">//红黑树结构</span></div><div class="line">                        Node&lt;K,V&gt; p;</div><div class="line">                        binCount = <span class="number">2</span>;</div><div class="line">                        <span class="comment">//红黑树结构旋转插入</span></div><div class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</div><div class="line">                            oldVal = p.val;</div><div class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</div><div class="line">                                p.val = value;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123; </div><div class="line">            <span class="comment">// 如果链表的长度大于8时就会进行红黑树的转换</span></div><div class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</div><div class="line">                    treeifyBin(tab, i);</div><div class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> oldVal;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    addCount(<span class="number">1L</span>, binCount);<span class="comment">//统计size，并且检查是否需要扩容</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个put的过程很清晰，对当前的table进行无条件自循环直到put成功，可以分成以下六步流程来概述。</p>
<ol>
<li>如果没有初始化就先调用initTable（）方法来进行初始化过程</li>
<li>如果没有hash冲突就直接CAS插入</li>
<li>如果还在进行扩容操作就先进行扩容</li>
<li>如果存在hash冲突，就加锁来保证线程安全，这里有两种情况，一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入，</li>
<li>最后一个如果该链表的数量大于阈值8，就要先转换成黑红树的结构，break再一次进入循环</li>
<li>如果添加成功就调用addCount（）方法统计size，并且检查是否需要扩容</li>
</ol>
<h5 id="第一步-initTable（）"><a href="#第一步-initTable（）" class="headerlink" title="第一步 initTable（）"></a>第一步 initTable（）</h5><p>现在我们来对每一步的细节进行源码分析，在第一步中，符合条件会进行初始化操作，我们来看看initTable（）方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Initializes table, using the size recorded in sizeCtl.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;<span class="comment">//空的table才能进入初始化操作</span></div><div class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>) <span class="comment">//sizeCtl&lt;0表示其他线程已经在初始化了或者扩容了，挂起当前线程 </span></div><div class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;<span class="comment">//CAS操作SIZECTL为-1，表示初始化状态</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];<span class="comment">//初始化</span></div><div class="line">                    table = tab = nt;</div><div class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);<span class="comment">//记录下次扩容的大小</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="第二步-Unsafe"><a href="#第二步-Unsafe" class="headerlink" title="第二步 Unsafe"></a>第二步 Unsafe</h5><p>在第二步中没有hash冲突就直接调用Unsafe的方法CAS插入该元素，进入第三步如果容器正在扩容，则会调用helpTransfer（）方法帮助扩容，现在我们跟进helpTransfer（）方法看看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *帮助从旧的table的元素复制到新的table中</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</div><div class="line">    Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</div><div class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123; <span class="comment">//新的table nextTba已经存在前提下才能帮助扩容</span></div><div class="line">        <span class="keyword">int</span> rs = resizeStamp(tab.length);</div><div class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</div><div class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</div><div class="line">                transfer(tab, nextTab);<span class="comment">//调用扩容方法</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nextTab;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> table;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实helpTransfer（）方法的目的就是调用多个工作线程一起帮助进行扩容，这样的效率就会更高，而不是只有检查到要扩容的那个线程进行扩容操作，其他线程就要等待扩容操作完成才能工作。</p>
<h5 id="第三步-扩容transfer（）"><a href="#第三步-扩容transfer（）" class="headerlink" title="第三步 扩容transfer（）"></a>第三步 扩容transfer（）</h5><p>既然这里涉及到扩容的操作，我们也一起来看看扩容方法transfer（）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = tab.length, stride;</div><div class="line">        <span class="comment">// 每核处理的量小于16，则强制赋值16</span></div><div class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></div><div class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];        <span class="comment">//构建一个nextTable对象，其容量为原来容量的两倍</span></div><div class="line">                nextTab = nt;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></div><div class="line">                sizeCtl = Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            nextTable = nextTab;</div><div class="line">            transferIndex = n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> nextn = nextTab.length;</div><div class="line">        <span class="comment">// 连接点指针，用于标志位（fwd的hash值为-1，fwd.nextTable=nextTab）</span></div><div class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</div><div class="line">        <span class="comment">// 当advance == true时，表明该节点已经处理过了</span></div><div class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</div><div class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</div><div class="line">            <span class="comment">// 控制 --i ,遍历原hash表中的节点</span></div><div class="line">            <span class="keyword">while</span> (advance) &#123;</div><div class="line">                <span class="keyword">int</span> nextIndex, nextBound;</div><div class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    i = -<span class="number">1</span>;</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 用CAS计算得到的transferIndex</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</div><div class="line">                        (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</div><div class="line">                                nextBound = (nextIndex &gt; stride ?</div><div class="line">                                        nextIndex - stride : <span class="number">0</span>))) &#123;</div><div class="line">                    bound = nextBound;</div><div class="line">                    i = nextIndex - <span class="number">1</span>;</div><div class="line">                    advance = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class="line">                <span class="keyword">int</span> sc;</div><div class="line">                <span class="comment">// 已经完成所有节点复制了</span></div><div class="line">                <span class="keyword">if</span> (finishing) &#123;</div><div class="line">                    nextTable = <span class="keyword">null</span>;</div><div class="line">                    table = nextTab;        <span class="comment">// table 指向nextTable</span></div><div class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);     <span class="comment">// sizeCtl阈值为原来的1.5倍</span></div><div class="line">                    <span class="keyword">return</span>;     <span class="comment">// 跳出死循环，</span></div><div class="line">                &#125;</div><div class="line">                <span class="comment">// CAS 更扩容阈值，在这里面sizectl值减一，说明新加入一个线程参与到扩容操作</span></div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    finishing = advance = <span class="keyword">true</span>;</div><div class="line">                    i = n; <span class="comment">// recheck before commit</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 遍历的节点为null，则放入到ForwardingNode 指针节点</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</div><div class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</div><div class="line">            <span class="comment">// f.hash == -1 表示遍历到了ForwardingNode节点，意味着该节点已经处理过了</span></div><div class="line">            <span class="comment">// 这里是控制并发扩容的核心</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 节点加锁</span></div><div class="line">                <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                    <span class="comment">// 节点复制工作</span></div><div class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                        Node&lt;K,V&gt; ln, hn;</div><div class="line">                        <span class="comment">// fh &gt;= 0 ,表示为链表节点</span></div><div class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// 构造两个链表  一个是原链表  另一个是原链表的反序排列</span></div><div class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</div><div class="line">                            Node&lt;K,V&gt; lastRun = f;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</div><div class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</div><div class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</div><div class="line">                                    runBit = b;</div><div class="line">                                    lastRun = p;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</div><div class="line">                                ln = lastRun;</div><div class="line">                                hn = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                hn = lastRun;</div><div class="line">                                ln = <span class="keyword">null</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</div><div class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">// 在nextTable i 位置处插上链表</span></div><div class="line">                            setTabAt(nextTab, i, ln);</div><div class="line">                            <span class="comment">// 在nextTable i + n 位置处插上链表</span></div><div class="line">                            setTabAt(nextTab, i + n, hn);</div><div class="line">                            <span class="comment">// 在table i 位置处插上ForwardingNode 表示该节点已经处理过了</span></div><div class="line">                            setTabAt(tab, i, fwd);</div><div class="line">                            <span class="comment">// advance = true 可以执行--i动作，遍历节点</span></div><div class="line">                            advance = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 如果是TreeBin，则按照红黑树进行处理，处理逻辑与上面一致</span></div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                                <span class="keyword">int</span> h = e.hash;</div><div class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</div><div class="line">                                        (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</div><div class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                                        lo = p;</div><div class="line">                                    <span class="keyword">else</span></div><div class="line">                                        loTail.next = p;</div><div class="line">                                    loTail = p;</div><div class="line">                                    ++lc;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                                        hi = p;</div><div class="line">                                    <span class="keyword">else</span></div><div class="line">                                        hiTail.next = p;</div><div class="line">                                    hiTail = p;</div><div class="line">                                    ++hc;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">// 扩容后树节点个数若&lt;=6，将树转链表</span></div><div class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class="line">                                    (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</div><div class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class="line">                                    (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</div><div class="line">                            setTabAt(nextTab, i, ln);</div><div class="line">                            setTabAt(nextTab, i + n, hn);</div><div class="line">                            setTabAt(tab, i, fwd);</div><div class="line">                            advance = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>扩容过程有点复杂，这里主要涉及到多线程并发扩容,ForwardingNode的作用就是支持扩容操作，将已处理的节点和空节点置为ForwardingNode，并发处理时多个线程经过ForwardingNode就表示已经遍历了，就往后遍历，下图是多线程合作扩容的过程：<br><img src="http://image.wuwii.com/concurrenthashmap1.png" alt="image"></p>
<h5 id="第四步-加入"><a href="#第四步-加入" class="headerlink" title="第四步 加入"></a>第四步 加入</h5><p>向链表或者红黑树里加节点</p>
<h5 id="第五步-链表转红黑树"><a href="#第五步-链表转红黑树" class="headerlink" title="第五步 链表转红黑树"></a>第五步 链表转红黑树</h5><p>介绍完扩容过程，我们再次回到put流程，在第四步中是向链表或者红黑树里加节点，到第五步，会调用treeifyBin（）方法进行链表转红黑树的过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</div><div class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//如果整个table的数量小于64，就扩容至原来的一倍，不转红黑树了</span></div><div class="line">        <span class="comment">//因为这个阈值扩容可以减少hash冲突，不必要去转红黑树</span></div><div class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY) </div><div class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (b) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</div><div class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                        <span class="comment">//封装成TreeNode</span></div><div class="line">                        TreeNode&lt;K,V&gt; p =</div><div class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</div><div class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</div><div class="line">                            hd = p;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            tl.next = p;</div><div class="line">                        tl = p;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//通过TreeBin对象对TreeNode转换成红黑树</span></div><div class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="第六步-添加成功addCount（）"><a href="#第六步-添加成功addCount（）" class="headerlink" title="第六步 添加成功addCount（）"></a>第六步 添加成功addCount（）</h5><p>到第六步表示已经数据加入成功了，现在调用addCount()方法计算ConcurrentHashMap的size，在原来的基础上加一，现在来看看addCount()方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</div><div class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</div><div class="line">    <span class="comment">//更新baseCount，table的数量，counterCells表示元素个数的变化</span></div><div class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</div><div class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</div><div class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</div><div class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//如果多个线程都在执行，则CAS失败，执行fullAddCount，全部加入count</span></div><div class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> || </div><div class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</div><div class="line">            !(uncontended =</div><div class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</div><div class="line">            fullAddCount(x, uncontended);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        s = sumCount();</div><div class="line">    &#125;</div><div class="line">     <span class="comment">//check&gt;=0表示需要进行扩容操作</span></div><div class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</div><div class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</div><div class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</div><div class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</div><div class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</div><div class="line">                    transferIndex &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</div><div class="line">                    transfer(tab, nt);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//当前线程发起库哦哦让操作，nextTable=null</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</div><div class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</div><div class="line">                transfer(tab, <span class="keyword">null</span>);</div><div class="line">            s = sumCount();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>put的流程现在已经分析完了，你可以从中发现，他在并发处理中使用的是乐观锁，当有冲突的时候才进行并发处理，而且流程步骤很清晰，但是细节设计的很复杂，毕竟多线程的场景也复杂。</p>
<h4 id="get操作-1"><a href="#get操作-1" class="headerlink" title="get操作"></a>get操作</h4><p>我们现在要回到开始的例子中，我们对个人信息进行了新增之后，我们要获取所新增的信息，使用String name = map.get(“name”)获取新增的name信息，现在我们依旧用debug的方式来分析下ConcurrentHashMap的获取方法get()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</div><div class="line">    <span class="keyword">int</span> h = spread(key.hashCode()); <span class="comment">//计算两次hash</span></div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;<span class="comment">//读取首节点的Node元素</span></div><div class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123; <span class="comment">//如果该节点就是首节点就返回</span></div><div class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</div><div class="line">                <span class="keyword">return</span> e.val;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//hash值为负值表示正在扩容，这个时候查的是ForwardingNode的find方法来定位到nextTable来</span></div><div class="line">        <span class="comment">//查找，查找到就返回</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;<span class="comment">//既不是首节点也不是ForwardingNode，那就往下遍历</span></div><div class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</div><div class="line">                <span class="keyword">return</span> e.val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ConcurrentHashMap的get操作的流程很简单，也很清晰，可以分为三个步骤来描述</p>
<ol>
<li>计算hash值，定位到该table索引位置，如果是首节点符合就返回；</li>
<li>如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回；</li>
<li>以上都不符合的话，就往下遍历节点，匹配就返回，否则最后就返回null。</li>
</ol>
<h4 id="size操作-1"><a href="#size操作-1" class="headerlink" title="size操作"></a>size操作</h4><p>最后我们来看下例子中最后获取size的方式<code>int size = map.size()</code>;，现在让我们看下size()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> n = sumCount();</div><div class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</div><div class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</div><div class="line">            (<span class="keyword">int</span>)n);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    CounterCell[] as = counterCells; CounterCell a; <span class="comment">//变化的数量</span></div><div class="line">    <span class="keyword">long</span> sum = baseCount;</div><div class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</div><div class="line">                sum += a.value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JDK1.8版本中，对于size的计算，在扩容和addCount()方法就已经有处理了，JDK1.7是在调用size()方法才去计算，其实在并发集合中去计算size是没有多大的意义的，因为size是实时在变的，只能计算某一刻的大小，但是某一刻太快了，人的感知是一个时间段，所以并不是很精确。</p>
<h3 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h3><p>其实可以看出JDK1.8版本的ConcurrentHashMap的数据结构已经接近HashMap，相对而言，ConcurrentHashMap只是增加了同步的操作来控制并发，从JDK1.7版本的ReentrantLock+Segment+HashEntry，到JDK1.8版本中synchronized+CAS+HashEntry+红黑树,相对而言，总结如下思考：</p>
<ol>
<li>JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li>
<li>JDK1.8版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构了，由于粒度的降低，实现的复杂度也增加了</li>
<li>JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</li>
<li>JDK1.8为什么使用内置锁synchronized来代替重入锁ReentrantLock，我觉得有以下几点：</li>
</ol>
<ul>
<li>因为粒度降低了，在相对而言的低粒度加锁方式，synchronized并不比ReentrantLock差，在粗粒度加锁中ReentrantLock可能通过Condition来控制各个低粒度的边界，更加的灵活，而在低粒度中，Condition的优势就没有了;  </li>
<li>JVM的开发团队从来都没有放弃synchronized，而且基于JVM的synchronized优化空间更大，使用内嵌的关键字比使用API更加自然</li>
<li>在大量的数据操作下，对于JVM的内存压力，基于API的ReentrantLock会开销更多的内存，虽然不是瓶颈，但是也是一个选择依据</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/u010412719/article/details/52145145">http://blog.csdn.net/u010412719/article/details/52145145</a></li>
<li><a rel="external nofollow" target="_blank" href="http://www.jianshu.com/p/e694f1e868ec">http://www.jianshu.com/p/e694f1e868ec</a></li>
<li><a rel="external nofollow" target="_blank" href="https://my.oschina.net/liuxiaomian/blog/880088">https://my.oschina.net/liuxiaomian/blog/880088</a></li>
<li><a rel="external nofollow" target="_blank" href="https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/">https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/</a></li>
<li><a rel="external nofollow" target="_blank" href="http://cmsblogs.com/?p=2283">http://cmsblogs.com/?p=2283</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition]]></title>
      <url>/java-thread-cooperation.html</url>
      <content type="html"><![CDATA[<p>原文链接 <a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920385.html">Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition</a></p>
<p>在前面我们将了很多关于同步的问题，然而在现实中，需要线程之间的协作。比如说最经典的生产者-消费者模型：当队列满时，生产者需要等待队列有空间才能继续往里面放入商品，而在等待的期间内，生产者必须释放对临界资源（即队列）的占用权。因为生产者如果不释放对临界资源的占用权，那么消费者就无法消费队列中的商品，就不会让队列有空间，那么生产者就会一直无限等待下去。因此，一般情况下，当队列满时，会让生产者交出对临界资源的占用权，并进入挂起状态。然后等待消费者消费了商品，然后消费者通知生产者队列有空间了。同样地，当队列空时，消费者也必须等待，等待生产者通知它队列中有商品了。这种互相通信的过程就是线程间的协作。</p>
<a id="more"></a>
<p>今天我们就来探讨一下Java中线程协作的最常见的两种方式：利用Object.wait()、Object.notify()和使用Condition。</p>
<h3 id="wait-、notify-和notifyAll"><a href="#wait-、notify-和notifyAll" class="headerlink" title="wait()、notify()和notifyAll()"></a>wait()、notify()和notifyAll()</h3><p>wait()、notify()和notifyAll()是Object类中的方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Wakes up a single thread that is waiting on this object's</span></div><div class="line"><span class="comment"> * monitor. If any threads are waiting on this object, one of them</span></div><div class="line"><span class="comment"> * is chosen to be awakened. The choice is arbitrary and occurs at</span></div><div class="line"><span class="comment"> * the discretion of the implementation. A thread waits on an object's</span></div><div class="line"><span class="comment"> * monitor by calling one of the wait methods</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Wakes up all threads that are waiting on this object's monitor. A</span></div><div class="line"><span class="comment"> * thread waits on an object's monitor by calling one of the</span></div><div class="line"><span class="comment"> * wait methods.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Causes the current thread to wait until either another thread invokes the</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.lang.Object#notify()&#125; method or the</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.lang.Object#notifyAll()&#125; method for this object, or a</span></div><div class="line"><span class="comment"> * specified amount of time has elapsed.</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * The current thread must own this object's monitor.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</div></pre></td></tr></table></figure></p>
<p>从这三个方法的文字描述可以知道以下几点信息：</p>
<p>　　1. wait()、notify()和notifyAll()方法是本地方法，并且为final方法，无法被重写。</p>
<p>　　2. 调用某个对象的wait()方法能让当前线程阻塞，并且当前线程必须拥有此对象的monitor（即锁）</p>
<p>　　3. 调用某个对象的notify()方法能够唤醒一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；</p>
<p>　　4. 调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程；</p>
<p>　　有朋友可能会有疑问：为何这三个不是Thread类声明中的方法，而是Object类中声明的方法（当然由于Thread类继承了Object类，所以Thread也可以调用者三个方法）？其实这个问题很简单，由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。而不是用当前线程来操作，因为当前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂了。</p>
<p>　　上面已经提到，如果调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</p>
<p>　　调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁）；</p>
<p>　　notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。</p>
<p>　　同样地，调用某个对象的notify()方法，当前线程也必须拥有这个对象的monitor，因此调用notify()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</p>
<p>　　nofityAll()方法能够唤醒所有正在等待该对象的monitor的线程，这一点与notify()方法是不同的。</p>
<p>　　这里要注意一点：notify()和notifyAll()方法只是唤醒等待该对象的monitor的线程，并不决定哪个线程能够获取到monitor。</p>
<p>　　举个简单的例子：假如有三个线程Thread1、Thread2和Thread3都在等待对象objectA的monitor，此时Thread4拥有对象objectA的monitor，当在Thread4中调用objectA.notify()方法之后，Thread1、Thread2和Thread3只有一个能被唤醒。注意，被唤醒不等于立刻就获取了objectA的monitor。假若在Thread4中调用objectA.notifyAll()方法，则Thread1、Thread2和Thread3三个线程都会被唤醒，至于哪个线程接下来能够获取到objectA的monitor就具体依赖于操作系统的调度了。</p>
<p>　　上面尤其要注意一点，一个线程被唤醒不代表立即获取了对象的monitor，只有等调用完notify()或者notifyAll()并退出synchronized块，释放对象锁后，其余线程才可获得锁执行。</p>
<p>下面看一个例子就明白了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</div><div class="line">        Thread2 thread2 = <span class="keyword">new</span> Thread2();</div><div class="line">         </div><div class="line">        thread1.start();</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">200</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        thread2.start();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (object) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    object.wait();</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"获取到了锁"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (object) &#123;</div><div class="line">                object.notify();</div><div class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"调用了object.notify()"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"释放了锁"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无论运行多少次，运行结果必定是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">线程Thread-1调用了object.notify()</div><div class="line">线程Thread-1释放了锁</div><div class="line">线程Thread-0获取到了锁</div></pre></td></tr></table></figure></p>
<h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>Condition是在java 1.5中才出现的，它用来替代传统的Object的wait()、notify()实现线程间的协作，相比使用Object的wait()、notify()，使用Condition1的await()、signal()这种方式实现线程间协作更加安全和高效。因此通常来说比较推荐使用Condition，在阻塞队列那一篇博文中就讲述到了，阻塞队列实际上是使用了Condition来模拟线程间协作。</p>
<ul>
<li>Condition是个接口，基本的方法就是await()和signal()方法；</li>
<li>Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition()；</li>
<li>调用Condition的await()和signal()方法，都必须在lock保护之内，就是说必须在lock.lock()和lock.unlock之间才可以使用。</li>
</ul>
<p>Conditon中的await()对应Object的wait()；</p>
<p>Condition中的signal()对应Object的notify()；</p>
<p>Condition中的signalAll()对应Object的notifyAll()。
　　</p>
<h3 id="生产者-消费者模型的实现"><a href="#生产者-消费者模型的实现" class="headerlink" title="生产者-消费者模型的实现"></a>生产者-消费者模型的实现</h3><h4 id="使用Object的wait-和notify-实现"><a href="#使用Object的wait-和notify-实现" class="headerlink" title="使用Object的wait()和notify()实现"></a>使用Object的wait()和notify()实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        Producer producer = test.new Producer();</div><div class="line">        Consumer consumer = test.new Consumer();</div><div class="line">          </div><div class="line">        producer.start();</div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            consume();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">synchronized</span> (queue) &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列空，等待数据"</span>);</div><div class="line">                            queue.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                            queue.notify();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.poll();          <span class="comment">//每次移走队首元素</span></div><div class="line">                    queue.notify();</div><div class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            produce();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">synchronized</span> (queue) &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == queueSize)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列满，等待有空余空间"</span>);</div><div class="line">                            queue.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                            queue.notify();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.offer(<span class="number">1</span>);        <span class="comment">//每次插入一个元素</span></div><div class="line">                    queue.notify();</div><div class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用Condition实现"><a href="#使用Condition实现" class="headerlink" title="使用Condition实现"></a>使用Condition实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</div><div class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">private</span> Condition notFull = lock.newCondition();</div><div class="line">    <span class="keyword">private</span> Condition notEmpty = lock.newCondition();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        Producer producer = test.new Producer();</div><div class="line">        Consumer consumer = test.new Consumer();</div><div class="line">          </div><div class="line">        producer.start();</div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            consume();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                lock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列空，等待数据"</span>);</div><div class="line">                            notEmpty.await();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.poll();                <span class="comment">//每次移走队首元素</span></div><div class="line">                    notFull.signal();</div><div class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</div><div class="line">                &#125; <span class="keyword">finally</span>&#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">          </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            produce();</div><div class="line">        &#125;</div><div class="line">          </div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                lock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span>(queue.size() == queueSize)&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            System.out.println(<span class="string">"队列满，等待有空余空间"</span>);</div><div class="line">                            notFull.await();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    queue.offer(<span class="number">1</span>);        <span class="comment">//每次插入一个元素</span></div><div class="line">                    notEmpty.signal();</div><div class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</div><div class="line">                &#125; <span class="keyword">finally</span>&#123;</div><div class="line">                    lock.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>《Java编程思想》</li>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/ns_code/article/details/17225469">http://blog.csdn.net/ns_code/article/details/17225469</a></li>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/ghsau/article/details/7481142">http://blog.csdn.net/ghsau/article/details/7481142</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里巴巴Java开发手册中容易踩的坑]]></title>
      <url>/alibaba-java-prochip.html</url>
      <content type="html"><![CDATA[<p>阿里巴巴Java开发手册地址：<a rel="external nofollow" target="_blank" href="https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E7%BA%AA%E5%BF%B5%E7%89%88%EF%BC%89.pdf">阿里巴巴Java开发手册（纪念版）.pdf</a></p>
<p>开始看的时候还是<strong>终极版</strong>，不知道什么时候又出到了<strong>纪念版</strong>，听说之前还有个<strong>完美版</strong>，感觉词穷了，期待下一版本<strong>狗年限定版</strong>。<br>撇开了，<strong>很实用的规范内容，值得看</strong>。</p>
<p>记录下个人需要重点学习的地方，以及平时容易忽略的问题。</p>
<a id="more"></a>
<hr>
<h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><h4 id="各层命名规约"><a href="#各层命名规约" class="headerlink" title="各层命名规约"></a>各层命名规约</h4><h5 id="Service-DAO-层方法命名规约"><a href="#Service-DAO-层方法命名规约" class="headerlink" title="Service/DAO 层方法命名规约"></a>Service/DAO 层方法命名规约</h5><ol>
<li>获取单个对象的方法用 get 做前缀。   </li>
<li>获取多个对象的方法用 list 做前缀。  </li>
<li>获取统计值的方法用 count 做前缀。   </li>
<li>插入的方法用 save/insert 做前缀。   </li>
<li>删除的方法用 remove/delete 做前缀。    </li>
<li>修改的方法用 update 做前缀。 </li>
</ol>
<h5 id="领域模型命名规约"><a href="#领域模型命名规约" class="headerlink" title="领域模型命名规约"></a>领域模型命名规约</h5><ol>
<li>数据对象：xxxDO，xxx 即为数据表名。    </li>
<li>数据传输对象：xxxDTO，xxx 为业务领域相关的名称。 </li>
<li>展示对象：xxxVO，xxx 一般为网页名称。  </li>
<li>POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。 </li>
</ol>
<h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><ol>
<li>不允许任何魔法值（即未经定义的常量）直接出现在代码中。 </li>
<li>将包或者工程内部的共享变量，放在相应的constant 下，例如，一个模块下的常量：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 常量</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2016年11月15日 下午1:23:52</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constant</span> </span>&#123;</div><div class="line">	<span class="comment">/** 超级管理员ID */</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUPER_ADMIN = <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 菜单类型</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@date</span> 2016年11月15日 下午1:24:29</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> MenuType &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 目录</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    	CATALOG(<span class="number">0</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 菜单</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        MENU(<span class="number">1</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 按钮</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        BUTTON(<span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MenuType</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 定时任务状态</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ScheduleStatus &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 正常</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    	NORMAL(<span class="number">0</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 暂停</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    	PAUSE(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ScheduleStatus</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 云服务商</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> CloudService &#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 七牛云</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        QINIU(<span class="number">1</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 阿里云</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        ALIYUN(<span class="number">2</span>),</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 腾讯云</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        QCLOUD(<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CloudService</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="OOP归约"><a href="#OOP归约" class="headerlink" title="OOP归约"></a>OOP归约</h3><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</p>
<ul>
<li>正例：”test”.equals(object); </li>
<li>反例：object.equals(“test”); </li>
<li>说明：推荐使用 java.util.Objects#equals（JDK7 引入的工具类）。</li>
</ul>
<hr>
<p>【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。 </p>
<ul>
<li>说明：对于 Integer var = ?  在-128 至 127 范围内的赋值，Integer 对象是在<br>IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑， 推荐使用 equals 方法进行判断。</li>
</ul>
<hr>
<p>关于基本数据类型与包装数据类型的使用标准如下： </p>
<ul>
<li>【强制】所有的 POJO 类属性必须使用包装数据类型。</li>
<li>【强制】RPC 方法的返回值和参数必须使用包装数据类型。 </li>
<li><p>【推荐】所有的局部变量使用基本数据类型。</p>
<ul>
<li>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，都由使用者来保证。</li>
<li>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。  </li>
<li>反例：比如显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用 不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线。所以包装 数据类型的 null 值，能够表示额外的信息，如：远程调用失败，异常退出。 </li>
</ul>
</li>
</ul>
<hr>
<p> 【强制】POJO 类必须写 toString 方法。使用 IDE 的中工具：source&gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。</p>
<p> 说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString()方法打印其属性值，便于排 查问题。 </p>
<hr>
<p> 【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无 内容的检查，否则会有抛 IndexOutOfBoundsException 的风险。 </p>
<p> 说明：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"a,b,c,,"</span>; </div><div class="line">String[] ary = str.split(<span class="string">","</span>); </div><div class="line"><span class="comment">// 预期大于 3，结果是 3</span></div><div class="line">System.out.println(ary.length);</div></pre></td></tr></table></figure></p>
<hr>
<p> 【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字： </p>
<ol>
<li>不允许被继承的类，如：String 类。 </li>
<li>不允许修改引用的域对象，如：POJO 类的域变量。  </li>
<li>不允许被重写的方法，如：POJO 类的 setter 方法。 </li>
<li>不允许运行过程中重新赋值的局部变量。</li>
<li>避免上下文重复使用一个变量，使用 final 描述可以强制重新定义一个变量，方便更好 地进行重构。 </li>
</ol>
<hr>
<p>【推荐】类成员与方法访问控制从严： </p>
<ol>
<li>如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。  </li>
<li>工具类不允许有 public 或 default 构造方法。  </li>
<li>类非 static 成员变量并且与子类共享，必须是 protected。  </li>
<li>类非 static 成员变量并且仅在本类使用，必须是 private。</li>
<li>类 static 成员变量如果仅在本类使用，必须是 private。 </li>
<li>若是 static 成员变量，必须考虑是否为 final。  </li>
<li>类成员方法只供类内部调用，必须是 private。</li>
<li>类成员方法只对继承类公开，那么限制为 protected。 </li>
</ol>
<ul>
<li>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。 思考：如果是一个 private 的方法，想删除就删除，可是一个 public 的 service 方法，或者 一个 public 的成员变量，删除一下，不得手心冒点汗吗？变量像自己的小孩，尽量在自己的 视线内，变量作用域太大，无限制的到处跑，那么你会担心的。 </li>
</ul>
<h3 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h3><p>【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</p>
<ol>
<li>只要重写 equals，就必须重写 hashCode。 </li>
<li>因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的 对象必须重写这两个方法。</li>
<li>如果自定义对象做为 Map 的键，那么必须重写 hashCode 和 equals。 说明：String 重写了 hashCode 和 equals 方法，所以我们可以非常愉快地使用 String 对象 作为 key 来使用。</li>
</ol>
<p>没有特需要求，使用编辑器自动生成的就好，这个对Hash表相关的数据结构的存储和读取有着很大的影响，重写的好，可以减少Hash碰撞。</p>
<hr>
<ul>
<li>【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全 一样的数组，大小就是 list.size()。 </li>
<li>说明：使用 toArray 带参方法，入参分配的数组空间不够大时，toArray 方法内部将重新分配 内存空间，并返回新数组地址；如果数组元素大于实际所需，下标为[ list.size() ]的数组 元素将被置为 null，其它数组元素保持原值，因此最好将方法入参数组大小定义与集合元素 个数一致。 </li>
<li>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它 类型数组将出现 ClassCastException 错误。 </li>
<li>正例： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">2</span>);   </div><div class="line">list.add(<span class="string">"guan"</span>);      </div><div class="line">list.add(<span class="string">"bao"</span>);      </div><div class="line">String[] array = <span class="keyword">new</span> String[list.size()];    </div><div class="line">array = list.toArray(array);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【强制】使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方 法，它的 add/remove/clear 方法会抛出 UnsupportedOperationException 异常。 说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只是转换接口，后台的数据仍是数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] str = new String[] &#123; &quot;you&quot;, &quot;wu&quot; &#125;;  </div><div class="line">List list = Arrays.asList(str);</div></pre></td></tr></table></figure></p>
<ul>
<li>第一种情况：list.add(“yangguanbao”); 运行时异常。</li>
<li>第二种情况：str[0] = “gujin”; 那么 list.get(0)也会随之修改。 </li>
</ul>
<hr>
<p>【强制】泛型通配符<code>&lt;? extends T&gt;</code>来接收返回的数据，此写法的泛型集合不能使用 add 方 法，而<code>&lt;? super T&gt;</code>不能使用 get 方法，做为接口调用赋值时易出错。 </p>
<hr>
<p>【强制】不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。 </p>
<ul>
<li>正例： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;String&gt; iterator = list.iterator();  </div><div class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;              </div><div class="line">    String item = iterator.next();                       </div><div class="line">    <span class="keyword">if</span> (删除元素的条件) &#123;                              </div><div class="line">        iterator.remove();                 </div><div class="line">    &#125;      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【强制】 在 JDK7 版本及以上，Comparator 要满足如下三个条件，不然 Arrays.sort， Collections.sort 会报 IllegalArgumentException 异常。 说明：三个条件如下</p>
<ol>
<li>x，y 的比较结果和 y，x 的比较结果相反。 </li>
<li>x&gt;y，y&gt;z，则 x&gt;z。 </li>
<li>x=y，则 x，z 比较结果和 y，z 比较结果相同。 </li>
</ol>
<ul>
<li>反例：下例中没有处理相等的情况，实际使用中可能会出现异常： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;      </div><div class="line">    <span class="meta">@Override</span>         </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;    </div><div class="line">        <span class="keyword">return</span> o1.getId() &gt; o2.getId() ? <span class="number">1</span> : -<span class="number">1</span>;        </div><div class="line">    &#125;      </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。 </p>
<ul>
<li>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效 率更高。如果是 JDK8，使用 Map.foreach 方法。 </li>
<li>正例：values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是 一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。 </li>
</ul>
<hr>
<p>【推荐】高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格： </p>
<table>
<thead>
<tr>
<th>集合类</th>
<th>Key</th>
<th>Value</th>
<th>Super</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hashtable</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>Dictionary</td>
<td>线程安全 </td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td>不允许为 null</td>
<td>不允许为 null</td>
<td>AbstractMap</td>
<td>锁分段技术（JDK8:CAS） </td>
</tr>
<tr>
<td>TreeMap</td>
<td>不允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全 </td>
</tr>
<tr>
<td>HashMap</td>
<td>允许为 null</td>
<td>允许为 null</td>
<td>AbstractMap</td>
<td>线程不安全 </td>
</tr>
</tbody>
</table>
<ul>
<li>反例： 由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上， 存储 null 值时会抛出 NPE 异常。 </li>
</ul>
<hr>
<p>【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和 不稳定性(unorder)带来的负面影响。 </p>
<ul>
<li>说明：有序性是指遍历的结果是按某种比较规则依次排列的。稳定性指集合每次遍历的元素次 序是一定的。如：ArrayList 是 order/unsort；HashMap 是 unorder/unsort；TreeSet 是 order/sort。 </li>
</ul>
<hr>
<p>【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的 contains 方法进行遍历、对比、去重操作。 </p>
<h3 id="并发处理"><a href="#并发处理" class="headerlink" title="并发处理"></a>并发处理</h3><p>【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。 说明：资源驱动类、工具类、单例工厂类都需要注意。 </p>
<hr>
<p>【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors 返回的线程池对象的弊端如下：</p>
<ol>
<li>FixedThreadPool 和 SingleThreadPool:   允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 </li>
<li>CachedThreadPool 和 ScheduledThreadPool:   允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。 </li>
</ol>
<hr>
<p>【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能 锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。 </p>
<hr>
<p> 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造 成死锁。 </p>
<ul>
<li>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序 也必须是 A、B、C，否则可能出现死锁。</li>
</ul>
<hr>
<p>【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行 至 await 方法，直到超时才返回结果。</p>
<ul>
<li>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</li>
</ul>
<hr>
<p>【推荐】在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优 化问题隐患(可参考 The “Double-Checked Locking is Broken” Declaration)，推荐解 决方案中较为简单一种（适用于 JDK5 及以上版本），将目标属性声明为 volatile 型。 </p>
<hr>
<p>【参考】volatile 解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题， 但是如果多写，同样无法解决线程安全问题。如果是 count++操作，使用如下类实现： AtomicInteger count = new AtomicInteger(); count.addAndGet(1); 如果是 JDK8，推 荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。 </p>
<hr>
<p>【参考】ThreadLocal 无法解决共享对象的更新问题，ThreadLocal 对象建议使用 static 修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享 此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只 要是这个线程内定义的)都可以操控这个变量。 </p>
<hr>
<h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>【强制】在 if/else/for/while/do 语句中必须使用大括号。即使只有一行代码，避免采用 单行的编码方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (condition) statements;</div></pre></td></tr></table></figure></p>
<hr>
<p>超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现</p>
<hr>
<p>【参考】下列情形，需要进行参数校验： </p>
<ol>
<li>调用频次低的方法。  </li>
<li>执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参 数错误导致中间执行回退，或者错误，那得不偿失。  </li>
<li>需要极高稳定性和可用性的方法。 </li>
<li>对外提供的开放接口，不管是 RPC/API/HTTP 接口。  </li>
<li>敏感权限入口。 </li>
</ol>
<hr>
<p>【参考】下列情形，不需要进行参数校验： </p>
<ol>
<li>极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。  </li>
<li>底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底 层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所 以 DAO 的参数校验，可以省略。 </li>
<li>被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参 数已经做过检查或者肯定不会有问题，此时可以不校验参数。 </li>
</ol>
<h3 id="注释归约"><a href="#注释归约" class="headerlink" title="注释归约"></a>注释归约</h3><p>【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描， 经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</p>
<ol>
<li>待办事宜<code>（TODO）</code>:<code>（ 标记人，标记时间，[预计处理时间]）</code>    表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</li>
<li>错误，不能工作<code>（FIXME）</code>:<code>（标记人，标记时间，[预计处理时间]）</code>    在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。 </li>
</ol>
<hr>
<p>【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分 说明什么情况下会返回 null 值。调用方需要进行 null 判断防止 NPE 问题。 说明：本手册明确<strong>防止 NPE 是调用者的责任</strong>。即使被调用方法返回空集合或者空对象，对调用<br>者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。 </p>
<hr>
<p> 【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：  </p>
<ol>
<li>返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。     反例：public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。 </li>
<li>数据库的查询结果可能为 null。  </li>
<li>集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null。  </li>
<li>远程调用返回对象时，一律要求进行空指针判断，防止 NPE。</li>
<li>对于 Session 中获取的数据，建议 NPE 检查，避免空指针。</li>
<li>级联调用 obj.getA().getB().getC()；一连串调用，易产生 NPE。 </li>
</ol>
<ul>
<li>正例：<strong>使用 JDK8 的 Optional 类来防止 NPE 问题。</strong></li>
</ul>
<hr>
<p>【推荐】定义时区分 unchecked / checked 异常，<strong>避免直接抛出 new RuntimeException()， 更不允许抛出 Exception 或者 Throwable</strong>，应使用有业务含义的自定义异常。推荐业界已定义 过的自定义异常，如：DAOException / ServiceException 等。 </p>
<hr>
<p>【参考】<strong>避免出现重复的代码（Don’t Repeat Yourself），即 DRY 原则</strong>。</p>
<ul>
<li>说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副 本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。 </li>
<li>正例：一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取</li>
</ul>
<h2 id="日志规约"><a href="#日志规约" class="headerlink" title="日志规约"></a>日志规约</h2><p>【强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架 SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger; </div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Abc.class);</div></pre></td></tr></table></figure></p>
<hr>
<p>【强制】对 trace/debug/info 级别的日志输出，必须使用条件输出形式或者使用占位符的方 式。 </p>
<ul>
<li>说明：logger.debug(“Processing trade with id: “ + id + “ and symbol: “ + symbol); 如果日志级别是 warn，上述日志不会打印，但是会执行字符串拼接操作，如果 symbol 是对象， 会执行 toString()方法，浪费了系统资源，执行了上述操作，最终日志却没有打印。 </li>
<li><p>正例：（条件） </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;    </div><div class="line">    logger.debug(<span class="string">"Processing trade with id: "</span> + id + <span class="string">" and symbol: "</span> + symbol);   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正例：（占位符） </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【强制】避免重复打印日志，浪费磁盘空间，务必在 log4j.xml 中设置 <code>additivity=false</code></p>
<hr>
<p>【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过 关键字 throws 往上抛出。 </p>
<ul>
<li>正例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.error(各类参数或者对象 toString + <span class="string">"_"</span> + e.getMessage(), e);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>【参考】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适 从。注意日志输出的级别，error 级别只记录系统逻辑出错、异常等重要的错误信息。如非必 要，请不要在此场景打出 error 级别。 </p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>【强制】好的单元测试必须遵守<code>AIR 原则</code>。 说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上， 却是非常关键的。好的单元测试宏观上来说，<strong>具有自动化、独立性、可重复执行的特点。</strong></p>
<ul>
<li><code>A</code>：Automatic（自动化） </li>
<li><code>I</code>：Independent（独立性） </li>
<li><code>R</code>：Repeatable（可重复） </li>
</ul>
<hr>
<p>【强制】单元测试应该是全自动执行的，并且非交互式的。测试框架通常是定期执行的，执行 过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。<strong>单元测 试中不准使用 <code>System.out</code>来进行人肉验证，必须使用 <code>assert</code> 来验证。</strong> </p>
<hr>
<p>【推荐】单元测试的基本目标：<strong>语句覆盖率达到 70%；核心模块的语句覆盖率和分支覆盖率都 要达到 100%</strong></p>
<ul>
<li>说明：在工程规约的应用分层中提到的 DAO 层，Manager 层，可重用度高的 Service，都应该 进行单元测试。 </li>
</ul>
<hr>
<p>【推荐】编写单元测试代码遵守 BCDE 原则，以保证被测试模块的交付质量。 </p>
<ul>
<li><strong>B</strong>：Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数据顺序等。</li>
<li><strong>C</strong>：Correct，正确的输入，并得到预期的结果。 </li>
<li><strong>D</strong>：Design，与设计文档相结合，来编写单元测试。 </li>
<li><strong>E</strong>：Error，强制错误信息输入（如：非法数据、异常流程、非业务允许输入等），并得 到预期的结果。</li>
</ul>
<hr>
<p>【推荐】对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的， 或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据。 </p>
<ul>
<li>反例：删除某一行数据的单元测试，在数据库中，先直接手动增加一行作为删除目标，但是这 一行新增数据并不符合业务插入规则，导致测试结果异常。</li>
</ul>
<hr>
<p>【推荐】<strong>和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者 对单元测试产生的数据有明确的前后缀标识</strong>。 </p>
<ul>
<li>正例：在 RDC 内部单元测试中，使用 RDC_UNIT<em>TEST</em>的前缀标识数据。 </li>
</ul>
<hr>
<p>【推荐】<strong>对于不可测的代码建议做必要的重构，使代码变得可测</strong>，避免为了达到测试要求而 书写不规范测试代码。 </p>
<hr>
<p>【参考】为了更方便地进行单元测试，业务代码应避免以下情况： </p>
<ul>
<li>构造方法中做的事情过多。 </li>
<li>存在过多的全局变量和静态方法。 </li>
<li>存在过多的外部依赖。</li>
<li>存在过多的条件语句。</li>
</ul>
<p><strong>说明：多层条件语句建议使用卫语句、策略模式、状态模式等方式重构。</strong> </p>
<hr>
<p>【参考】不要对单元测试存在如下误解： </p>
<ul>
<li>那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。 </li>
<li>单元测试代码是多余的。汽车的整体功能与各单元部件的测试正常与否是强相关的。 </li>
<li>单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。</li>
<li>单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障。 </li>
</ul>
<h2 id="安全规约"><a href="#安全规约" class="headerlink" title="安全规约"></a>安全规约</h2><p>【强制】隶属于用户个人的页面或者功能必须进行权限控制校验。</p>
<ul>
<li>说明：防止没有做水平权限校验就可随意访问、修改、删除别人的数据，比如查看他人的私信 内容、修改他人的订单。 </li>
</ul>
<hr>
<p>【强制】用户敏感数据禁止直接展示，必须对展示数据进行脱敏。 </p>
<ul>
<li>说明：查看个人手机号码会显示成:<code>158****9119</code>，隐藏中间 4 位，防止隐私泄露。 </li>
</ul>
<hr>
<p> 【强制】用户请求传入的任何参数必须做有效性验证。</p>
<ul>
<li>说明：忽略参数校验可能导致的问题： <ul>
<li>page size 过大导致内存溢出 </li>
<li>恶意 order by 导致数据库慢查询 </li>
<li>任意重定向  </li>
<li>SQL 注入 </li>
<li>反序列化注入 </li>
<li>正则输入源串拒绝服务 ReDoS </li>
</ul>
</li>
</ul>
<p><strong>说明</strong>：Java 代码用正则来验证客户端的输入，有些正则写法验证普通用户输入没有问题， 但是如果攻击人员使用的是特殊构造的字符串来验证，有可能导致死循环的结果。</p>
<hr>
<p>【强制】在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的<strong>防重放限制</strong>， 如数量限制、疲劳度控制、验证码校验，避免被滥刷、资损。 </p>
<ul>
<li>说明：如注册时发送验证码到手机，如果没有限制次数和频率，那么可以利用此功能骚扰到其 它用户，并造成短信平台资源浪费。</li>
</ul>
<hr>
<p>【推荐】发贴、评论、发送即时消息等用户生成内容的场景必须<strong>实现防刷、文本内容违禁词过 滤等风控策略</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BeanUtils的复制]]></title>
      <url>/spring-beanutils.html</url>
      <content type="html"><![CDATA[<p>有一个子类继承了父类的属性，但是有很多属性值需要复制，单纯的靠set 或者构造函数肯定很不美观，出于“懒”的目的，了解到spring beans里面提供了BeanUtils工具类，看下copyProperties方法满足需要，是用反射做的。</p>
<a id="more"></a>
<h4 id="方法源码"><a href="#方法源码" class="headerlink" title="方法源码"></a>方法源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">	 * Copy the property values of the given source bean into the given target bean.</span></div><div class="line"><span class="comment">	 * &lt;p&gt;Note: The source and target classes do not have to match or even be derived</span></div><div class="line"><span class="comment">	 * from each other, as long as the properties match. Any bean properties that the</span></div><div class="line"><span class="comment">	 * source bean exposes but the target bean does not will silently be ignored.</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> source the source bean</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> target the target bean</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> editable the class (or interface) to restrict property setting to</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> ignoreProperties array of property names to ignore</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> BeansException if the copying failed</span></div><div class="line"><span class="comment">	 * <span class="doctag">@see</span> BeanWrapper</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Object source, Object target, Class&lt;?&gt; editable, String... ignoreProperties)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line"></div><div class="line">		Assert.notNull(source, <span class="string">"Source must not be null"</span>);</div><div class="line">		Assert.notNull(target, <span class="string">"Target must not be null"</span>);</div><div class="line"></div><div class="line">		Class&lt;?&gt; actualEditable = target.getClass();</div><div class="line">		<span class="keyword">if</span> (editable != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!editable.isInstance(target)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Target class ["</span> + target.getClass().getName() +</div><div class="line">						<span class="string">"] not assignable to Editable class ["</span> + editable.getName() + <span class="string">"]"</span>);</div><div class="line">			&#125;</div><div class="line">			actualEditable = editable;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//获取targetCLass所有属性及属性的它set,get的方法，描述属性</span></div><div class="line">		PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);</div><div class="line">		List&lt;String&gt; ignoreList = (ignoreProperties != <span class="keyword">null</span> ? Arrays.asList(ignoreProperties) : <span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="comment">//遍历每个属性</span></div><div class="line">		<span class="keyword">for</span> (PropertyDescriptor targetPd : targetPds) &#123;</div><div class="line">		    <span class="comment">//根据 这个属性 获取目标类的set方法</span></div><div class="line">			Method writeMethod = targetPd.getWriteMethod();</div><div class="line">			<span class="comment">//检测</span></div><div class="line">			<span class="keyword">if</span> (writeMethod != <span class="keyword">null</span> &amp;&amp; (ignoreList == <span class="keyword">null</span> || !ignoreList.contains(targetPd.getName()))) &#123;</div><div class="line">				<span class="comment">// 获取 源类 的相应的描述属性</span></div><div class="line">				PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());</div><div class="line">				<span class="keyword">if</span> (sourcePd != <span class="keyword">null</span>) &#123;</div><div class="line">				    <span class="comment">// 获取源类的get方法</span></div><div class="line">					Method readMethod = sourcePd.getReadMethod();</div><div class="line">					<span class="comment">//检测方法，然后获取值，写入</span></div><div class="line">					<span class="keyword">if</span> (readMethod != <span class="keyword">null</span> &amp;&amp;</div><div class="line">							ClassUtils.isAssignable(writeMethod.getParameterTypes()[<span class="number">0</span>], readMethod.getReturnType())) &#123;</div><div class="line">						<span class="keyword">try</span> &#123;</div><div class="line">							<span class="keyword">if</span> (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) &#123;</div><div class="line">								readMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">							&#125;</div><div class="line">							Object value = readMethod.invoke(source);</div><div class="line">							<span class="keyword">if</span> (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) &#123;</div><div class="line">								writeMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">							&#125;</div><div class="line">							writeMethod.invoke(target, value);</div><div class="line">						&#125;</div><div class="line">						<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(</div><div class="line">									<span class="string">"Could not copy property '"</span> + targetPd.getName() + <span class="string">"' from source to target"</span>, ex);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>方法前面的文档告诉了我们：将源Bean复制到指定的Bean中，两个类不需要有关联，也不必是派生关系，只需要属性匹配即可。</p>
<h4 id="学习代码"><a href="#学习代码" class="headerlink" title="学习代码"></a>学习代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/12/1 14:13&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeans</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//首先设置一个学生，将它的基本属性复制给大学生，很方便的操作，不用set</span></div><div class="line">            Student student = <span class="keyword">new</span> Student(<span class="string">"wuwii"</span>, <span class="keyword">new</span> Date(<span class="number">1994</span> - <span class="number">1990</span>, <span class="number">2</span> -<span class="number">1</span>, <span class="number">19</span>),</div><div class="line">                    <span class="string">"WuHan"</span>, <span class="string">"123456"</span>);</div><div class="line">            UniversityStudent universityStudent = <span class="keyword">new</span> UniversityStudent();</div><div class="line">            BeanUtils.copyProperties(student, universityStudent);</div><div class="line">            System.out.println(universityStudent);</div><div class="line"></div><div class="line">            <span class="comment">//源和目标没有关联，部分属性也可以复制，有些属性没有也行。</span></div><div class="line">            String[] ignoreProperties = &#123;<span class="string">"name"</span>&#125;;</div><div class="line">            Adult_ adult = <span class="keyword">new</span> Adult_();</div><div class="line">            BeanUtils.copyProperties(student, adult, ignoreProperties);</div><div class="line">            System.out.printf(<span class="string">"adule： %s%n"</span>, adult);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//还有一些其他的实用方法</span></div><div class="line"></div><div class="line">        <span class="comment">//建立一个字符串Date</span></div><div class="line">        String date = <span class="string">"2008-8-8"</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 学生实体</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 姓名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 出生年月</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> Date birthDate;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 住址</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 身份证号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String IDNumber;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Date birthDate, String address, String IDNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">        <span class="keyword">this</span>.IDNumber = IDNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// copyProperties是调用的set方法</span></div><div class="line">    <span class="comment">/*public void setName(String name) &#123;</span></div><div class="line"><span class="comment">        this.name = "keen";</span></div><div class="line"><span class="comment">    &#125;*/</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDate</span><span class="params">(Date birthDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIDNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> IDNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIDNumber</span><span class="params">(String IDNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.IDNumber = IDNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birthDate="</span> + birthDate +</div><div class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", IDNumber='"</span> + IDNumber + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 大学生继承学生&lt;/br&gt;</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniversityStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 专业</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String major;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMajor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> major;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMajor</span><span class="params">(String major)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.major = major;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">" UniversityStudent&#123;"</span> +</div><div class="line">                <span class="string">"major='"</span> + major + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 成年人</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adult_</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 姓名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 出生年月</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> Date birthDate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adult_</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adult_</span><span class="params">(String name, Date birthDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDate</span><span class="params">(Date birthDate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthDate = birthDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Adult_&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", birthDate="</span> + birthDate +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student&#123;name=&apos;wuwii&apos;, birthDate=Fri Feb 19 00:00:00 CST 1904, address=&apos;WuHan&apos;, IDNumber=&apos;123456&apos;&#125; UniversityStudent&#123;major=&apos;null&apos;&#125;</div><div class="line">adule： Adule_&#123;name=&apos;null&apos;, birthDate=Fri Feb 19 00:00:00 CST 1904&#125;</div></pre></td></tr></table></figure></p>
<p>出如反射机制的性能问题，如果有要求的话，还是建议使用构造函数吧，或者更换设计。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171203]]></title>
      <url>/omelette.html</url>
      <content type="html"><![CDATA[<p>周末宅了下，肚子就饿得不行呀，动下手做点吃的，第一次做坑的不行啊。</p>
<a id="more"></a>
<p><img src="http://image.wuwii.com/omelette-1.jpg" alt="image"><br><img src="http://image.wuwii.com/omelette-2.jpg" alt="image"><br><img src="http://image.wuwii.com/omelette-3.jpg" alt="image"></p>
<p>这么多，傻眼了，糊了糊了。。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事务的特性和@Transactional注解的使用]]></title>
      <url>/java-transactional.html</url>
      <content type="html"><![CDATA[<h3 id="Transactional如何工作"><a href="#Transactional如何工作" class="headerlink" title="@Transactional如何工作"></a>@Transactional如何工作</h3><p>实现了EntityManager接口的持久化上下文代理并不是声明式事务管理的唯一部分，事实上包含三个组成部分：</p>
<ol>
<li>事务的切面</li>
<li>事务管理器</li>
<li>EntityManager Proxy本身</li>
</ol>
<a id="more"></a>
<h4 id="事务切面"><a href="#事务切面" class="headerlink" title="事务切面"></a>事务切面</h4><p>事务的切面是一个“around（环绕）”切面，在注解的业务方法前后都可以被调用。实现切面的具体类是<code>TransactionInterceptor</code>。</p>
<p>事务的切面的主要职责：<br>在’before’时，切面提供一个调用点，来决定被调用业务方法应该在正在进行事务的范围内运行，还是开始一个新的独立事务。<br>在’after’时，切面需要确定事务被提交，回滚或者继续运行。<br>在’before’时，事务切面自身不包含任何决策逻辑，是否开始新事务的决策委派给事务管理器完成。</p>
<ul>
<li>新的Entity Manager是否应该被创建？</li>
<li>是否应该开始新的事务？</li>
</ul>
<p><strong>这些需要事务切面’before’逻辑被调用时决定。事务管理器的决策基于以下两点：</strong></p>
<ol>
<li>事务是否正在进行；</li>
<li>事务方法的propagation属性（比如REQUIRES_NEW总要开始新事务）。</li>
</ol>
<h4 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h4><p>如果事务管理器确定要创建新事务，那么将：</p>
<p>创建一个新的entity manager<br>entity manager绑定到当前线程<br>从数据库连接池中获取连接<br>将连接绑定到当前线程<br>使用ThreadLocal变量将entity manager和数据库连接都绑定到当前线程。</p>
<p>事务运行时他们存储在线程中，当它们不再被使用时，事务管理器决定是否将他们清除。</p>
<p>程序的任何部分如果需要当前的entity manager和数据库连接都可以从线程中获取。</p>
<h4 id="EntityManager-proxy"><a href="#EntityManager-proxy" class="headerlink" title="EntityManager proxy"></a>EntityManager proxy</h4><p>当业务方法调用entityManager.persist()时，这不是由entity manager直接调用的。<br>而是业务方法调用代理，代理从线程获取当前的entity manager事务管理器将entity manager绑定到线程。</p>
<h3 id="spring-中配置JPA事务"><a href="#spring-中配置JPA事务" class="headerlink" title="spring 中配置JPA事务"></a>spring 中配置JPA事务</h3><p>在spring 的配置文件中配置jpa的事务：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Jpa 事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 打开事务注解 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然可以使用aop配置事务：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Jpa 事务管理器 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 声明式事务配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"count*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 只对业务逻辑层实施事务--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.devframe.service.impl.*.*(..))"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="spring中事务的几个特性"><a href="#spring中事务的几个特性" class="headerlink" title="spring中事务的几个特性"></a>spring中事务的几个特性</h3><p><strong>补充下，数据库中的事务的四大特性：</strong></p>
<ul>
<li><code>原子性（Atomicity）</code>：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</li>
<li><code>一致性（Consistency）</code>：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</li>
<li><code>隔离性（Isolation）</code>：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li>
<li><code>持久性（Durability）</code>：持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>
</ul>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>隔离级别是指若干个并发的事务之间的隔离程度。<code>TransactionDefinition</code> 接口中定义了五个表示隔离级别的常量：</p>
<ul>
<li><code>TransactionDefinition.ISOLATION_DEFAULT</code>：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li>
<li><code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</li>
<li><code>TransactionDefinition.ISOLATION_READ_COMMITTED</code>：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li>
<li><code>TransactionDefinition.ISOLATION_REPEATABLE_READ</code>：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</li>
<li><code>TransactionDefinition.ISOLATION_SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>
</ul>
<p><strong>补充下数据库中，如果不考虑事务的隔离性，会发生的几种问题：</strong></p>
<ul>
<li><code>脏读</code>：脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。</li>
<li><code>不可重复读</code>：不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。<br>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。<br>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。<br>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</li>
<li><code>虚读(幻读)</code>：幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</li>
</ul>
<h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在<code>TransactionDefinition</code>定义中包括了如下几个表示传播行为的常量：</p>
<ul>
<li><code>TransactionDefinition.PROPAGATION_REQUIRED</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li>
<li><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code>：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>
<li><code>TransactionDefinition.PROPAGATION_SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>
<li><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code>：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>
<li><code>TransactionDefinition.PROPAGATION_NEVER</code>：以非事务方式运行，如果当前存在事务，则抛出异常。</li>
<li><code>TransactionDefinition.PROPAGATION_MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>
<li><code>TransactionDefinition.PROPAGATION_NESTED</code>：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>
</ul>
<p>选择默认的，即<code>PROPAGATION_REQUIRED</code>，事务具有传播机制，多个事务，对于已经存在的事务，下一个事务会加入当前事务。</p>
<h4 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h4><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>
<p>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p>
<h4 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a>事务只读属性</h4><p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。 默认为读写事务。</p>
<p><em>“只读事务”并不是一个强制选项，它只是一个“暗示”，提示数据库驱动程序和数据库系统，这个事务并不包含更改数据的操作，那么JDBC驱动程序和数据库就有可能根据这种情况对该事务进行一些特定的优化，比方说不安排相应的数据库锁，以减轻事务对数据库的压力，毕竟事务也是要消耗数据库的资源的。<br>但是你非要在“只读事务”里面修改数据，也并非不可以，只不过对于数据一致性的保护不像“读写事务”那样保险而已。<br>因此，“只读事务”仅仅是一个性能优化的推荐配置而已，并非强制你要这样做不可。</em></p>
<h4 id="spring事务回滚规则"><a href="#spring事务回滚规则" class="headerlink" title="spring事务回滚规则"></a>spring事务回滚规则</h4><p>指示spring事务管理器回滚一个事务的推荐方法是在当前事务的上下文内抛出异常。spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。</p>
<p>默认配置下，spring只有在抛出的异常为运行时unchecked异常时才回滚该事务，也就是抛出的异常为RuntimeException的子类(Errors也会导致事务回滚)，而抛出checked异常则不会导致事务回滚。可以明确的配置在抛出那些异常时回滚事务，包括checked异常。也可以明确定义那些异常抛出时不回滚事务。还可以编程性的通过setRollbackOnly()方法来指示一个事务必须回滚，在调用完setRollbackOnly()后你所能执行的唯一操作就是回滚。</p>
<h3 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>String</td>
<td>可选的限定描述符，指定使用的事务管理器</td>
</tr>
<tr>
<td>propagation</td>
<td>enum: Propagation</td>
<td>可选的事务传播行为设置</td>
</tr>
<tr>
<td>isolation</td>
<td>enum: Isolation</td>
<td>可选的事务隔离级别设置</td>
</tr>
<tr>
<td>readOnly</td>
<td>boolean</td>
<td>读写或只读事务，默认读写</td>
</tr>
<tr>
<td>timeout</td>
<td>int (in seconds granularity)</td>
<td>事务超时时间设置</td>
</tr>
<tr>
<td>rollbackFor</td>
<td>Class对象数组，必须继承自Throwable</td>
<td>导致事务回滚的异常类数组</td>
</tr>
<tr>
<td>rollbackForClassName</td>
<td>类名数组，必须继承自Throwable</td>
<td>导致事务回滚的异常类名字数组</td>
</tr>
<tr>
<td>noRollbackFor</td>
<td>Class对象数组，必须继承自Throwable</td>
<td>不会导致事务回滚的异常类数组</td>
</tr>
<tr>
<td>noRollbackForClassName</td>
<td>类名数组，必须继承自Throwable</td>
<td>不会导致事务回滚的异常类名字数组</td>
</tr>
</tbody>
</table>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p> @Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p>
<p>虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p>
<p>默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为。</p>
<p>只要方法内部抛出<code>rollbackFor</code>设置的异常，就会回滚。</p>
<p>例如：<br>在方法上加上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(value=<span class="string">"transactionManager"</span>, rollbackFor = Exception.class)</div></pre></td></tr></table></figure></p>
<p>方法内部只要抛出指定的异常或者错误，就全部回滚。</p>
<p>补充，回滚异常是自己定义的异常类，最好按照要求继承<code>RuntimeException</code>。<br>如果非常有必要在事务中捕捉异常，而且需要回滚事务，那么直接再将这个异常抛出就可以了，但是不建议这么使用。</p>
<p><strong>参考文章：</strong></p>
<ul>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/bao19901210/article/details/41724355">spring事物配置，声明式事务管理和基于@Transactional注解的使用</a></li>
<li><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/wangyonglong/p/5178450.html">JPA和事务管理</a></li>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/hy6688_/article/details/44763869">Spring事务传播特性的浅析——事务方法嵌套调用的迷茫</a></li>
<li><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/fjdingsd/p/5273008.html">数据库事务的四大特性以及事务的隔离级别</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[心底最柔软的爱]]></title>
      <url>/love-of-soft.html</url>
      <content type="html"><![CDATA[<p>晚上老妈又打电话给我了，其实前几天赶回去了一次，问我这边怎么样……</p>
<p>记得以前总没好好吃饭，喜欢吃零食，弄得身体一直不是很好；喜欢玩游戏，不喜欢学习；很任性……总是忽略了爸妈的好，可能总是以为理所当然了。慢慢得懂了，其实爸妈的爱是理所当然的，但，是那种最笨拙的，最柔软的爱，也是要我们珍惜和回报的，因为他们不能陪我们度过一生，需要每个人才能完美。</p>
<p>记得给老爸买智能手机后，他说他要玩微信，但是他还不太会玩智能手机，帮他下好几个常用的软件，而且让我调成手写输入法，虽然慢慢的，一个一个字的划着输入，看得到他是真的高兴。老妈很少用手机的，虽然后来也给她买了个手机，回到家的时候也教她用，但是老妈真的很不喜欢玩手机耶。</p>
<p>其实老爸的斗地主很厉害的，但是没时间玩，现在有手机了，可以经常玩了；喜欢看新闻，现在看天气，很准的，总算不用多年前的12121了。</p>
<p>即使在现在长大成人了，爸妈还是总是来问衣服够不够穿；是的，在父母的眼里，孩子不管多大，永远都是小孩，做父母的总会把孩子成长的每个细节都记在心里；可能年轻人总是笨手笨脚的，还真的有点不会照顾后自己，才让父母还是如此操心的吧。</p>
<p>其实，都懂，长大了，我会好好的。尽管你们爱的笨拙，触动最柔软的部分，我也是会流泪的。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《嘉年华》的一点感想]]></title>
      <url>/angels-wear-white.html</url>
      <content type="html"><![CDATA[<p>看了嘉年华，这次没去电影院，主要是周末一直有事情，是通过网上非正规渠道看的，网址就不暴露了，私聊也不给。</p>
<p>感觉今年也贡献了好多张电影票了，实在是现在电影看得爆米花形式的，我只想去上厕所……</p>
<p>这个电影还是没打算去电影院看，一个人去看电影好无聊呀；它是一个以女性的口吻来贯穿的。通过这个“幼女性侵”去讲述这个当前社会下这类人的生活状况。给人很大的震撼。</p>
<a id="more"></a>
<p>电影中小文和新新，经历这个恶魔的桥段，她们在什么都不懂的情况下，身边的人却对她们的排斥，父母的异样，政府和社会的妥协，让社会底层的人只能忍气吞声，最终她们渐渐的脱离了这个社会，让她们感觉到世界都塌下了。在单纯的年龄里，她们呢其实和正常的孩子们是一样的生活，学习，正式这种不平等的眼光，小文只能不断的渴求着成长，渴望着用化妆品和衣服等等来装饰着自己，让自己变得更加成熟，让自己能够战胜内心中的黑暗和恐惧。</p>
<p>看到电影里的让人更加痛心疾首的不是女孩子们的遭遇，而是男人的懦弱，自私自利，有各种形态的人利用女性，殴打女性。无可厚非，虽然现在各种强调男女平等，总是有各种调查显示好像女性地位还要高些，但是现实中，女性在当今社会上地位还是很不平等。就拿经常被提起的，离婚的女性，其实 承受了很大的社会压力，就像小文妈的样子，同样不被社会所接纳，像是融合了所有离婚女人的不美好。因为社会上的一部分人，甚至说是那种传统思想吧，总是把一个女人和她的身体联系在一起，理解成，一个女人的价值就是她的身体。</p>
<p>真的很可笑了，现在越来越发掘是男性的问题了，女人不应该承受这些，老一辈的三从四德，至今可能还在影响着我们这一辈的人。当然社会总是光明的，律师，让她们看到了希望，最终逃过一劫的刘会长受到了法律的制裁。提升女性的权力和安全，在整个社会中接受，理性对待她们。我想，这起码也是社会文明的一大进步。</p>
<blockquote>
<p>“现在大家特别喜欢把脏和女孩子放在一起说，但这是为什么？在我眼里没有女孩是脏的。”</p>
</blockquote>
<p>最后，穿着白裙子的小米，骑着电动车，未来将是一个美好的故事。</p>
<p>虽然世俗的偏见却让她们举步维艰，可是那又如何，快乐最重要，活出你们的态度。</p>
<p>美好的事情，需要所有的人努力才能改变。这部电影将会是个开始，因为它发出的声音，重新激发了人们的认知。</p>
]]></content>
      
        <categories>
            
            <category> 随随便便 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[以后的生活]]></title>
      <url>/later-after.html</url>
      <content type="html"><![CDATA[<p>晚上和室友吃完饭后，大晚上出门散散步，走在平时居住的小区的路上。看着为数不多的居民楼还亮着灯光，左手和右手边的房子样式差异很大，左手边是风格别异的别墅区，门前院子还亮着灯，细眼望去，里面种着各样的植物，有花草，还有蔬菜，有的院子里停着车，和急得慌的狗，想出来咬我，等下辈子吧。</p>
<p>其实，小区寂静的寂寞，只是冬天的夜晚来的太早了，人们都早早的上床睡觉了吧。</p>
<p>想到这里，也许，未来可能在这里住一辈子是什么样子的。我大概也会在这么一个小区里有一间自己的房子，会和一个人相爱，结婚，生活在这里，如果好的话，父母也可以接过来一起住，还可能养一只猫。我会把一切布置成喜欢的样子，摆上喜欢的物品，把房间打扫得干干净净、舒舒服服的。晚饭后，一家人，在小区里散散步，走出小区外，没有灯光的地方，来到漆黑的地方，一起仰望夜空中的繁星和月亮；回到家还能逗弄猫咪；有一天还会有孩子，整天调皮的打滚，一家人很开心幸福的生活在一起，在那座房子里。这样大概就是一辈子。</p>
<p>毕业已经有半年久了，其实自己还是很迷惑，想要什么样的生活，未来将在何处。</p>
<p>安静极了，出了汽车发动机的轰鸣声和狗叫声，已经没有半点声音。上楼，准备洗洗睡吧，突然发现今晚的月光其实很不错的，只是武汉现在晚上的环境不是很好，星星都看不到了，其实今晚的月光很亮的，看了下，今天农历初十，这么长时间，没认真看过天空中的月亮了，突然感觉到风有点暖。</p>
<p>在夜晚的舒适的空气中，心里渐渐平下来，想起来，如果这样度过一生，我会有些后悔的。舒适平淡的一生，一眼就能望穿的一生，还远远不能成为我活下去的理由，我还有很多地方没去过，很多事情没做。</p>
<p>将来肯定在我想做的事情，去想去的地方，不该为了贪图舒适浪费自己的人生。到时，未来终究是什么样子，究竟要做什么，怎么做，能否做成，都还没法预见。但尽力去做了，我就不会后悔。</p>
<p>路漫漫，其修远兮；吾将上下而求索。</p>
<p>抬头再望一望天空中的月亮。可以看到它笑得如此的皎洁。</p>
<p><img src="http://image.wuwii.com/later-after.jpg" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集成algolia搜索]]></title>
      <url>/algolia.html</url>
      <content type="html"><![CDATA[<h4 id="使用第三方algolia搜索服务"><a href="#使用第三方algolia搜索服务" class="headerlink" title="使用第三方algolia搜索服务"></a>使用第三方algolia搜索服务</h4><p>Local Search一直都是Loading状态，太影响体验了，只好换个搜索，可以选择algolia和Swiftype，两者都是收费的，但是可以使用免费版本，可能搜索的准确性降低，提交的网页有上限。</p>
<p><strong>下面弄下algolia搜索服务步骤</strong></p>
<p>首先说下我的next主题是5.1.1版本，低于5.1.0不支持。</p>
<a id="more"></a>
<h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p>前往<a rel="external nofollow" target="_blank" href="http://weibo.com/ttarticle/p/show?id=2309404145816167164260">algolia官网</a>进行注册，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户 总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index，取一个名字， 将在后面使用。</p>
<p><img src="http://theme-next.iissnan.com/uploads/algolia/algolia-step-2.png" alt="image"></p>
<h5 id="本地安装-Hexo-Algolia-扩展"><a href="#本地安装-Hexo-Algolia-扩展" class="headerlink" title="本地安装 Hexo Algolia 扩展"></a>本地安装 Hexo Algolia 扩展</h5><p>在站点根目录执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-algolia</div></pre></td></tr></table></figure></p>
<p>这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。</p>
<h5 id="获取key"><a href="#获取key" class="headerlink" title="获取key"></a>获取key</h5><p>在 Algolia 服务站点上找到需要使用的一些配置的值，包括 ApplicationID、Search API Key、 Admin API Key。注意，Admin API Key 需要保密保存。</p>
<p><img src="http://theme-next.iissnan.com/uploads/algolia/algolia-step-3.png" alt="image"></p>
<p>编辑 <code>站点配置文件</code>，新增以下配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">algolia:</div><div class="line">  applicationID: 'applicationID'</div><div class="line">  apiKey: 'apiKey'</div><div class="line">  adminApiKey: 'adminApiKey'</div><div class="line">  indexName: 'indexName'</div><div class="line">  chunkSize: 5000</div></pre></td></tr></table></figure>
<p>替换除了 chunkSize 以外的其他字段为在 Algolia 获取到的值。</p>
<h5 id="更新Index"><a href="#更新Index" class="headerlink" title="更新Index"></a>更新Index</h5><p>在站点根目录下执行 hexo algolia 来更新 Index：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo algolia</div></pre></td></tr></table></figure></p>
<p>中间更新Index的时候出现了点小岔子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo algolia</div><div class="line">ERROR [Algolia] Please set an `HEXO_ALGOLIA_INDEXING_KEY` environment variable to enable content indexing.</div><div class="line">ERROR &gt;&gt; Read https://npmjs.com/hexo-algolia#api-key for more informations.</div></pre></td></tr></table></figure></p>
<p>这个时候不要去百度，直接去它给的网页中，就可以找到解决办法。</p>
<blockquote>
<p>A separate <em>API Key</em> must be provided as an <strong>environment variable</strong> named <code>HEXO_ALGOLIA_INDEXING_KEY</code>. Create it with <strong>these limited write access</strong> permissions: <code>Add records</code>, <code>Delete records</code>, <code>List indices</code>, <code>Delete index</code>.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY=…</div></pre></td></tr></table></figure></p>
</blockquote>
<p>为了安全，需要将<strong>API Key</strong>重新设置上面给的那几个权限，并且在本地设置环境变量。</p>
<p>重新更新Index，可以完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INFO  [Algolia] Identified 114 pages and posts to index.</div><div class="line">INFO  [Algolia] Indexing chunk 1 of 3 (50 items each)</div><div class="line">INFO  [Algolia] Indexing chunk 2 of 3 (50 items each)</div><div class="line">INFO  [Algolia] Indexing chunk 3 of 3 (50 items each)</div><div class="line">INFO  [Algolia] Indexing done.</div></pre></td></tr></table></figure>
<p>如上面提示，表示成功。已经提交了114篇文章或网页到index了。</p>
<h5 id="集成到主题中"><a href="#集成到主题中" class="headerlink" title="集成到主题中"></a>集成到主题中</h5><p>更改主题配置文件，找到 Algolia Search 配置部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Algolia Search</div><div class="line">algolia_search:</div><div class="line">  enable: false</div><div class="line">  hits:</div><div class="line">    per_page: 10</div><div class="line">  labels:</div><div class="line">    input_placeholder: Search for Posts</div><div class="line">    hits_empty: "We didn't find any results for the search: $&#123;query&#125;"</div><div class="line">    hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"</div></pre></td></tr></table></figure></p>
<p>将 <code>enable</code> 改为 <code>true</code> 即可，根据需要你可以调整 labels 中的文本。</p>
<h5 id="重新发布"><a href="#重新发布" class="headerlink" title="重新发布"></a>重新发布</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g -d</div></pre></td></tr></table></figure>
<p>查看效果：</p>
<p><img src="http://image.wuwii.com/next-as-search.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发容器CopyOnWriteArrayList]]></title>
      <url>/java-copyonwrite.html</url>
      <content type="html"><![CDATA[<p>Copy-On-Write简称COW，是一种用于程序设计中的<code>优化策略</code>。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。</p>
<h3 id="什么是CopyOnWrite容器"><a href="#什么是CopyOnWrite容器" class="headerlink" title="什么是CopyOnWrite容器"></a>什么是CopyOnWrite容器</h3><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。</p>
<a id="more"></a>
<h3 id="CopyOnWriteArrayList如何做到线程安全的"><a href="#CopyOnWriteArrayList如何做到线程安全的" class="headerlink" title="CopyOnWriteArrayList如何做到线程安全的"></a>CopyOnWriteArrayList如何做到线程安全的</h3><p>CopyOnWriteArrayList使用了一种叫<code>写时复制</code>的方法，当有新元素添加到CopyOnWriteArrayList时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">//1、先加锁</span></div><div class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Object[] elements = getArray();</div><div class="line">        <span class="keyword">int</span> len = elements.length;</div><div class="line">        <span class="comment">//2、拷贝数组</span></div><div class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</div><div class="line">        <span class="comment">//3、将元素加入到新数组中</span></div><div class="line">        newElements[len] = e;</div><div class="line">        <span class="comment">//4、将array引用指向到新数组</span></div><div class="line">        setArray(newElements);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       <span class="comment">//5、解锁</span></div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来CopyOnWriteArrayList的整个add操作都是在锁的保护下进行的。</p>
<p>当有新元素加入的时候，如下图，创建新数组，并往新数组中加入一个新元素,这个时候，array这个引用仍然是指向原数组的。</p>
<p><img src="http://img.blog.csdn.net/20170117145928110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGluc29uZ2JpbjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"><br><em>图片来自水印</em></p>
<p>当元素在新数组添加成功后，将array这个引用指向新数组。</p>
<p><img src="http://img.blog.csdn.net/20170117150336836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGluc29uZ2JpbjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"><br><em>图片来自水印</em></p>
<p>读取操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> get(getArray(), index);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>但是它的读操作并没有同步，因此读取它的数据的时候不一定是最新的数据。</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>注意内存的消耗，每次进行写入操作的时候，都会复制一个副本，如果这些对象占用的内存比较大，比如说200M左右，那么再写入100M数据进去，内存就会占用300M，那么这个时候很有可能造成频繁的Yong GC和Full GC。针对内存占用问题，可以通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。</li>
<li>不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；</li>
<li>CopyOnWriteArrayList 合适读多写少的场景，不过这类慎用<br>因为谁也没法保证CopyOnWriteArrayList 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。</li>
<li>设计思想：并发时候，可以开辟新的地址，来解决并发问题。</li>
</ol>
<p><strong>参考文章：</strong></p>
<ul>
<li><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/linsongbin1/article/details/54581787">线程安全的CopyOnWriteArrayList介绍</a></li>
<li><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/dolphin0520/p/3938914.html">Java并发编程：并发容器之CopyOnWriteArrayList（转载）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171125]]></title>
      <url>/frightened.html</url>
      <content type="html"><![CDATA[<p>不经意间，人开始善感起来了。</p>
<p>是人活了这么多年，还是这么怂吗？</p>
<p>不曾想过，每次做事都这么犹豫。</p>
<p>可能就是在这样的面前，才敢放低姿态。</p>
<p>不管什么事情，努力才是对自己的结果。</p>
<blockquote>
<p>世界上最好的安慰并不是告诉对方“一切都会好起来的”，而是苦着脸说“哭个屁，你看，我比你还惨”。</p>
<p>嘿，你好吗？<br>我很好。 </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程中ThreadLocal]]></title>
      <url>/java-threadlocal.html</url>
      <content type="html"><![CDATA[<p>没写完，头痛，到凌晨了，先占个坑，先睡个觉，明天再补。</p>
<hr>
<p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p>
<p>但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。<br><a id="more"></a></p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="拥有方法"><a href="#拥有方法" class="headerlink" title="拥有方法"></a>拥有方法</h4><p><img src="http://image.wuwii.com/ThreadLocal1.png" alt="image"><br>下面看下几个怎么设计实现ThreadLocal的方法：</p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the value in the current thread's copy of this</span></div><div class="line"><span class="comment">     * thread-local variable.  If the variable has no value for the</span></div><div class="line"><span class="comment">     * current thread, it is first initialized to the value returned</span></div><div class="line"><span class="comment">     * by an invocation of the &#123;<span class="doctag">@link</span> #initialValue&#125; method.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the current thread's value of this thread-local</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                T result = (T)e.value;</div><div class="line">                <span class="keyword">return</span> result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> setInitialValue();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>获取当前线程；</li>
<li>然后通过getMap 获取Map；</li>
<li>获取到Map的键值对；</li>
<li>传入<code>this</code> 当前ThreadLocal获取当前的键值对；</li>
<li>根据获取到的entry 返回值，为null 的话调用<code>setInitialValue</code>方法；<h4 id="getMap"><a href="#getMap" class="headerlink" title="getMap"></a>getMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Get the map associated with a ThreadLocal. Overridden in</span></div><div class="line"><span class="comment">     * InheritableThreadLocal.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>  t the current thread</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the map</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t.threadLocals;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>返回线程中的threadLocals变量，继续看threadLocals的实现；</p>
<h4 id="threadLocals"><a href="#threadLocals" class="headerlink" title="threadLocals"></a>threadLocals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></div><div class="line"><span class="comment">     * by the ThreadLocal class. */</span></div><div class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>它是ThreadLocal中的静态内部类ThreadLocalMap：</p>
<h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><h5 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></div><div class="line">            Object value;</div><div class="line"></div><div class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</div><div class="line">                <span class="keyword">super</span>(k);</div><div class="line">                value = v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>ThreadLocalMap的Entry继承了WeakReference，并且使用ThreadLocal作为键值。</p>
<h4 id="setInitialValue"><a href="#setInitialValue" class="headerlink" title="setInitialValue"></a>setInitialValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Variant of set() to establish initialValue. Used instead</span></div><div class="line"><span class="comment">     * of set() in case user has overridden the set() method.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the initial value</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        T value = initialValue();</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">            map.set(<span class="keyword">this</span>, value);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            createMap(t, value);</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果map不为空，就设置键值对，为空，再创建Map，看一下createMap的实现;</p>
<h4 id="createMap"><a href="#createMap" class="headerlink" title="createMap"></a>createMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Create the map associated with a ThreadLocal. Overridden in</span></div><div class="line"><span class="comment">     * InheritableThreadLocal.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> t the current thread</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue value for the initial entry of the map</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</div><div class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这样为当前线程创建副本变量就完毕了。</p>
<h4 id="怎么创建副本变量"><a href="#怎么创建副本变量" class="headerlink" title="怎么创建副本变量"></a>怎么创建副本变量</h4><p>首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。</p>
<p>初始时，在Thread里面，threadLocals为空，当通过ThreadLocal变量调用get()方法或者set()方法，就会对Thread类中的threadLocals进行初始化，并且以当前ThreadLocal变量为键值，以ThreadLocal要保存的副本变量为value，存到threadLocals。</p>
<p>然后在当前线程里面，如果要使用副本变量，就可以通过get方法在threadLocals里面查找。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>各种连接池获取连接（如，数据库连接，redis连接）；</li>
<li>session管理。</li>
</ol>
<h3 id="学习代码"><a href="#学习代码" class="headerlink" title="学习代码"></a>学习代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/24 20:32&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadLocal</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 声明一个ThreadLocal变量</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; local1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 为ThreadLocal赋值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        local1.set(Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</div><div class="line">         Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">             <span class="comment">/*</span></div><div class="line"><span class="comment">              * 每次调用get方法前，必须要set，不然会抛出NPE</span></div><div class="line"><span class="comment">              */</span></div><div class="line">            setValue();</div><div class="line">            System.out.printf(<span class="string">"线程一的localValue为: %s%n"</span>, local1.get());</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="comment">//先给线程二的threadLocal赋值，然后运行线程一，最后打印线程二的threadLocal</span></div><div class="line">            setValue();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">/*</span></div><div class="line"><span class="comment">                 * 在线程二中添加运行线程一，证明了每个线程保存的ThreadLocal的副本变量是不同的</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                thread1.start();</div><div class="line">                thread1.join();</div><div class="line">                <span class="comment">// 运行完线程一，再输出线程二</span></div><div class="line">                System.out.printf(<span class="string">"线程二的localValue为: %s%n"</span>, local1.get());</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">线程一的localValue为: Thread-0</div><div class="line">线程二的localValue为: Thread-1</div></pre></td></tr></table></figure></p>
<p>可以看出，线程二并没有被影响。</p>
<p><strong>参考博客：<a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920407.html">Java并发编程：深入剖析ThreadLocal</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用一生的时光去守护你]]></title>
      <url>/a-living-time.html</url>
      <content type="html"><![CDATA[<p>今天听电台上逛到了这篇文章，首先想到的应该是爸妈那一代人，是我们比较熟悉的，那缝纫机，我家里现在还能用了；我小时候学习骑车的时候，用的就是当初爸妈结婚的时候自行车；还有当时的小彩电，被我拿来打游戏机了……现在想起来，惭愧的很，没能好好珍惜，那是属于父母的美好记忆的一部分。当然都过去好久了，我的记忆力还是不错的，虽然大多数东西已经不存在了，但是能一直存在我的记忆里，我想爸妈也是一直记得的，而且现在家庭幸福，就足够了。</p>
<p>文章来自网上，百度标题就有，读起来可以细细品尝，喝杯水，别是一番风味。</p>
<p>记录到博客（图片都是偷的……<br><a id="more"></a></p>
<hr>
<p><img src="http://p3.pstatp.com/large/6d100072fd427166ee8" alt="image"></p>
<p><strong>五六十年代的爱情，没有绚烂的色彩，却有着耐人寻味的真情。</strong></p>
<p><img src="http://p9.pstatp.com/large/71e00034b657f43e581" alt="image"></p>
<p><strong>那个时候，总有做不完的农活，苦中作乐就是甜蜜的爱情。</strong></p>
<p><img src="http://p3.pstatp.com/large/6d100072fd55d030dc9" alt="image"></p>
<p><strong>在当时，为心爱的女人戴上一朵红花，是爱情的见证，更是一种矢志不渝的承诺。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/5ce0edf0e5cb48349c356321d86143f4_th.jpg" alt="image"></p>
<p><strong>结婚前不需贵重的礼品，一支钢笔就是一个深刻的纪念。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/00208259a24e47e3ac983be8d1b478b3_th.jpg" alt="image"></p>
<p><strong>那时候结婚，还需要组织上开个介绍信。接过结婚证书的时候，开心到说不出话来。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/255bedb9b6fa44f1a456851c89e3cf34_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/46d488275a0e4b5ea018a421e609788c_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/0b1bd30a0f624ffab5df7bd8c338ac6c_th.jpg" alt="image"></p>
<p><strong>那时候的爱情，总是有众人的见证。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/9c81860520044b9aaf0cae637d370a13_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/16c9b7f033c3440191d7405f39384f44_th.jpg" alt="image"></p>
<p><strong>到了七十年代，爱情故事也随着时代而发生改变。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/1077aaf711ac41ecb555bc662085cd42_th.jpg" alt="image"></p>
<p><strong>在那个特殊的年代，爱情是被禁止的羞涩。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/c1ebcfd1f6dd4e9ba01d934b74b467a3_th.jpg" alt="image"></p>
<p><strong>“恋爱”“结婚”，是资产阶级思想的自由化产物，“男女关系”是绝对要划清界限的个人守则。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/527e2229d3f54a9d9b9402ede6a842ec_th.jpg" alt="image"></p>
<p><strong>那个时代的人们单纯，生怕别人误会自己有不正当男女关系，生怕别人误会老家来的表哥是自己的汉子。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/a0ea7bc642844de3b6b91408136a2bc0_th.jpg" alt="image"></p>
<p><strong>那时候，连牵个小手都得偷偷摸摸的，一根小小的竹竿连接着他们青涩的爱情。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/b2eb2ef274454388957f69b23f3106db_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/061b45c9946b43708f3f8ceaa25ecc5d_th.jpg" alt="image"></p>
<p><strong>那时候的爱情，也是政治。身穿军装、手捧毛主席语录照相，是那个年代最独特的记忆。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/88071ca9faa34ebdb452aa21b868974e_th.jpg" alt="image"></p>
<p><strong>80年代，有了一种独特的恋爱方式，叫做联谊。说说笑笑，感情自然而然地发生。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/8e1e1034d8494186b87f7c9197deb69f_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/c4cdf0604fc64f21a78403396b53bc4a_th.jpg" alt="image"></p>
<p><strong>在没有电话、电脑的年代，写信寄照片是唯一联系情感的方式。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/54c2769ec19947e3b9a4ef22abd85d82_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/99aefc436e9647ba9a98634a0ba44d53_th.jpg" alt="image"></p>
<p><strong>那时候的约会很简单，坐趟公交车到郊外走走，到湖边划划小船。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/b5138d92ebe849a1b74009a3e711f0c8_th.jpg" alt="image"></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/393d7c957d014d5e90474250d7ebe211_th.jpg" alt="image"></p>
<p><strong>只要两个人在一起，在公园的长椅上坐上一个下午也不会觉得无聊。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/332b5900b72d4fc1a1bf3635a9ee2631_th.jpg" alt="image"></p>
<p><strong>骑着自行车，载着心爱的那个她，真希望时光就停留在这一刻。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/101a7ea965a24e52b398902c74115828_th.jpg" alt="image"></p>
<p><strong>带上礼物，和心爱的人穿戴整齐，一起回家里看看爸妈。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/619406bd3a99447abe2b8a97683272e3_th.jpg" alt="image"></p>
<p><strong>一台缝纫机，一辆自行车，一台收音机，加上母亲准备的花棉被，就是全部的嫁妆。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/3066796109054dceb217c06419be6b37_th.jpg" alt="image"></p>
<p><strong>那个年代，爱情有着纯粹的颜色，神圣不容亵渎。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/94a5274509284b209227b242f4088d06_th.jpg" alt="image"></p>
<p><strong>那个年代，车马很慢，书信很远，一生只够爱一人。</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/a1120031cd624a76a3887f1b26bdb7eb_th.jpg" alt="image"></p>
<p><strong>30年前的我爱你，不是嘴上说说，</strong></p>
<p><strong>而是用一生的时光去守护你！</strong></p>
<p><img src="http://img.mp.itc.cn/upload/20160528/bf016bb8559c4e4aae0a8e101ba191d3_th.jpg" alt="image"></p>
<hr>
<blockquote>
<p>“两姓联姻，一堂缔约，良缘永结，匹配同称。看此日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽。谨以白头之约，书向鸿笺，好将红叶之盟，载明鸳谱。此证。” </p>
<p>张爱玲说过：“于千万人之中遇见你所要遇见的人,于千万年之中,时间的无涯的荒野里,没有早一步,也没有晚一步,刚巧赶上了,没有别的话可说,唯有轻轻地问一声:“原来你也在这里 ”</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Easyui异步ComboTree加载到指定子节点展开]]></title>
      <url>/easyui-combotree.html</url>
      <content type="html"><![CDATA[<p><strong>Easyui异步ComboTree加载到指定子节点展开</strong>，其实以为这个功能会很简单，做起来出了一些问题，现在做完了，也还是存在一些隐患，记录，等找到最好的解决办法：</p>
<a id="more"></a>
<h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>业务其实是一个很普通的省市县的级联查询，但是，我们不是那个一级一级的方式选择的，是直接加载一棵树，在到树下一级一级的选到想要的位置。</p>
<p>主要就是加载异步树，还有就是去加载到当前指定的子节点上，并且打开每一级的父节点：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;测试玩&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">    &lt;link rel="stylesheet" href="../</span>../theme/<span class="keyword">default</span>/easyui.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../theme/icon.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../css/app.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../css/main.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;link rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">" href="</span>../../css/icon.css<span class="string">"/&gt;</span></div><div class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">" src="</span>../../js/jquery.min.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">" src="</span>../../js/jquery.easyui.min.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">    &lt;script type="</span>text/javascript<span class="string">" src="</span>../../js/easyui-lang-zh_CN.js<span class="string">"&gt;&lt;/script&gt;</span></div><div class="line"><span class="string">&lt;/head&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">&lt;input id="</span>tree<span class="string">"/&gt;</span></div><div class="line"><span class="string">&lt;!--测试使用打开到指定的子节点--&gt;</span></div><div class="line"><span class="string">&lt;a id="</span>expand<span class="string">"&gt;指定打开&lt;/a&gt;</span></div><div class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></div><div class="line"><span class="string">    /**</span></div><div class="line"><span class="string">     * 后台服务url自己修改成配置文件的</span></div><div class="line"><span class="string">     */</span></div><div class="line"><span class="string">    var baseUrl = "</span>http:<span class="comment">//192.168.19.207:8081/devframe-server/";</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 记录级联信息</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">var</span> selectNode = &#123;</div><div class="line">        province: <span class="literal">null</span>,</div><div class="line">        city: <span class="literal">null</span>,</div><div class="line">        county: <span class="literal">null</span>,</div><div class="line">        town: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据type判断级联</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">var</span> nodeType = &#123;</div><div class="line">        province: <span class="string">'province'</span>,</div><div class="line">        city: <span class="string">'city'</span>,</div><div class="line">        county: <span class="string">'county'</span>,</div><div class="line">        town: <span class="string">'town'</span></div><div class="line">    &#125;</div><div class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        initComboTree();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化ComboTree</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">initComboTree</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//第一次加载成功需要选中高亮第一个节点</span></div><div class="line">        <span class="keyword">var</span> isHighlight = <span class="literal">true</span>;</div><div class="line">        $(<span class="string">"#tree"</span>).combotree(&#123;</div><div class="line">            method: <span class="string">"post"</span>,</div><div class="line">            url: baseUrl + <span class="string">'dictionary/asyncdata/canton'</span>,</div><div class="line">            panelWidth: <span class="string">'170'</span>,</div><div class="line">            onClick: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</div><div class="line">                getNodeMessage(node);</div><div class="line">            &#125;,</div><div class="line">            onBeforeExpand: <span class="function"><span class="keyword">function</span> (<span class="params">node, param</span>) </span>&#123;</div><div class="line">                $(<span class="keyword">this</span>).tree(<span class="string">'options'</span>).url = baseUrl + <span class="string">'dictionary/asyncdata/canton?id='</span> + node.id;</div><div class="line">            &#125;,</div><div class="line">            onLoadSuccess: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!isHighlight) <span class="keyword">return</span>;</div><div class="line">                $(<span class="string">"#tree li:eq(0)"</span>).find(<span class="string">"div"</span>).addClass(<span class="string">"tree-node-selected"</span>);</div><div class="line">                <span class="keyword">var</span> n = $(<span class="keyword">this</span>).tree(<span class="string">"getSelected"</span>);</div><div class="line">                <span class="keyword">if</span> (n != <span class="literal">null</span>) $(<span class="keyword">this</span>).tree(<span class="string">"select"</span>, n.target);</div><div class="line">                isHighlight = <span class="literal">false</span>;</div><div class="line">            &#125;,</div><div class="line">            loadFilter: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                data = data.data;</div><div class="line">                <span class="comment">//不要问为什么有这么一步，因为懒，不想改服务</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="string">'data'</span> <span class="keyword">in</span> data[i]) &#123;</div><div class="line">                        data[i].text = data[i].data;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> data;</div><div class="line">            &#125;,</div><div class="line">            formatter: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!node.children || node.children.length == <span class="number">0</span>) <span class="keyword">return</span> node.text;</div><div class="line">                <span class="keyword">return</span> node.text + <span class="string">'&lt;span style="color:blue"&gt;('</span> + node.children.length + <span class="string">')&lt;/span&gt;'</span>;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//屏蔽浏览器默认的右键事件，改为和左键点击事件一样的了</span></div><div class="line">            onContextMenu: <span class="function"><span class="keyword">function</span> (<span class="params">e, node</span>) </span>&#123;</div><div class="line">                e.preventDefault();</div><div class="line">                $(<span class="keyword">this</span>).tree(<span class="string">'select'</span>, node.target);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 编辑状态中的树，需要展开到指定节点</span></div><div class="line"><span class="comment">     * @param id 需要展开的Id</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">editComboTree</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            type: <span class="string">'post'</span>,</div><div class="line">            url: baseUrl + <span class="string">'dictionary/expandto/'</span> + id,</div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (response == <span class="literal">null</span> || response.statusCode == <span class="number">400</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                $(<span class="string">"#tree"</span>).combotree(<span class="string">'loadData'</span>, response);</div><div class="line">                $(<span class="string">"#tree"</span>).combotree(<span class="string">'setValue'</span>, id);</div><div class="line">            &#125;,</div><div class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="comment">//TODO error</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 点击树，获取级联的信息</span></div><div class="line"><span class="comment">     * @param node 节点</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getNodeMessage</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> remark = node.type;</div><div class="line">        <span class="keyword">if</span> (remark == <span class="literal">null</span> || remark == <span class="string">""</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.province) &#123;</div><div class="line">            selectNode.province = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.city) &#123;</div><div class="line">            selectNode.city = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.county) &#123;</div><div class="line">            selectNode.county = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remark == nodeType.town) &#123;</div><div class="line">            selectNode.town = node.text;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//查找父级节点，没有则退出</span></div><div class="line">        <span class="keyword">var</span> parent = getParentNode(node);</div><div class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</div><div class="line">            getNodeMessage(parent)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据节点获取父节点</span></div><div class="line"><span class="comment">     * @param node 节点</span></div><div class="line"><span class="comment">     * @returns &#123;*&#125; 父节点</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getParentNode</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> tree = $(<span class="string">'#tree'</span>).combotree(<span class="string">'tree'</span>);</div><div class="line">        <span class="keyword">return</span> tree.tree(<span class="string">'getParent'</span>, node.target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//测试的，打开到指定的子节点，点击事件</span></div><div class="line">    $(<span class="string">"#expand"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        editComboTree(<span class="string">'431000000000'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>body&gt;</div><div class="line">&lt;<span class="regexp">/html&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><p>服务端有点差，就不贴代码了，说下解决思路。</p>
<ul>
<li>持久层框架：JPA</li>
<li>数据库：PostgreSQL<h5 id="加载异步树的服务"><a href="#加载异步树的服务" class="headerlink" title="加载异步树的服务"></a>加载异步树的服务</h5>主要是利用了SQL，对，使用原生SQL查的。这里还有一个问题，就是easyui的ComboTree加载异步树的时候，需要判断当前查询出来的节点下面还有没有子节点，就是我们平常看到树的前面有一个尖三角符号，用来表示是否能展开。<br>ComboTree同时继承了Combo和Tree两个的特点，其实，就是把数据绑定到tree上，tree的节点（node）有一个属性是<code>state</code>，用来控制树的该节点的展开与否，它有两个值：<code>open</code>和<code>closed</code>，所以查询的时候干脆就直接的查出了这个属性，SQL有些特别：</li>
</ul>
<p>condition参数是接到WHERE后面的查询条件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AtomicReference&lt;String&gt; sql = new AtomicReference&lt;&gt;(&quot;SELECT T.*,CASE WHEN T1.\&quot;COUNT\&quot;=0 OR &quot; +</div><div class="line">               &quot;T1.\&quot;COUNT\&quot; IS NULL THEN &apos;open&apos; WHEN T1.\&quot;COUNT\&quot;&gt;0 THEN &apos;closed&apos; END AS \&quot;STATE\&quot; &quot; +</div><div class="line">               &quot;FROM(SELECT * FROM \&quot;DEV_DICTIONARY\&quot; WHERE &quot; + condition.get() +</div><div class="line">               &quot; ORDER BY \&quot;PARENTID\&quot;) T LEFT JOIN (SELECT \&quot;PARENTID\&quot;, COUNT(\&quot;PARENTID\&quot;) \&quot;COUNT\&quot; FROM \&quot;DEV_DICTIONARY\&quot; &quot; +</div><div class="line">               &quot;WHERE \&quot;PARENTID\&quot; IN (SELECT \&quot;ID\&quot; FROM \&quot;DEV_DICTIONARY\&quot; WHERE &quot; + condition.get() + &quot;) &quot; +</div><div class="line">               &quot;GROUP BY \&quot;PARENTID\&quot;) T1 ON T.\&quot;ID\&quot; = T1.\&quot;PARENTID\&quot;&quot;);</div></pre></td></tr></table></figure></p>
<p>这样太难看了，最后娶一个实例：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">        T.*,</div><div class="line">        <span class="keyword">CASE</span> </div><div class="line">            <span class="keyword">WHEN</span> T1.<span class="string">"COUNT"</span>=<span class="number">0</span> </div><div class="line">            <span class="keyword">OR</span> T1.<span class="string">"COUNT"</span> <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'open'</span> </div><div class="line">            <span class="keyword">WHEN</span> T1.<span class="string">"COUNT"</span>&gt;<span class="number">0</span> <span class="keyword">THEN</span> <span class="string">'closed'</span> </div><div class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">"STATE"</span> </div><div class="line">    <span class="keyword">FROM</span></div><div class="line">        (<span class="keyword">SELECT</span></div><div class="line">            * </div><div class="line">        <span class="keyword">FROM</span></div><div class="line">            <span class="string">"DEV_DICTIONARY"</span> </div><div class="line">        <span class="keyword">WHERE</span></div><div class="line">            <span class="string">"TYPE"</span>=<span class="string">'canton'</span> </div><div class="line">            <span class="keyword">AND</span> <span class="string">"PARENTID"</span> <span class="keyword">is</span> <span class="literal">null</span> </div><div class="line">            </div><div class="line">                    <span class="keyword">ORDER</span> <span class="keyword">BY</span></div><div class="line">                        <span class="string">"PARENTID"</span></div><div class="line">                ) T </div><div class="line">            <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></div><div class="line">                (</div><div class="line">                    <span class="keyword">SELECT</span></div><div class="line">                        <span class="string">"PARENTID"</span>,</div><div class="line">                        <span class="keyword">COUNT</span>(<span class="string">"PARENTID"</span>) <span class="string">"COUNT"</span> </div><div class="line">                    <span class="keyword">FROM</span></div><div class="line">                        <span class="string">"DEV_DICTIONARY"</span> </div><div class="line">                    <span class="keyword">WHERE</span></div><div class="line">                        <span class="string">"PARENTID"</span> <span class="keyword">IN</span> (</div><div class="line">                            <span class="keyword">SELECT</span></div><div class="line">                                <span class="string">"ID"</span> </div><div class="line">                            <span class="keyword">FROM</span></div><div class="line">                                <span class="string">"DEV_DICTIONARY"</span> </div><div class="line">                            <span class="keyword">WHERE</span></div><div class="line">                                <span class="string">"TYPE"</span>=<span class="string">'canton'</span> </div><div class="line">                                <span class="keyword">AND</span> <span class="string">"PARENTID"</span> <span class="keyword">is</span> <span class="literal">null</span> )</div><div class="line">                            <span class="keyword">GROUP</span> <span class="keyword">BY</span></div><div class="line">                                <span class="string">"PARENTID"</span></div><div class="line">                        ) T1 </div><div class="line">                            <span class="keyword">ON</span> T.<span class="string">"ID"</span> = T1.<span class="string">"PARENTID"</span></div></pre></td></tr></table></figure></p>
<p>这样查询出来的就多了一列state，按照是否有子集，设置它是closed 还是open。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122215405.png" alt="image"></p>
<p>当然还需要到实体类上去映射好这个属性字段。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Column(name = &quot;\&quot;STATE\&quot;&quot;)</div><div class="line">private String state;</div></pre></td></tr></table></figure></p>
<h5 id="加载到指定节点"><a href="#加载到指定节点" class="headerlink" title="加载到指定节点"></a>加载到指定节点</h5><p>加载到指定节点，并展开到该节点。这个就用脑图说下思路吧。暂时我感觉我的做法不是很好，我看能不能减少复杂度，期待以后能解决，看到的朋友如果有好的解决办法，请与我联系，万分感谢。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122221203.png" alt="image"></p>
<p>其实我们需要找到的数据就是这样的一组数据：<br>首先找到同级的，再去找父的，父的又去找自己的同级，再去找自己的上一级。。。直到找到root节点，完毕。</p>
<p>我是分步做的，应该有更少步骤或者一条SQL完成的，下去研究，估计有点难。</p>
<h4 id="展示下结果吧"><a href="#展示下结果吧" class="headerlink" title="展示下结果吧"></a>展示下结果吧</h4><p>异步树：<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122221612.png" alt="image"></p>
<p>展示到指定节点效果:</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171122221552.png" alt="image"></p>
<p>还要注意一点，就是请求服务使用get会好些，get比post快，但是要加上时间戳，避免去读取浏览器缓存数据。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> easyui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《小王子》读后感]]></title>
      <url>/princekin.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>从前呀，有一位小王子，他住在同自己差不多大的星球上，他想要一位朋友。</p>
</blockquote>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/timg.jpg" alt="image"></p>
<p>平时比较忙，如果说读小说的话时间太长了，还有很多专业的书没看，弄得半年都过去了《飘》都没看完，说句老实话，我是个不喜欢读书的人/。。</p>
<a id="more"></a>
<hr>
<blockquote>
<p>然而他却放佛面对意见很严肃的事情，第二次从容迫不及待的对我说：“请为了画只羊。”</p>
</blockquote>
<p>这句话应该很经典，这也是故事中羊的由来，故事中的我从未划过羊，内心其实是很害怕的，其实看得多才知道，为什么会有羊这个片段，说到底就是年少的单纯吧，让羊去啃那个面包树；但是也有可能是追求善良吧，个人理解。</p>
<blockquote>
<p>忘记一位朋友，这真使人悲哀。并非每个人都有过一位朋友。</p>
</blockquote>
<p>这段话真是揪心啊，与朋友一起是一个很快乐的事情，但是想忘记一个人真的很痛苦吧，也许有一天，会慢慢淡忘一个人。但是在当前岁月下，好好珍惜身边的每一个爱你和你爱的人。现在，买得起充电五分钟的手机，但是通话两小时的人可不好找。</p>
<blockquote>
<p>猴面包树在长大以前也是很小的。</p>
</blockquote>
<p>小王子在知道羊吃小灌木的时候，他很开心，它们可以吃猴面包树了，但是猴面包树已经长得很大，羊可吃不了，只有在它小的时候，才能警惕它。孩子们，要当心那些猴面包树呀！<br>猴面包树是人们都不想要的东西，想放弃的东西，但是，人们是自私的，想放下，却不想放下，但是自己又不甘放下那段执念，明知结果不好，确实还是贪婪的霸占着这一片不属于你的土地，最好确是还是一步一步越陷越深。所以要在开始有这种心理的时候就要把它铲除掉，找到自己的玫瑰，将它种下，在心中发芽，这样心中才能充满美好。</p>
<blockquote>
<p>你知道，当感到十分愁闷的时候，人们都会想看太阳落山。</p>
</blockquote>
<p>小王子一天能看四十三次日出，那是多么忧郁的生活啊，也许唯一的快乐就是看日落，人总是在不知不觉中，感到愁闷，而且是非常糟糕的那种，人为什么会那么难过了。<br>可能是有一种人，就像我吧，总是喜欢把悲伤隐藏的深一点，再深一点，习惯性了都，当然各种事情都有暴露的，比如说，悲伤的时候想看日落，哈哈。说不定高兴的时候就想看日出了。</p>
<blockquote>
<p>对别人提出的要求必须是他们能够办到的。权力首先应当以理性为基础。</p>
</blockquote>
<p>小王子来到一个星球上，住的只有一个国王，他统治着一切，但是他并没有拥有一切，。虽然他拥有着至高无上的权力，但是天真地想让自己统治一切，发出不合理的命令来强人所难。<br>所以在现实社会中，首先要求别人做事的时候，一定要考虑到他人感受为前提，虽然你可能是BOSS，但是优秀员工都有随时踢开SB 老板的权力。扯远了，永远不要忘了，不能提出不合理的要求。</p>
<blockquote>
<p>虚荣心极强的人眼中，所有的人都是他们的崇拜者。</p>
</blockquote>
<p>这个怎么说了，虚荣，当今社会，每个人都可能会犯的毛病了，可能不经意间，就出现了，只不过没发现，觉得理所当然，当然只是自己觉得，哈哈。我说我长得好帅，万人迷，当然这个不是虚荣，只是小小的吹牛皮。很无聊的，不说了。</p>
<blockquote>
<p>“你为什么要喝酒？”“为了忘记。”“忘记什么？”“忘记我的惭愧。”“你惭愧什么？”“我惭愧我喝酒”……</p>
</blockquote>
<p>有时候，就是陷入自己设下的思维怪圈中，怎么才能跳出来？<br>亲爱的，面对现实的一切，不要自我麻痹。</p>
<blockquote>
<p>对我而言，假如我有一条围巾，我会用它围我的脖子，而且我可以带走它。我有一朵花，我就会摘下我的花朵，而且我可以将它带走。但你却无法摘下满天的星星啊。</p>
</blockquote>
<p>每次看到这段话的时候我都很触动。商人很富有，霸占了所有的星星，拥有一切，但是他却并没有获得他们。<br>星星是多么的耀眼，那么的迷人，但我宁愿有一条可以围在脖子上的围巾，还有一个带走的花。</p>
<blockquote>
<p>规定倒的地方没改变，这就是倒霉的地方！这颗星球一年比一年转得快，当规定却没改。</p>
</blockquote>
<p>哎，初看点灯人，觉得是个很可爱得人儿，他做着自己口中所说的讨厌的工作，却忠于职守，而且，是那种一成不变的，星球越转越快，但却口令没变，导致每一分钟都要点灯，灭灯，小王子让他改下，他却喜欢一劳永逸。<br>看到这里不又想到现实生活中，可以说一部分人的代表吧，这里说明下，我没有黑的意思，做的同一份工作很多年，但却没有一点上升的意思，但是他们真的很刻苦用心。这个大概就是忠于职守和用心不是同一个概念了，世界上没有绝对的事情，但是有肯定的事情，随着时代进步，一定能占尽先机的。</p>
<blockquote>
<p>星星发亮是为了让每一个人有一天都能找到属于自己的星星。</p>
<p>如果你爱上了某个星球的一朵花。那么，只要在夜晚仰望星空，就会觉得漫天的繁星就像一朵朵盛开的花。</p>
</blockquote>
<p>当在一个地方存在某种特殊意义的时候，不管是什么它将都是独一无二的美丽，即便漫长黑夜里，也可以通过光亮寻找到它的位置。<br>玫瑰是简单而且性格敏感的代表，看到它的故事片段，人心都觉得好暖。玫瑰消失后，这段话很感动，也许就是“心中有了想念的人，你便不觉得孤独”的含义，无牵无挂心中空空如也才最是寂寞。对于狐狸来说，也是不会寂寞的。当然也是遗憾的。你要走便走，不要回头，我不会留。</p>
<blockquote>
<p>狐狸说：“对我来说，你只是一个小男孩，就像其他成千上万个小男孩一样没有什么两样。我不需要你。你也不需要我。对你来说，我也只是一只狐狸，和其他成千上万的狐狸没有什么不同。但是，如果你驯养了我，我们就会彼此需要。对我来说，你就是我的世界里独一无二的了；我对你来说，也是你的世界里的唯一了。”<br>一旦你驯服了什么，就要对她负责，永远的负责。</p>
</blockquote>
<p>狐狸告诉了让小王子懂得了生活的本质和爱情的真谛。“一个人被驯服,是冒着流泪的危险的”，“只有用心才能看得清。实质性的东西，用眼睛是看不见的。”<br>用心去看才看得清楚，小王子知道需要珍惜他的玫瑰；爱就是责任。</p>
<p>总之故事的结尾是伤心的。从头到尾是一个以爱情的伤痛为背景的线索，以一份纯真的爱情，爱得真切，深入骨髓得疼痛结束。</p>
<p>爱是一种责任，爱也是一种短暂易逝的美好。用心去爱你身边的每一个人，爱可以是亲情、友情……别整天就知道爱情才是爱，每一个真切对你好的人，不要让他们攒满失望离开，毕竟一生中遇到这么可爱的人真的不多，走一个少一个。</p>
<blockquote>
<p>Growing up is not the problem.Forgetting is.</p>
</blockquote>
<hr>
<p>一切仅代表个人观点哈，勿喷</p>
]]></content>
      
        <categories>
            
            <category> 随随便便 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小王子 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的蛋碎了一个]]></title>
      <url>/20171120.html</url>
      <content type="html"><![CDATA[<p>真的。。</p>
<a id="more"></a>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/IMG_20171120_203908.jpg" alt="image"></p>
<p>看到这个蛋，随口喊出那句话，被自己蠢哭了。</p>
<p>支付宝刮了一张卡，感觉到马云爸爸深深的恶意。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/Screenshot.png" alt="image"></p>
<p>用穷逼会员咋的，</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/u=3069228711,3931262156&amp;fm=27&amp;gp=0.jpg" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Redis完成分布式锁]]></title>
      <url>/redis-lock.html</url>
      <content type="html"><![CDATA[<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><blockquote>
<p>分布式的CAP理论告诉我们“任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。”所以，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。</p>
</blockquote>
<p>为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。</p>
<h4 id="使用Redis实现锁的原因"><a href="#使用Redis实现锁的原因" class="headerlink" title="使用Redis实现锁的原因"></a>使用Redis实现锁的原因</h4><ol>
<li>Redis有很高的性能；</li>
<li>Redis命令对此支持较好，实现起来比较方便。</li>
</ol>
<a id="more"></a>
<h4 id="主要利用到的命令"><a href="#主要利用到的命令" class="headerlink" title="主要利用到的命令"></a>主要利用到的命令</h4><h5 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h5><blockquote>
<p>SETNX key val<br>当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。</p>
</blockquote>
<h5 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h5><p>expire key timeout<br>为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。</p>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>delete key<br>删除key</p>
<h4 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h4><ul>
<li>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，保证key一致，通过此在释放锁的时候进行判断。</li>
<li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li>
<li>释放锁的时候，当前时间小于超时时间，则执行delete进行锁释放。</li>
</ul>
<h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * &lt;b&gt;redis分布式锁的实现&lt;/b&gt;&lt;/br&gt;</span></div><div class="line"><span class="comment"> * 还有一些失败机制没处理，以后在使用测试阶段，完善。</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/20 9:22&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RedisLock.class);</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * redis连接</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Jedis jedis;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 锁定资源名，锁key，保证唯一。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockName;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 资源上锁的最长时间，超时自动解锁单位秒，&lt;/br&gt;</span></div><div class="line"><span class="comment">     * 建议设置成死的，如果设置不当容易影响效率，严重造成死锁。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> expireTime = Integer.valueOf(PropertyUtil.get(<span class="string">"redisLock.expireTime"</span>));</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 线程获取不到锁，休眠的时间，单位ms</span></div><div class="line"><span class="comment">     * 避免系统资源浪费</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sleepTime = Long.valueOf(PropertyUtil.get(<span class="string">"redisLock.sleepTime"</span>));</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当前锁超时的时间戳，单位毫秒</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expireTimeOut = <span class="number">0</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取锁状态，锁中断状态&lt;/br&gt;</span></div><div class="line"><span class="comment">     * 值为false的时候中断获取锁&lt;/br&gt;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> interrupted = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> jedis    redis连接</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> lockName 上锁key，唯一标识</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLock</span><span class="params">(Jedis jedis, String lockName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lockName == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"lockName is required"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.jedis = jedis;</div><div class="line">        <span class="comment">// 重命名的前缀，可以不加，也可以自定义，保证唯一即可。</span></div><div class="line">        <span class="keyword">this</span>.lockName = <span class="string">"lock"</span> + lockName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取锁。如果锁已被其他线程获取，则进行等待，直到拿到锁为止。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.lockCheck();</div><div class="line">            <span class="keyword">long</span> id = jedis.setnx(lockName, lockName);</div><div class="line">            <span class="keyword">if</span> (id == <span class="number">0L</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">/**</span></div><div class="line"><span class="comment">                     * 没有获取到锁则进行等待睡眠时间，再去重新获取锁&lt;/br&gt;</span></div><div class="line"><span class="comment">                     * 这里使用随机时间可能会好一点,可以防止饥饿进程的出现,即,当同时到达多个进程,</span></div><div class="line"><span class="comment">                     * 只会有一个进程获得锁,其他的都用同样的频率进行尝试,后面有来了一些进行,</span></div><div class="line"><span class="comment">                     * 也以同样的频率申请锁,这将可能导致前面来的锁得不到满足.</span></div><div class="line"><span class="comment">                     * 使用随机的等待时间可以一定程度上保证公平性</span></div><div class="line"><span class="comment">                     */</span></div><div class="line">                    Thread.sleep(<span class="keyword">this</span>.sleepTime);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    logger.error(<span class="string">"Thread is interrupted"</span>, e);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                expireTimeOut = System.currentTimeMillis() + expireTimeOut * <span class="number">1000</span> + <span class="number">1</span>;</div><div class="line">                <span class="comment">//设置redis中key的过期时间</span></div><div class="line">                jedis.expire(<span class="keyword">this</span>.lockName, expireTime);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 中断锁获取</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException 中断异常</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.interrupted = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 它表示用来尝试获取锁，会立即返回，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，&lt;/br&gt;</span></div><div class="line"><span class="comment">     * 也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.lockCheck();</div><div class="line">        <span class="comment">//尝试获取锁</span></div><div class="line">        <span class="keyword">long</span> id = jedis.setnx(lockName, lockName);</div><div class="line">        <span class="comment">//返回结果为0 则已经存在key，已经存在锁。</span></div><div class="line">        <span class="keyword">if</span> (id == <span class="number">0L</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            expireTimeOut = System.currentTimeMillis() + expireTimeOut * <span class="number">1000</span> + <span class="number">1</span>;</div><div class="line">            <span class="comment">//设置redis中key的过期时间</span></div><div class="line">            jedis.expire(<span class="keyword">this</span>.lockName, expireTime);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，&lt;/br&gt;</span></div><div class="line"><span class="comment">     * 这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。&lt;/br&gt;</span></div><div class="line"><span class="comment">     * 如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。&lt;/br&gt;</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> time 等待时间</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException 中断异常</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (unit == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"TimeUnit is required."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line">        <span class="keyword">long</span> timeOutAt = now + calcSeconds(time, unit);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.lockCheck();</div><div class="line">            <span class="keyword">long</span> id = jedis.setnx(<span class="keyword">this</span>.lockName, <span class="keyword">this</span>.lockName);</div><div class="line">            <span class="comment">// id = 0 表示加锁失败</span></div><div class="line">            <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// 获取锁超时</span></div><div class="line">                <span class="keyword">if</span> (System.currentTimeMillis() &gt; timeOutAt) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 休眠一段时间，线程再继续获取锁。</span></div><div class="line">                Thread.sleep(<span class="keyword">this</span>.sleepTime);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//获取锁成功，设置锁过期时间戳</span></div><div class="line">                expireTimeOut = System.currentTimeMillis() + expireTimeOut * <span class="number">1000</span> + <span class="number">1</span>;</div><div class="line">                jedis.expireAt(<span class="keyword">this</span>.lockName, expireTimeOut);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * &lt;b&gt;释放锁&lt;b/&gt;</span></div><div class="line"><span class="comment">     * 当前时间小于过期时间，则锁未超时，删除锁，&lt;/br&gt;</span></div><div class="line"><span class="comment">     * 过了超时时间，redis已经删除了该key。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (System.currentTimeMillis() &lt; expireTimeOut) &#123;</div><div class="line">            jedis.del(lockName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//TODO 涉及到 Condition 例外一个重要内容，以后再实现这个方法</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"did not supported."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 检查当前线程资源redis连接和锁的状态</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lockCheck</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (jedis == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Jedis is required."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!interrupted) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Thread is interrupted."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * TimeUnit单位时间转换成毫秒</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">calcSeconds</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (unit == TimeUnit.DAYS) &#123;</div><div class="line">            <span class="keyword">return</span> time * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (unit == TimeUnit.HOURS) &#123;</div><div class="line">            <span class="keyword">return</span> time * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (unit == TimeUnit.MINUTES) &#123;</div><div class="line">            <span class="keyword">return</span> time * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (unit == TimeUnit.SECONDS) &#123;</div><div class="line">            <span class="keyword">return</span> time * <span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (unit == TimeUnit.MILLISECONDS) &#123;</div><div class="line">            <span class="keyword">return</span> time;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//后面的不实现了，基本上用不到。</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"cannot be resolved."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># redis lock</div><div class="line"># s</div><div class="line">redisLock.expireTime=1</div><div class="line"># ms</div><div class="line">redisLock.sleepTime=100</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试就选用最经典的秒杀系统吧，使用分布式锁可以控制资源。</p>
<p>下面模拟500人秒杀100件商品。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/20 14:12&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockTest</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 100件物品</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> goodsNum = <span class="number">100</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 500人</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> personNum = <span class="number">500</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 不加锁的情况</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; personNum; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                <span class="keyword">if</span> (goodsNum &gt; <span class="number">0</span>) &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"获取了锁"</span>);</div><div class="line">                    System.out.println(<span class="string">"商品剩余："</span> + --goodsNum);</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 加上分布锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; personNum; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                Jedis jedis = RedisUtil.getJedis();</div><div class="line">                <span class="comment">//初始化锁，key保持一致</span></div><div class="line">                Lock lock = <span class="keyword">new</span> RedisLock(jedis, <span class="string">"aa"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    lock.lock();</div><div class="line">                    <span class="keyword">if</span> (goodsNum &gt; <span class="number">0</span>) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"获取了锁"</span>);</div><div class="line">                        System.out.println(<span class="string">"商品剩余："</span> + --goodsNum);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    <span class="comment">//释放锁，并且释放redis连接</span></div><div class="line">                    lock.unlock();</div><div class="line">                    RedisUtil.returnResource(jedis);</div><div class="line">					</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不加锁的部分结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Thread-100获取了锁</div><div class="line">商品剩余：-3</div><div class="line">Thread-99获取了锁</div><div class="line">商品剩余：5</div><div class="line">商品剩余：6</div><div class="line">Thread-98获取了锁</div><div class="line">商品剩余：-5</div><div class="line">商品剩余：7</div><div class="line">商品剩余：-4</div><div class="line">商品剩余：0</div><div class="line">商品剩余：1</div><div class="line">Thread-105获取了锁</div><div class="line">商品剩余：-6</div></pre></td></tr></table></figure></p>
<p>上锁的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Thread-8获取了锁</div><div class="line">商品剩余：5</div><div class="line">Thread-238获取了锁</div><div class="line">商品剩余：4</div><div class="line">Thread-72获取了锁</div><div class="line">商品剩余：3</div><div class="line">Thread-137获取了锁</div><div class="line">商品剩余：2</div><div class="line">Thread-402获取了锁</div><div class="line">商品剩余：1</div><div class="line">Thread-337获取了锁</div><div class="line">商品剩余：0</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>并发量大的时候，需要考虑锁时间；</li>
<li>考虑失败情况，上锁了，但是设置超时时间失败（redis崩溃等各种情况），锁一致都没有释放，导致死锁的情况发生，现在需要做的是，把key的value设置成超时的时间，每次上锁失败都去检查一次，超时的就覆盖，可以避免死锁。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[volatile关键字解析]]></title>
      <url>/java-volatile.html</url>
      <content type="html"><![CDATA[<h3 id="内存模型的相关概念"><a href="#内存模型的相关概念" class="headerlink" title="内存模型的相关概念"></a>内存模型的相关概念</h3><p>大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。</p>
<a id="more"></a>
<p>也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = i + 1;</div></pre></td></tr></table></figure></p>
<p>当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。</p>
<p>这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核CPU为例。</p>
<p>比如同时有2个线程执行这段代码，假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。但是事实会是这样吗？</p>
<p>可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值为1，然后线程2把i的值写入内存。</p>
<p>最终结果i的值是1，而不是2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p>
<p>也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</p>
<p>为了解决缓存不一致性问题，通常来说有以下2种解决方法：</p>
<ol>
<li>通过在总线加LOCK#锁的方式；</li>
<li>通过缓存一致性协议。</li>
</ol>
<p>这2种方式都是硬件层面上提供的方式。</p>
<p>在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p>
<p>但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。</p>
<p>所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/212219343783699.jpg" alt="image"></p>
<h3 id="并发编程中的三个概念"><a href="#并发编程中的三个概念" class="headerlink" title="并发编程中的三个概念"></a>并发编程中的三个概念</h3><p>在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：</p>
<h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p>
<p>一个很经典的例子就是银行账户转账问题：</p>
<p>比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。</p>
<p>试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后，再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。</p>
<p>所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。</p>
<p>同样地反映到并发编程中会出现什么结果呢？<br>举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = 9;</div></pre></td></tr></table></figure></p>
<p>假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。<br>那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p>
<p>举个简单的例子，看下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//线程1执行的代码</div><div class="line">int i = 0;</div><div class="line">i = 10;</div><div class="line"> </div><div class="line">//线程2执行的代码</div><div class="line">j = i;</div></pre></td></tr></table></figure></p>
<p>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p>
<p>此时线程2执行 <code>j = i</code>，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</p>
<p>这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int i = 0;              </div><div class="line">boolean flag = false;</div><div class="line">i = 1;                //语句1  </div><div class="line">flag = true;          //语句2</div></pre></td></tr></table></figure></p>
<p>上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p>
<p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p>
<p>比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。</p>
<p>但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int a = 10;    //语句1</div><div class="line">int r = 2;    //语句2</div><div class="line">a = a + 3;    //语句3</div><div class="line">r = a*a;     //语句4</div></pre></td></tr></table></figure></p>
<p>这段代码有4个语句，那么可能的一个执行顺序是：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/212305263939989.jpg" alt="image"></p>
<p>那么可不可能是这个执行顺序呢： 语句2   语句1    语句4   语句3</p>
<p>不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</p>
<p>虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1:</span></div><div class="line">context = loadContext();   <span class="comment">//语句1</span></div><div class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></div><div class="line"> </div><div class="line"><span class="comment">//线程2:</span></div><div class="line"><span class="keyword">while</span>(!inited )&#123;</div><div class="line">  sleep()</div><div class="line">&#125;</div><div class="line">doSomethingwithconfig(context);</div></pre></td></tr></table></figure></p>
<p>上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</p>
<p> 从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p>
<p>也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p>
<h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下Java内存模型，研究一下Java内存模型为我们提供了哪些保证以及在java中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p>
<p>在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p>
<p>Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p>
<p>举个简单的例子：在java中，执行下面这个语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i  = 10;</div></pre></td></tr></table></figure>
<p>执行线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</p>
<p>那么Java语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？</p>
<h4 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h4><p>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p>
<p>上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：</p>
<p>请分析以下哪些操作是原子性操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = 10;         //语句1</div><div class="line">y = x;         //语句2</div><div class="line">x++;           //语句3</div><div class="line">x = x + 1;     //语句4</div></pre></td></tr></table></figure>
<p>咋一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。</p>
<p>语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。</p>
<p>语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</p>
<p>同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。</p>
<p>所以上面4个语句只有语句1的操作具备原子性。</p>
<p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p>
<p>不过这里有一点需要注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。</p>
<p>从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p>
<h4 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h4><p>对于可见性，Java提供了volatile关键字来保证可见性。</p>
<p>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p>
<p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p>
<p>另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>
<h4 id="有序性-1"><a href="#有序性-1" class="headerlink" title="有序性"></a>有序性</h4><p>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p>
<p><strong>另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</strong></p>
<p>下面就来具体介绍下<code>happens-before</code>原则（先行发生原则）：</p>
<ol>
<li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</li>
<li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作；</li>
<li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；</li>
<li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li>
<li>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；</li>
<li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li>
<li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li>
<li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始。</li>
</ol>
<p>这8条原则摘自《深入理解Java虚拟机》。</p>
<p>这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。</p>
<p>下面我们来解释一下前4条规则：<br>对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p>
<p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。</p>
<p>第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p>
<p>第四条规则实际上就是体现happens-before原则具备传递性。</p>
<h3 id="深入剖析volatile关键字"><a href="#深入剖析volatile关键字" class="headerlink" title="深入剖析volatile关键字"></a>深入剖析volatile关键字</h3><p>在前面讲述了很多东西，其实都是为讲述volatile关键字作铺垫，那么接下来我们就进入主题。</p>
<h4 id="volatile关键字的两层语义"><a href="#volatile关键字的两层语义" class="headerlink" title="volatile关键字的两层语义"></a>volatile关键字的两层语义</h4><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p>
<ol>
<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li>
<li>禁止进行指令重排序。</li>
</ol>
<p>先看一段代码，假如线程1先执行，线程2后执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">while</span>(!stop)&#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//线程2</span></div><div class="line">stop = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p>
<p>下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。</p>
<p>那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。</p>
<p>但是用volatile修饰之后就变得不一样了：</p>
<p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p>
<p>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p>
<p>第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p>
<p>那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p>
<p>那么线程1读取到的就是最新的正确的值。</p>
<h4 id="volatile保证原子性吗？"><a href="#volatile保证原子性吗？" class="headerlink" title="volatile保证原子性吗？"></a>volatile保证原子性吗？</h4><p>从上面知道volatile关键字保证了操作的可见性，但是volatile能保证对变量的操作是原子性吗？<br>下面看一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc++;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p>
<p>可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。</p>
<p>这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p>
<p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p>
<p>假如某个时刻变量inc的值为10，</p>
<p>线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p>
<p>然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p>
<p>然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p>
<p>那么两个线程分别进行了一次自增操作后，inc只增加了1。</p>
<p>解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p>
<p>根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p>
<p>把上面的代码改成以下任何一种都可以达到效果：</p>
<ol>
<li><p>采用synchronized：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>采用Lock：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inc++;</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>采用AtomicInteger：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span>  AtomicInteger inc = <span class="keyword">new</span> AtomicInteger();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc.getAndIncrement();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            <span class="keyword">new</span> Thread()&#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</div><div class="line">                        test.increase();</div><div class="line">                &#125;;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></div><div class="line">            Thread.yield();</div><div class="line">        System.out.println(test.inc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在java 1.5的<code>java.util.concurrent.atomic</code>包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p>
<h4 id="volatile能保证有序性吗？"><a href="#volatile能保证有序性吗？" class="headerlink" title="volatile能保证有序性吗？"></a>volatile能保证有序性吗？</h4><p>在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p>
<p>volatile关键字禁止指令重排序有两层意思：</p>
<ol>
<li>当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</li>
<li>在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</li>
</ol>
<p>可能上面说的比较绕，举个简单的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//x、y为非volatile变量</div><div class="line">//flag为volatile变量</div><div class="line"> </div><div class="line">x = 2;        //语句1</div><div class="line">y = 0;        //语句2</div><div class="line">flag = true;  //语句3</div><div class="line">x = 4;         //语句4</div><div class="line">y = -1;       //语句5</div></pre></td></tr></table></figure></p>
<p>由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p>
<p>并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p>
<p>那么我们回到前面举的一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//线程1:</div><div class="line">context = loadContext();   //语句1</div><div class="line">inited = true;             //语句2</div><div class="line"> </div><div class="line">//线程2:</div><div class="line">while(!inited )&#123;</div><div class="line">  sleep()</div><div class="line">&#125;</div><div class="line">doSomethingwithconfig(context);</div></pre></td></tr></table></figure></p>
<p>前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。</p>
<p>这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。</p>
<h4 id="volatile的原理和实现机制"><a href="#volatile的原理和实现机制" class="headerlink" title="volatile的原理和实现机制"></a>volatile的原理和实现机制</h4><p>前面讲述了源于volatile关键字的一些使用，下面我们来探讨一下volatile到底如何保证可见性和禁止指令重排序的。</p>
<p>下面这段话摘自《深入理解Java虚拟机》：</p>
<blockquote>
<p>“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p>
</blockquote>
<p>lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p>
<ol>
<li>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</li>
<li>它会强制将对缓存的修改操作立即写入主存；</li>
<li>如果是写操作，它会导致其他CPU中对应的缓存行无效。</li>
</ol>
<h3 id="使用volatile关键字的场景"><a href="#使用volatile关键字的场景" class="headerlink" title="使用volatile关键字的场景"></a>使用volatile关键字的场景</h3><p>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p>
<ol>
<li>对变量的写操作不依赖于当前值；</li>
<li>该变量没有包含在具有其他变量的不变式中。</li>
</ol>
<p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p>
<p>事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。</p>
<p>下面列举几个Java中使用volatile的几个场景。</p>
<h4 id="状态标记量"><a href="#状态标记量" class="headerlink" title="状态标记量"></a>状态标记量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line"><span class="keyword">while</span>(!flag)&#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">()</span> </span>&#123;</div><div class="line">    flag = <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//线程1:</span></div><div class="line">context = loadContext();  </div><div class="line">inited = <span class="keyword">true</span>;            </div><div class="line"> </div><div class="line"><span class="comment">//线程2:</span></div><div class="line"><span class="keyword">while</span>(!inited )&#123;</div><div class="line">sleep()</div><div class="line">&#125;</div><div class="line">doSomethingwithconfig(context);</div></pre></td></tr></table></figure>
<h4 id="double-check"><a href="#double-check" class="headerlink" title="double check"></a>double check</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于为何需要这么写请参考：<br>《Java 中的双重检查（Double-Check）》<br><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/dl88250/article/details/5439024">http://blog.csdn.net/dl88250/article/details/5439024</a><br><a rel="external nofollow" target="_blank" href="http://www.iteye.com/topic/652440">http://www.iteye.com/topic/652440</a></p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><strong>文章转载<a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析</a></strong></p>
<h3 id="最后附上自己的学习代码"><a href="#最后附上自己的学习代码" class="headerlink" title="最后附上自己的学习代码"></a>最后附上自己的学习代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test.thread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/18 9:20&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc2;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 并发中不适用int， 使用jdk1.5的原子操作类</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> AtomicInteger inc3 = <span class="keyword">new</span> AtomicInteger();</div><div class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 自增，不保证原子性</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用synchronized保证原子性</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase1</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc1++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用Lock保证原子性</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increase2</span><span class="params">()</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            inc2++;</div><div class="line">        &#125; <span class="keyword">finally</span>&#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 使用jdk1.5的原子操作类，保证原子性</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increase3</span><span class="params">()</span> </span>&#123;</div><div class="line">        inc3.getAndIncrement();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//获取系统运行默认线程数，理论上只有一条主线程，需要注意的是，但是在idea上中默认多了一个monitor ctrlbreak线程。</span></div><div class="line">        <span class="comment">// 可参考 http://blog.csdn.net/xiaolinzi007/article/details/44487851</span></div><div class="line">        <span class="keyword">int</span> defaultActiveCount = Thread.activeCount();</div><div class="line">        <span class="keyword">int</span> threadCount = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> increaseCount = <span class="number">1000</span>;</div><div class="line">        <span class="keyword">final</span> VolatileTest test = <span class="keyword">new</span> VolatileTest();</div><div class="line">        <span class="comment">// 创建10个线程，分别自增1000次。</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; increaseCount; i1++) &#123;</div><div class="line">                    test.increase();</div><div class="line">                    test.increase1();</div><div class="line">                    test.increase2();</div><div class="line">                    test.increase3();</div><div class="line">                &#125;</div><div class="line">            &#125;).start();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//保证前面的线程都执行完。</span></div><div class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; defaultActiveCount) &#123;</div><div class="line">           Thread.yield();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 打印最终结果，理论结果10 * 1000 = 10000。</span></div><div class="line">        System.out.printf(<span class="string">"自增后inc为：%d%n"</span>, test.inc);</div><div class="line">        System.out.printf(<span class="string">"自增后inc1为：%d%n"</span>, test.inc1);</div><div class="line">        System.out.printf(<span class="string">"自增后inc2为：%d%n"</span>, test.inc2);</div><div class="line">        System.out.printf(<span class="string">"自增后inc3为：%d%n"</span>, test.inc3.get());</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 状态标记，利用volatile可见性属性，保持线程有序执行</span></div><div class="line"><span class="comment">         * &lt;p&gt;写一个线程做完事情后将标记赋值true，线程二一直阻塞标记为true时执行&lt;p/&gt;</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">                FlagTest.flag = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (!FlagTest.flag) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.printf(<span class="string">"%s s后flag改为true%n"</span>, <span class="number">3</span> - i);</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    i++;</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.printf(<span class="string">"flag为true 了"</span>);</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用volatile场景&lt;/br&gt;</span></div><div class="line"><span class="comment"> * 1. 状态标记量: 并发时候保证程序按照有序运行&lt;/br&gt;</span></div><div class="line"><span class="comment"> * 2. double check：并发中为了减少同步的开销，于是有了双重检查模式。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlagTest</span> </span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 状态标记量</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 双重检查单例模式</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> FlagTest instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FlagTest</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 双重检查double check</span></div><div class="line"><span class="comment">     * &lt;p&gt;并发情况下为了减少同步的开销，于是有了双重检查模式。&lt;/p&gt;</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> FlagTest</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FlagTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (FlagTest.class) &#123;</div><div class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</div><div class="line">                    instance = <span class="keyword">new</span> FlagTest();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">自增后inc为：9996</div><div class="line">自增后inc1为：10000</div><div class="line">自增后inc2为：10000</div><div class="line">自增后inc3为：10000</div><div class="line">3 s后flag改为true</div><div class="line">2 s后flag改为true</div><div class="line">1 s后flag改为true</div><div class="line">flag为true</div></pre></td></tr></table></figure></p>
<p>刚才的inc++操作来说，这个操作其实细分为三步，读inc的值给temp，将temp+1，赋值给inc。</p>
<ol>
<li>当线程1将inc读入内存，然后被阻塞。</li>
<li>线程2也将inc读入内存中，然后执行过第二步，temp+1，然后被阻塞。</li>
<li>线程1被唤醒，此时并没有对inc执行写操作，所以线程1不需要重新从内存读，所以执行完+1操作被赋值后重新写入主存中。</li>
<li>线程2被唤醒，由于inc执行了写操作，导致线程2中的inc缓存失效，所以从内存中重新读进来此时的inc值，由于已经执行过第二步了，此时将最新的temp赋值给inc，然后重新写入内存。就在刚才那一步发生了数据不一致性，此时的inc总共被加了一次。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>Java内存模型，原子性，可见性，有序性的理解；</li>
<li>volatile修饰的变量具有什么样的特性：可见性，禁止重排序；</li>
<li>并发中的使用方法和运用场景。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171117]]></title>
      <url>/20171117.html</url>
      <content type="html"><![CDATA[<p>今天天气可真是差啊，下班后出门骑了辆小黄车，没骑到一百米，雨就下起来，只好放下，毕竟大晚上撑伞骑车不太安全，只好选择去公交车站坐公交把。</p>
<p>我的天，一上公交车，还没坐一站路，堵瞎了，我这人虽然每次都是慢半拍的人，喜欢慢节奏的事情，但是了，堵车我最不喜欢的事情，关键我还坐公交车上。</p>
<p>后来接到一个消息说她被前男友骚扰了，说实话啊，我最讨厌的就是渣男了，但是还是要注意形象，去安慰下把，我也是搞不懂状况啊，多了不写了，就是堵了半个小时下车了，准备去她学校看看吧，这路人都不让走的，车一辆接一辆的。终于换车后，堵了一会儿，接到消息说她要回家了，长吁一口气了，其实我挺害怕的，但是听到消息的第一刻就是想到江歌案，所以我才想赶过去，不想写下去了，其实女孩子追到被逼回家了的，这也太可恶了吧。</p>
<p>搞到很晚才回，想到去拿快递，不错，居然没关门，拿回来一看，打开快递，没看码子，拆开试穿了一下，我的妈啊，这么大，我买的衣服全发成大码了，只能去实体店换了，（牌子就不暴露了，好坑。</p>
<p>今天下个班，搞得好累啊，好好睡个觉，明天周六上午还要去公司培训。</p>
<p>晚安/。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 中HashMap源码分析]]></title>
      <url>/java-hashmap.html</url>
      <content type="html"><![CDATA[<h3 id="HashMap-文档"><a href="#HashMap-文档" class="headerlink" title="HashMap 文档"></a>HashMap 文档</h3><blockquote>
<p>　HashMap是基于哈希表的Map接口实现的,此实现提供所有可选的映射操作。存储的是<code>&lt;key，value&gt;</code>对的映射，允许多个null值和一个null键。但此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br> 　除了HashMap是非同步以及允许使用null外，HashMap 类与 Hashtable大致相同。<br>　 此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（get 和 put）提供稳定的性能。迭代collection 视图所需的时间与 HashMap 实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。</p>
<p>　　HashMap 的实例有两个参数影响其性能：<code>初始容量</code> 和<code>加载因子</code>。容量 是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。<strong>加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</strong>     </p>
<p>　　通常，默认<code>加载因子</code> (0.75) 在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。<strong>在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</strong><br>　　注意，此实现<code>不是同步</code>的。 如果多个线程同时访问一个HashMap实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。这通常是通过同步那些用来封装列表的 对象来实现的。但如果没有这样的对象存在，则应该使用{@link Collections#synchronizedMap Collections.synchronizedMap}来进行“包装”，该方法最好是在创建时完成，为了避免对映射进行意外的非同步操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Map m = Collections.synchronizedMap(<span class="keyword">new</span> HashMap(...));</div></pre></td></tr></table></figure></p>
<p>由所有此类的“collection 视图方法”所返回的迭代器都是快速失败的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的remove 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不会在将来不确定的时间发生任意不确定行为的风险。</p>
<p>注意，迭代器的<code>快速失败</code>行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。</p>
</blockquote>
<a id="more"></a>
<p><strong>jdk版本：jdk1.8.0_144</strong></p>
<h3 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h3><p>HashMap实际上是一个“链表的数组”的数据结构，每个元素存放链表头结点的数组，即数组（散列桶）中的每一个元素都是链表。<img src="http://ov62kaxkk.bkt.clouddn.com/hashMap%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="image"></p>
<h4 id="解决Hash冲突"><a href="#解决Hash冲突" class="headerlink" title="解决Hash冲突"></a>解决Hash冲突</h4><p> HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了<code>链地址法（拉链法）</code>。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。<br> 有时候计算Hash值的时候，会出现相同的情况，这样两个key就存储到相同的位置上了，这个时候会出现<code>Hash碰撞</code>。</p>
<h3 id="HashMap的属性"><a href="#HashMap的属性" class="headerlink" title="HashMap的属性"></a>HashMap的属性</h3><h4 id="实现的接口和继承的类"><a href="#实现的接口和继承的类" class="headerlink" title="实现的接口和继承的类"></a>实现的接口和继承的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></div></pre></td></tr></table></figure>
<p>实际上HashMap没有从AbstractMap父亲中继承任何属性，从实现的接口上看，HashMap拥有克隆和序列化的属性。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认初始容量16，必须为2的幂</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"></div><div class="line">    <span class="comment">//最大容量</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line">    <span class="comment">//默认加载因子</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//使用红黑树而不是链表的阈值</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></div><div class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></div><div class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line"></div><div class="line">    <span class="comment">//table是一个Node&lt;K,V&gt;[]数组类型，而Node&lt;K,V&gt;实际上就是一个元素值为&lt;key,value&gt;对的单向链表。</span></div><div class="line">    <span class="comment">//哈希表的"key-value键值对"都是存储在Node&lt;K,V&gt;数组中的。 </span></div><div class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line">    <span class="comment">//用来指向entrySet()返回的set集合</span></div><div class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//HashMap的大小,即保存的键值对的数量</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="comment">//用来实现fail-fast机制的，记录HashMap结构化修改的次数</span></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">    <span class="comment">//下次需扩容的临界值，size&gt;=threshold就会扩容</span></div><div class="line">    <span class="comment">//如果table数组没有被分配，则该值为初始容量值16；或若该值为0，也表明该值为初始容量值</span></div><div class="line">    <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="comment">//加载因子</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div></pre></td></tr></table></figure>
<h5 id="table"><a href="#table" class="headerlink" title="table"></a>table</h5><p>table是一个Node[]数组类型，而Node实际上就是一个单向链表，哈希桶数组。哈希表的”key-value键值对”都是存储在Node数组中的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现Map.Entry&lt;K,V&gt;接口</span></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash; <span class="comment">//hash码</span></div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Node&lt;K,V&gt; next; <span class="comment">//指向链表中下一个实例</span></div><div class="line"></div><div class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">            <span class="keyword">this</span>.hash = hash;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line"></div><div class="line">        <span class="comment">//返回此映射项的哈希值:key值的哈希码与value值的哈希码按位异或的结果</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//用指定值替换对应于此项的值,并返回旧值</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">            V oldValue = value;</div><div class="line">            value = newValue;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//比较指定对象与此项的相等性</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                    Objects.equals(value, e.getValue()))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在HashMap中，哈希桶数组table的长度length大小必须为2的n次方，而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p>
<h5 id="loadFactor加载因子"><a href="#loadFactor加载因子" class="headerlink" title="loadFactor加载因子"></a>loadFactor加载因子</h5><p>HashMap的初始化大小length为16（默认值），默认加载因子0.75，threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold = length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p>
<p>threshold就是在此Load factor和length(数组长度)对应下允许的最大元素数目，超过这个数目就重新resize(扩容)，扩容后的HashMap容量是之前容量的两倍。默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p>
<h5 id="size大小"><a href="#size大小" class="headerlink" title="size大小"></a>size大小</h5><p>HashMap中实际存在的键值对数量。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>HashMap提供了四种方式的构造器，可以构造一个带指定初始容量和加载因子的空HashMap，构造一个带指定初始容量和默认加载因子(0.75)的空 HashMap，构造一个默认初始容量为16和默认加载因子为0.75的空HashMap，以及构造一个包含指定Map的元素的HashMap，容量与指定Map容量相同，加载因子为默认的0.75。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//找出“大于Capacity”的最小的2的幂,使Hash表的容量保持为2的次方倍</span></div><div class="line">    <span class="comment">//算法的思想：通过使用逻辑运算来替代取余，这里有一个规律，就是当N为2的次方（Power of two），那么X％N==X&amp;(N-1)。</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">//&gt;&gt;&gt; 无符号右移,高位补0</span></div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>; <span class="comment">//a|=b的意思就是把a和b按位或然后赋值给a</span></div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//构造一个带指定初始容量和加载因子的空HashMap</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//构造一个带指定初始容量和默认加载因子(0.75)的空 HashMap</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//构造一个具有默认初始容量 (16)和默认加载因子 (0.75)的空 HashMap</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//构造一个映射关系与指定 Map相同的新 HashMap,容量与指定Map容量相同，加载因子为默认的0.75</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">        putMapEntries(m, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="确定哈希桶数组索引位置"><a href="#确定哈希桶数组索引位置" class="headerlink" title="确定哈希桶数组索引位置"></a>确定哈希桶数组索引位置</h4><p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方法一：</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   <span class="comment">//jdk1.8 &amp; jdk1.7</span></div><div class="line">     <span class="keyword">int</span> h;</div><div class="line">     <span class="comment">// h = key.hashCode() 为第一步 取hashCode值</span></div><div class="line">     <span class="comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></div><div class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div><div class="line">方法二：</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  <span class="comment">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></div><div class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步 取模运算</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。</p>
<p>对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p>
<p>这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。</p>
<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。<br><img src="http://tech.meituan.com/img/java-hashmap/hashMap%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE.png" alt="image"></p>
<h4 id="HashMap的put方法"><a href="#HashMap的put方法" class="headerlink" title="HashMap的put方法"></a>HashMap的put方法</h4><p>HashMap提供了put(K key, V value)、putAll(Map&lt;? extends K, ? extends V&gt; m)这些添加键值对的方法。<br>HashMap的put方法执行过程可以通过下图来理解，<br><img src="http://ov62kaxkk.bkt.clouddn.com/hashMap%20put%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image"></p>
<ol>
<li><p>判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</p>
</li>
<li><p>根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；</p>
</li>
<li><p>判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</p>
</li>
<li><p>判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</p>
</li>
<li><p>遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</p>
</li>
<li><p>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。</p>
</li>
</ol>
<h5 id="put方法源码"><a href="#put方法源码" class="headerlink" title="put方法源码"></a>put方法源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 在此映射中关联指定值与指定键。如果该映射以前包含了一个该键的映射关系，则旧值被替换。</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key 指定值将要关联的键</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> value 指定键将要关联的值</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 与 key关联的旧值；如果 key没有任何映射关系，则返回 null。（返回 null 还可能表示该映射之前将null与 key关联。）</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用于实现 Map.put()和相关的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> hash 键的hash码</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> evict evict=false：表明该hash表处于初始化创建的过程中</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">        <span class="comment">//步骤 1 ：tab为空则创建  </span></div><div class="line">        <span class="comment">//此处分两种情况：1.当table为null时，用默认容量16初始化table数组；2.当table非空时</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">//旧hash表为null或旧hash表长度为0</span></div><div class="line">            n = (tab = resize()).length;  <span class="comment">//初始化hash表的长度（16）</span></div><div class="line">        <span class="comment">//步骤 2</span></div><div class="line">        <span class="comment">//此处又分为两种情况：1.key的hash值对应的那个节点为空；2.key的hash值对应的那个节点不为空</span></div><div class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) <span class="comment">//该key的hash值对应的那个节点为空，即表示还没有元素被散列至此</span></div><div class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>); <span class="comment">//则创建一个新的new Node&lt;&gt;(hash, key, value, next);</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">             <span class="comment">//该key的hash值对应的那个节点不为空，先与链表上的第一个节点p比较</span></div><div class="line">            Node&lt;K,V&gt; e; K k;</div><div class="line">            <span class="comment">// 步骤 3：节点key存在，直接覆盖value  </span></div><div class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                e = p;</div><div class="line">                <span class="comment">// 步骤 4：判断该链为红黑树  </span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">            <span class="comment">// 步骤 5：该链为链表 的情况下进行遍历table</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;  </div><div class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                        <span class="comment">//链表长度大于8转换为红黑树进行处理 TREEIFY_THRESHOLD = 8  </span></div><div class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                            treeifyBin(tab, hash);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// key已经存在的话</span></div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    p = e;  <span class="comment">//向后查找</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//若该key对应的value已经存在，则用新的value取代旧的value</span></div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">                V oldValue = e.value;</div><div class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                    e.value = value;</div><div class="line">                afterNodeAccess(e);</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ++modCount;</div><div class="line">        <span class="comment">// 步骤 6：如果加入该键值对后超过最大阀值，则进行resize操作 ，就扩容  threshold：</span></div><div class="line">        <span class="comment">//单词解释--阈(yu)值,不念阀(fa)值！顺便学下语文咯。  </span></div><div class="line">        <span class="keyword">if</span> (++size &gt; threshold)  </div><div class="line">            resize();</div><div class="line">        afterNodeInsertion(evict);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//将指定映射的所有映射关系复制到此映射中，这些映射关系将替换此映射目前针对指定映射中所有键的所有映射关系。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        putMapEntries(m, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用于帮助实现Map.putAll()方法 和Map构造器，当evict=false时表示构造初始HashMap。</span></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s = m.size(); <span class="comment">//得到指定Map的大小</span></div><div class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></div><div class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</div><div class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</div><div class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);  <span class="comment">//得到按指定Map大小计算出的HashMap所需的容量</span></div><div class="line">                <span class="keyword">if</span> (t &gt; threshold)  <span class="comment">//如果容量大于阈值</span></div><div class="line">                    threshold = tableSizeFor(t);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)  <span class="comment">//指定Map的大小&gt;扩容临界值,扩容  </span></div><div class="line">                resize();</div><div class="line">            <span class="comment">//通过迭代器，将“m”中的元素逐个添加到HashMap中</span></div><div class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</div><div class="line">                K key = e.getKey();</div><div class="line">                V value = e.getValue();</div><div class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="HashMap的扩容机制resize"><a href="#HashMap的扩容机制resize" class="headerlink" title="HashMap的扩容机制resize"></a>HashMap的扩容机制resize</h4><p>在HashMap的四种构造函数中并没有对其成员变量Node<k,v>[] table进行任何初始化的工作，那么HashMap是如何构造一个默认初始容量为16的空表的？该初始化的诱发条件是在向HashMap中添加第一对<key,value>时，通过<code>put(K key, V value) -&gt; putVal(hash(key), key, value, false, true) -&gt; resize()</code>方法。故HashMap中尤其重要的resize()方法主要实现了两个功能：</key,value></k,v></p>
<ol>
<li>在table数组为null时，对其进行初始化，默认容量为16；</li>
<li>当tables数组非空，但需要调整HashMap的容量时，将hash表容量翻倍。</li>
</ol>
<p>jdk1.8中的resize：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//resize()方法作用有两种：1.初始化hash表的容量，为16； 2.将hash表容量翻倍</span></div><div class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">        Node&lt;K,V&gt;[] oldTab = table;  <span class="comment">//旧hash表</span></div><div class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length; <span class="comment">//旧hash表容量</span></div><div class="line">        <span class="keyword">int</span> oldThr = threshold; <span class="comment">//旧hash表阈值</span></div><div class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;  <span class="comment">//新hash表容量与扩容临界值</span></div><div class="line">        <span class="comment">//2.旧hash表非空，则表容量翻倍</span></div><div class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; </div><div class="line">            <span class="comment">//如果当前的hash表长度已经达到最大值，则不在进行调整</span></div><div class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">                threshold = Integer.MAX_VALUE;</div><div class="line">                <span class="keyword">return</span> oldTab;</div><div class="line">            &#125;  <span class="comment">//更新新hash表容量：翻倍</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">                <span class="comment">//更新扩容临界值</span></div><div class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">            newCap = oldThr; </div><div class="line">        <span class="comment">//1. 初始化hash表容量，设为默认值16，并且计算临界值。</span></div><div class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置下次扩容的临界值</span></div><div class="line">        threshold = newThr;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">        <span class="comment">//创建一个初始容量为新hash表长度的newTab数组</span></div><div class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">        table = newTab;</div><div class="line">        <span class="comment">//如果旧hash表非空，则按序将旧hash表中的元素重定向到新hash表</span></div><div class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">                Node&lt;K,V&gt; e;  <span class="comment">//e按序指向oldTab数组中的元素，即每个链表中的头结点</span></div><div class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                    oldTab[j] = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>) <span class="comment">//如果链表只有一个头节点</span></div><div class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                    <span class="comment">// 如果节点是红黑树</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">                    <span class="comment">//对链表进行秩序维护：因为我们使用的是两倍扩容的方法，所以每个桶里面的元素必须要么待在原来的</span></div><div class="line">                    <span class="comment">//索引所对应的位置，要么在新的桶中位置偏移两倍</span></div><div class="line">                    <span class="keyword">else</span> &#123; </div><div class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                        Node&lt;K,V&gt; next;</div><div class="line">                        <span class="keyword">do</span> &#123;</div><div class="line">                            next = e.next;</div><div class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                                    loHead = e;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    loTail.next = e;</div><div class="line">                                loTail = e;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                    hiHead = e;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hiTail.next = e;</div><div class="line">                                hiTail = e;</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                            loTail.next = <span class="keyword">null</span>;</div><div class="line">                            newTab[j] = loHead;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                            hiTail.next = <span class="keyword">null</span>;</div><div class="line">                            newTab[j + oldCap] = hiHead;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> newTab;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>扩容是使用2次幂的扩展(指长度扩为原来2倍)，所以，<br><strong>经过rehash之后，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置</strong>。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/hashMap%201.8%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE1.png" alt="image"></p>
<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/hashMap%201.8%20%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE2.png" alt="image"></p>
<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/jdk1.8%20hashMap%E6%89%A9%E5%AE%B9%E4%BE%8B%E5%9B%BE.png" alt="image"></p>
<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。</p>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>HashMap提供了get(Object key)、containsKey(Object key)、containsValue(Object value)这些查找键值对的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回指定key所映射的value；如果对于该键来说，此映射不包含任何映射关系，则返回 null</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123; <span class="comment">//key的哈希值为数组下标</span></div><div class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">//检查第一个节点</span></div><div class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                <span class="keyword">return</span> first; </div><div class="line">            <span class="comment">//如果第一个节点不对，则向后检查</span></div><div class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                        <span class="keyword">return</span> e;</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果此映射包含对于指定键的映射关系，则返回 true。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果此映射将一个或多个键映射到指定值，则返回 true。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; V v;</div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//外层循环搜索数组</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</div><div class="line">                <span class="comment">//内层循环搜索链表</span></div><div class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</div><div class="line">                        (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="清空与删除"><a href="#清空与删除" class="headerlink" title="清空与删除"></a>清空与删除</h4><p>HashMap提供了remove(Object key)删除键值对、clear()清除所有键值对的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从此映射中移除指定键的映射关系（如果存在）</span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</div><div class="line">            <span class="keyword">null</span> : e.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用于实现 Map.remove()方法和其他相关的方法</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> hash 键的hash值</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to match if matchValue, else ignored</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> matchValue if true only remove if value is equal</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> movable if false do not move other nodes while removing</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the node, or null if none</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></div><div class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</div><div class="line">        <span class="comment">//table数组非空，键的hash值所指向的数组中的元素非空</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;  <span class="comment">//node指向最终的结果结点，e为链表中的遍历指针</span></div><div class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;   <span class="comment">//检查第一个节点，如果匹配成功</span></div><div class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                node = p;</div><div class="line">            <span class="comment">//如果第一个节点匹配不成功，则向后遍历链表查找</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                            ((k = e.key) == key ||</div><div class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                            node = e;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        p = e;</div><div class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</div><div class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</div><div class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)  <span class="comment">//删除node结点</span></div><div class="line">                    tab[index] = node.next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    p.next = node.next;</div><div class="line">                ++modCount;</div><div class="line">                --size;</div><div class="line">                afterNodeRemoval(node);</div><div class="line">                <span class="keyword">return</span> node;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//从此映射中移除所有映射关系</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</div><div class="line">            size = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</div><div class="line">                tab[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>Java 8 中HashMap是数组+链表+红黑树；</li>
<li>哈希桶数组table的长度length大小必须为2的n次方，也就是我想要创建一个长度为19的HashMap，那么它需要创建的大小为32；HashMap 的 bucket 数组大小一定是2的幂，如果 new 的时候指定了容量且不是2的幂，实际容量会是最接近(大于)指定容量的2的幂，比如 new HashMap&lt;&gt;(19)，比19大且最接近的2的幂是32，实际容量就是32。</li>
<li>没有特殊要求，负载因子使用默认值0.75，并且它可以大于1；加载因子是表示Hsah表中元素的填满的程度。若加载因子越大，填满的元素越多，好处是，空间利用率高了，但冲突的机会加大了。反之，加载因子越小，填满的元素越少，好处是，冲突的机会减小了，但空间浪费多了。冲突的机会越大，则查找的成本越高；反之,查找的成本越小，因而,查找时间就越小.</li>
<li>HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap，HashTable的并发性不如ConcurrentHashMap；</li>
<li>扩容特别消耗性能，初始化的时候，尽量控制好HashMap的大小，避免频繁扩容；</li>
<li>HashMap 在 new 后并不会立即分配哈希桶数组，而是第一次 put 时初始化，类似 ArrayList 在第一次 add 时分配空间。</li>
<li>HashMap 在 put 的元素数量大于 <code>Capacity * LoadFactor</code>（默认<code>16 * 0.75</code>） 之后会进行扩容。</li>
<li>Java 8在哈希碰撞的链表长度达到TREEIFY_THRESHOLD（默认8)后，会把该链表转变成树结构，提高了性能。</li>
<li>Java 8在 resize() 的时候，通过巧妙的设计，减少了 rehash 的性能消耗。</li>
</ol>
<p><strong>参考文章</strong></p>
<p><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/qq_27093465/article/details/52207135">Java 8系列之重新认识HashMap</a><br><a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/CherishFX/p/4739712.html">jdk1.8.0_45源码解读——HashMap的实现</a><br><a rel="external nofollow" target="_blank" href="https://www.cnblogs.com/rogerluo1986/p/5851300.html">HashMap数据结构</a><br><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/u011411283/article/details/48024999">HashMap的性能提升从之链表到二叉树</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Hash碰撞冲突方法总结]]></title>
      <url>/hash-crash.html</url>
      <content type="html"><![CDATA[<h3 id="Hash碰撞冲突"><a href="#Hash碰撞冲突" class="headerlink" title="Hash碰撞冲突"></a>Hash碰撞冲突</h3><p>我们知道，对象Hash的前提是实现equals()和hashCode()两个方法，那么HashCode()的作用就是保证对象返回唯一hash值，但当两个对象计算值一样时，这就发生了碰撞冲突。如下将介绍如何处理冲突，当然其前提是一致性hash。</p>
<a id="more"></a>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><h4 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h4><p>开放地执法有一个公式:<code>Hi=(H(key)+di) MOD m i=1,2,…,k(k&lt;=m-1)</code><br>其中，m为哈希表的表长。di 是产生冲突的时候的增量序列。如果di值可能为1,2,3,…m-1，称线性探测再散列。<br>如果di取1，则每次冲突之后，向后移动1个位置.如果di取值可能为1,-1,2,-2,4,-4,9,-9,16,-16,…k<em>k,-k</em>k(k&lt;=m/2)，称二次探测再散列。<br>如果di取值可能为伪随机数列。称伪随机探测再散列。</p>
<h4 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h4><p>当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。<br>比如上面第一次按照姓首字母进行哈希，如果产生冲突可以按照姓字母首字母第二位进行哈希，再冲突，第三位，直到不冲突为止</p>
<h4 id="链地址法（拉链法）"><a href="#链地址法（拉链法）" class="headerlink" title="链地址法（拉链法）"></a>链地址法（拉链法）</h4><p>将所有关键字为同义词的记录存储在同一<code>线性链表</code>中。如下：</p>
<p><img src="http://img.blog.csdn.net/20160918154444663?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image"></p>
<h4 id="建立一个公共溢出区"><a href="#建立一个公共溢出区" class="headerlink" title="建立一个公共溢出区"></a>建立一个公共溢出区</h4><p>假设哈希函数的值域为<code>[0,m-1]</code>,则设向量<code>HashTable[0..m-1]</code>为基本表，另外设立存储空间向量<code>OverTable[0..v]</code>用以存储发生冲突的记录。</p>
<h4 id="拉链法的优缺点"><a href="#拉链法的优缺点" class="headerlink" title="拉链法的优缺点"></a>拉链法的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短；</li>
<li>由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况；</li>
<li>开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间；</li>
<li>在用拉链法构造的散列表中，删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结 点的空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放地址法中，空地址单元(即开放地址)都是查找失败的条件。因此在 用开放地址法处理冲突的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点。</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度。</p>
<p><strong>文章转载 <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/zeb_perfect/article/details/52574915">解决Hash碰撞冲突方法总结</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 哈希算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解一致性哈希算法(consistent hashing)]]></title>
      <url>/consistent-hashing.html</url>
      <content type="html"><![CDATA[<p>一致性哈希算法在1997年由麻省理工学院提出的一种分布式哈希（DHT）实现算法，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简 单哈希算法带来的问题，使得分布式哈希（DHT）可以在P2P环境中真正得到应用。<br>一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义：  </p>
<a id="more"></a>
<ol>
<li><code>平衡性(Balance)</code>：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</li>
<li><code>单调性(Monotonicity)</code>：单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。 </li>
<li><code>分散性(Spread)</code>：在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。 </li>
<li><code>负载(Load)</code>：负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同 的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。<h3 id="分布式集群中，对机器的添加删除"><a href="#分布式集群中，对机器的添加删除" class="headerlink" title="分布式集群中，对机器的添加删除"></a>分布式集群中，对机器的添加删除</h3>在分布式集群中，对机器的添加删除，或者机器故障后自动脱离集群这些操作是分布式集群管理最基本的功能。如果采用常用的hash(object)%N算法，那么在有机器添加或者删除后，很多原有的数据就无法找到了，这样严重的违反了单调性原则。接下来主要讲解一下一致性哈希算法是如何设计的：</li>
</ol>
<h4 id="环形Hash空间"><a href="#环形Hash空间" class="headerlink" title="环形Hash空间"></a>环形Hash空间</h4><p>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个桶的空间中，即0~(2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。如下图：</p>
<p><img src="http://img.blog.csdn.net/20140411000507734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<h4 id="把数据通过一定的hash算法处理后映射到环上"><a href="#把数据通过一定的hash算法处理后映射到环上" class="headerlink" title="把数据通过一定的hash算法处理后映射到环上"></a>把数据通过一定的hash算法处理后映射到环上</h4><p>现在我们将object1、object2、object3、object4四个对象通过特定的Hash函数计算出对应的key值，然后散列到Hash环上。如下图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Hash(object1) = key1；</div><div class="line">Hash(object2) = key2；</div><div class="line">Hash(object3) = key3；</div><div class="line">Hash(object4) = key4；</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20140411000620656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<h4 id="将机器通过hash算法映射到环上"><a href="#将机器通过hash算法映射到环上" class="headerlink" title="将机器通过hash算法映射到环上"></a>将机器通过hash算法映射到环上</h4><p>在采用一致性哈希算法的分布式集群中将新的机器加入，其原理是通过使用与对象存储一样的Hash算法将机器也映射到环中（一般情况下对机器的hash计算是采用机器的IP或者机器唯一的别名作为输入值），然后以顺时针的方向计算，将所有对象存储到离自己最近的机器中。<br>假设现在有NODE1，NODE2，NODE3三台机器，通过Hash算法得到对应的KEY值，映射到环中，其示意图如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hash(NODE1) = KEY1;</div><div class="line">Hash(NODE2) = KEY2;</div><div class="line">Hash(NODE3) = KEY3;</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20140411000853609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<p>通过上图可以看出对象与机器处于同一哈希空间中，这样按顺时针转动object1存储到了NODE1中，object3存储到了NODE2中，object2、object4存储到了NODE3中。在这样的部署环境中，hash环是不会变更的，因此，通过算出对象的hash值就能快速的定位到对应的机器中，这样就能找到对象真正的存储位置了。</p>
<h4 id="机器的删除与添加"><a href="#机器的删除与添加" class="headerlink" title="机器的删除与添加"></a>机器的删除与添加</h4><p>普通hash求余算法最为不妥的地方就是在有机器的添加或者删除之后会照成大量的对象存储位置失效，这样就大大的不满足单调性了。下面来分析一下一致性哈希算法是如何处理的。</p>
<h5 id="节点（机器）的删除"><a href="#节点（机器）的删除" class="headerlink" title="节点（机器）的删除"></a>节点（机器）的删除</h5><p>以上面的分布为例，如果NODE2出现故障被删除了，那么按照顺时针迁移的方法，object3将会被迁移到NODE3中，这样仅仅是object3的映射位置发生了变化，其它的对象没有任何的改动。如下图：</p>
<p><img src="http://img.blog.csdn.net/20140411001033656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<h5 id="节点（机器）的添加"><a href="#节点（机器）的添加" class="headerlink" title="节点（机器）的添加"></a>节点（机器）的添加</h5><p> 如果往集群中添加一个新的节点NODE4，通过对应的哈希算法得到KEY4，并映射到环中，如下图：</p>
<p> <img src="http://img.blog.csdn.net/20140411001211062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<p>  通过按顺时针迁移的规则，那么object2被迁移到了NODE4中，其它对象还保持这原有的存储位置。通过对节点的添加和删除的分析，一致性哈希算法在保持了单调性的同时，还是数据的迁移达到了最小，这样的算法对分布式集群来说是非常合适的，避免了大量数据迁移，减小了服务器的的压力。</p>
<h4 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h4><p>根据上面的图解分析，一致性哈希算法满足了单调性和负载均衡的特性以及一般hash算法的分散性，但这还并不能当做其被广泛应用的原由，因为还缺少了平衡性。下面将分析一致性哈希算法是如何满足平衡性的。hash算法是不保证平衡的，如上面只部署了NODE1和NODE3的情况（NODE2被删除的图），object1存储到了NODE1中，而object2、object3、object4都存储到了NODE3中，这样就照成了非常不平衡的状态。在一致性哈希算法中，为了尽可能的满足平衡性，其引入了虚拟节点。</p>
<blockquote>
<p>——“虚拟节点”（ virtual node ）是实际节点（机器）在 hash 空间的复制品（ replica ），一实际个节点（机器）对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以hash值排列。</p>
</blockquote>
<p>以上面只部署了NODE1和NODE3的情况（NODE2被删除的图）为例，之前的对象在机器上的分布很不均衡，现在我们以2个副本（复制个数）为例，这样整个hash环中就存在了4个虚拟节点，最后对象映射的关系图如下：</p>
<p><img src="http://img.blog.csdn.net/20140411001433375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<p>根据上图可知对象的映射关系：<code>object1-&gt;NODE1-1</code>，<code>object2-&gt;NODE1-2</code>，<code>object3-&gt;NODE3-2</code>，<code>object4-&gt;NODE3-1</code>。通过虚拟节点的引入，对象的分布就比较均衡了。那么在实际操作中，正真的对象查询是如何工作的呢？对象从hash到虚拟节点到实际节点的转换如下图：</p>
<p><img src="http://img.blog.csdn.net/20140411001540656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<p><code>虚拟节点</code>的hash计算可以采用对应节点的IP地址加数字后缀的方式。例如假设NODE1的IP地址为192.168.1.100。引入“虚拟节点”前，计算 cache A 的 hash 值：<br><code>Hash(“192.168.1.100”)</code>;<br>引入“虚拟节点”后，计算“虚拟节”点NODE1-1和NODE1-2的hash值：<br><code>Hash(“192.168.1.100#1”); // NODE1-1</code><br><code>Hash(“192.168.1.100#2”); // NODE1-2</code></p>
<p><strong>文章转载 <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/cywosp/article/details/23397179">每天进步一点点——五分钟理解一致性哈希算法(consistent hashing)</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Optional类的分析与使用]]></title>
      <url>/java-optional.html</url>
      <content type="html"><![CDATA[<p><code>Optional</code> 类 是<code>jdk 1.8</code>后新添加的特性，阿里巴巴的代码规范也明确说明了使用 Optional 来防止NPE。</p>
<blockquote>
<p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。<br>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。<br>Optional 类的引入很好的解决空指针异常。</p>
</blockquote>
<a id="more"></a>
<p>它拥有的方法：<img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171112172632.png" alt="image"></p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @since 1.8</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Common instance for &#123;<span class="doctag">@code</span> empty()&#125;.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Optional&lt;?&gt; EMPTY = <span class="keyword">new</span> Optional&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * If non-null, the value; if null, indicates no value is present</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>value 属性就是存储数据的地方。如果为null，表示没有值的存在，取值的时候如果没有默认值，会抛出空指针。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>它拥有两个构造方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Constructs an empty instance.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@implNote</span> Generally only one empty instance, &#123;<span class="doctag">@link</span> Optional#EMPTY&#125;,</span></div><div class="line"><span class="comment"> * should exist per VM.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Constructs an instance with the value present.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> value the non-null value to be present</span></div><div class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is null</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = Objects.requireNonNull(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第一个构造一个空的Optional；</li>
<li>第二个构造一个值为value的Optional，值为null会抛出NPE；</li>
</ul>
<h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><blockquote>
<p>为非null的值创建一个Optional。</p>
</blockquote>
<p>of方法通过工厂方法创建Optional类。需要注意的是，创建对象时传入的参数不能为null。如果传入参数为null，则抛出NullPointerException。<br>源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">of</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Optional&lt;&gt;(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出它最后调用的是第二个有参的构造函数，所以它传入的参数也为null会抛出空指针。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Optional&lt;String&gt; spring = Optional.of(<span class="string">"SPRING"</span>);</div><div class="line">Optional&lt;String&gt; emptyStr = Optional.of(<span class="string">""</span>);</div><div class="line">Optional&lt;String&gt; nullValue = Optional.of(<span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p>最后个创建Optional实例会抛出空指针异常。</p>
<h4 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Optional&#125; describing the specified value, if non-null,</span></div><div class="line"><span class="comment"> * otherwise returns an empty &#123;<span class="doctag">@code</span> Optional&#125;.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the value</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> value the possibly-null value to describe</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Optional&#125; with a present value if the specified value</span></div><div class="line"><span class="comment"> * is non-null, otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。<br>相比较of 方法，能够接受 null 参数。</p>
<h4 id="isPresent"><a href="#isPresent" class="headerlink" title="isPresent"></a>isPresent</h4><p>判断值是否存在。值不为null，返回true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value != <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>取出存在Optional 中的值，为Null 抛出<code>NoSuchElementException</code>异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"No value present"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="ifPresent"><a href="#ifPresent" class="headerlink" title="ifPresent"></a>ifPresent</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * If a value is present, invoke the specified consumer with the value,</span></div><div class="line"><span class="comment"> * otherwise do nothing.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> consumer block to be executed if a value is present</span></div><div class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is present and &#123;<span class="doctag">@code</span> consumer&#125; is</span></div><div class="line"><span class="comment"> * null</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</div><div class="line">        consumer.accept(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对传入的值使用<code>Consumer</code>接口的accept方法进行处理，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Performs this operation on the given argument.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> t the input argument</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</div></pre></td></tr></table></figure></p>
<p>实际上就是可以使用函数式编程了，使用lambda表达式方法了，前提是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.ifPresent(a -&gt; System.out.println(a.indexOf(&quot;I&quot;)));</div></pre></td></tr></table></figure></p>
<p>结果为 <code>3</code>。</p>
<h4 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h4><p>如果有值则将其返回，否则返回指定的其它值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.printf(<span class="string">"有值的Optional: %s，没值的Optional：%s%n"</span>,</div><div class="line">                spring.orElse(<span class="string">"summer"</span>), nullValue.orElse(<span class="string">"summer"</span>));</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">有值的Optional: SPRING，没值的Optional：summer</div></pre></td></tr></table></figure></p>
<h4 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h4><p>orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值，由于参数是接口形式，直接使用lambda表达式，更方便。<br>能接收函数式返回处理的数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">System.out.printf(<span class="string">"有值的Optional: %s，没值的Optional：%s%n"</span>,</div><div class="line">                spring.orElseGet(() -&gt; <span class="string">"summer"</span>),</div><div class="line">                nullValue.orElseGet(() -&gt; <span class="string">"summer"</span>));</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">有值的Optional: SPRING，没值的Optional：summer</div></pre></td></tr></table></figure></p>
<h4 id="orElseThrow"><a href="#orElseThrow" class="headerlink" title="orElseThrow"></a>orElseThrow</h4><p>如果有值则将其返回，否则抛出supplier接口创建的异常。<br>在上面的 orElseGet 方法中，传入的是Supplier接口的实现，在orElseThrow中传入一个Throwable ，如果值不存在来抛出传入的指定类型异常，源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">        <span class="comment">//orElseThrow</span></div><div class="line">        System.out.printf(<span class="string">"orElseThrow有值的Optional: %s，没值的Optional：%s%n"</span>,</div><div class="line">                spring.orElseThrow(OptionalThrowable::<span class="keyword">new</span>),</div><div class="line">                nullValue.orElseThrow(OptionalThrowable::<span class="keyword">new</span>));</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 自定义的Optional异常类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptionalThrowable</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//return super.getMessage();</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"这个Optional 是空值"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果符合预期错误抛出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">有值的Optional: SPRING，没值的Optional：summer</div><div class="line">Exception in thread &quot;main&quot; com.wuwii.utils.OptionalThrowable: 这个Optional 是空值</div><div class="line">	at java.util.Optional.orElseThrow(Optional.java:290)</div><div class="line">	at com.wuwii.utils.OptionalTest.main(OptionalTest.java:28)</div></pre></td></tr></table></figure></p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote>
<p>如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</p>
</blockquote>
<p>map就是stream中的方法一样的，是用来操作的，用来对Optional实例的值执行一系列操作，所以我们可以灵活的使用Function包的方法和lamdba表达式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//map</span></div><div class="line">        Optional&lt;String&gt; castedOptional = spring.map(String::toLowerCase);</div><div class="line">        System.out.printf(<span class="string">"转换过后的值：%s%n"</span>, castedOptional.orElseGet(<span class="keyword">null</span>));</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">转换过后的值：spring</div></pre></td></tr></table></figure></p>
<p>可以看出转换成小写的了。</p>
<h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><blockquote>
<p>如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//flatMap</span></div><div class="line">        Optional&lt;String&gt; upperOptional = castedOptional.flatMap(a -&gt; Optional.of(a.toUpperCase()));</div><div class="line">        System.out.printf(<span class="string">"将上面小写的castedOptional 转换成大写：%s%n"</span>, upperOptional.orElseGet(<span class="keyword">null</span>));</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将上面小写的castedOptional 转换成大写：SPRING</div></pre></td></tr></table></figure></p>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote>
<p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</p>
</blockquote>
<p>过滤，对于filter函数我们应该传入实现了Predicate接口的lambda表达式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/filter</div><div class="line">        <span class="comment">//过滤掉长度不大于10的，SPRING长度小于10，故此被过滤了</span></div><div class="line">        Optional&lt;String&gt; filterOptional = upperOptional.filter(a -&gt; a.length() &gt; <span class="number">10</span>);</div><div class="line">        System.out.printf(<span class="string">"过滤掉长度不大于10的 ：%s%n"</span>, filterOptional.orElse(<span class="string">"Default value"</span>));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">过滤掉长度不大于10的结果 ：Default value</div></pre></td></tr></table></figure></p>
<h3 id="学习的所有代码"><a href="#学习的所有代码" class="headerlink" title="学习的所有代码"></a>学习的所有代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Optional;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 学习Optional</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>: Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> : 2017/11/12 20:40</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//of</span></div><div class="line">        Optional&lt;String&gt; spring = Optional.of(<span class="string">"SPRING"</span>);</div><div class="line">        Optional&lt;String&gt; emptyStr = Optional.of(<span class="string">""</span>);</div><div class="line">		<span class="comment">//会抛出异常NPE</span></div><div class="line">        <span class="comment">//Optional&lt;String&gt; nullValue1 = Optional.of(null); </span></div><div class="line">		<span class="comment">//不会抛异常，做了判断</span></div><div class="line">        Optional&lt;String&gt; nullValue = Optional.ofNullable(<span class="keyword">null</span>);</div><div class="line">		</div><div class="line">        <span class="comment">//ifPresent</span></div><div class="line">        spring.ifPresent(a -&gt; System.out.println(a.indexOf(<span class="string">"I"</span>)));</div><div class="line">		</div><div class="line">        <span class="comment">//orElse</span></div><div class="line">        System.out.printf(<span class="string">"orElse有值的Optional: %s，没值的Optional：%s%n"</span>,</div><div class="line">                spring.orElse(<span class="string">"summer"</span>), nullValue.orElse(<span class="string">"summer"</span>));</div><div class="line">				</div><div class="line">        <span class="comment">//orElseGet</span></div><div class="line">        System.out.printf(<span class="string">"orElseGet有值的Optional: %s，没值的Optional：%s%n"</span>,</div><div class="line">                spring.orElseGet(() -&gt; <span class="string">"summer"</span>),</div><div class="line">                nullValue.orElseGet(() -&gt; <span class="string">"summer"</span>));</div><div class="line">				</div><div class="line">        <span class="comment">//orElseThrow</span></div><div class="line">		<span class="comment">// 这段代码会抛出异常，为了下面能运行，先注释。</span></div><div class="line">        <span class="comment">/*try &#123;</span></div><div class="line"><span class="comment">            System.out.printf("orElseThrow有值的Optional: %s，没值的Optional：%s%n",</span></div><div class="line"><span class="comment">                    spring.orElseThrow(OptionalThrowable::new),</span></div><div class="line"><span class="comment">                    nullValue.orElseThrow(OptionalThrowable::new));</span></div><div class="line"><span class="comment">        &#125; catch (OptionalThrowable optionalThrowable) &#123;</span></div><div class="line"><span class="comment">            optionalThrowable.printStackTrace();</span></div><div class="line"><span class="comment">        &#125;*/</span></div><div class="line"></div><div class="line">        <span class="comment">//map</span></div><div class="line">        Optional&lt;String&gt; castedOptional = spring.map(String::toLowerCase);</div><div class="line">        System.out.printf(<span class="string">"转换成小写的值：%s%n"</span>, castedOptional.orElseGet(<span class="keyword">null</span>));</div><div class="line"></div><div class="line">        <span class="comment">//flatMap</span></div><div class="line">        Optional&lt;String&gt; upperOptional = castedOptional.flatMap(a -&gt; Optional.of(a.toUpperCase()));</div><div class="line">        System.out.printf(<span class="string">"将上面小写的castedOptional 转换成大写：%s%n"</span>, upperOptional.orElseGet(<span class="keyword">null</span>));</div><div class="line"></div><div class="line">        <span class="comment">//filter</span></div><div class="line">        <span class="comment">//过滤掉长度不大于10的，SPRING长度小于10，故此被过滤了</span></div><div class="line">        Optional&lt;String&gt; filterOptional = upperOptional.filter(a -&gt; a.length() &gt; <span class="number">10</span>);</div><div class="line">        System.out.printf(<span class="string">"过滤掉长度不大于10的结果 ：%s%n"</span>, filterOptional.orElse(<span class="string">"Default value"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 自定义的Optional异常类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptionalThrowable</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//return super.getMessage();</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"这个Optional 是空值"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[歌词-《清白之年》]]></title>
      <url>/innocence-year.html</url>
      <content type="html"><![CDATA[<p>热爱美丽又遗憾的世界，愿你出走半生，归来仍是少年。<br>一直有人，再让我幻想。。</p>
<p><img src="https://i.loli.net/2017/11/12/5a07fbf87973b.jpg" alt="img"></p>
<a id="more"></a>
<blockquote class="blockquote-center"><h3 id="清白之年"><a href="#清白之年" class="headerlink" title="清白之年"></a>清白之年</h3><p>词 : 朴树 </p>
<hr>
<p>故事开始以前 </p>
<p>最初的那些春天<br>阳光洒在杨树上 风吹来 闪银光 </p>
<p>街道平静而温暖<br>钟走得好慢 </p>
<p>那是我还不识人生之味的年代 </p>
<p>我情窦还不开 </p>
<p>你的衬衣如雪 </p>
<p>盼着杨树叶落下 眼睛不眨 </p>
<p>心里像有一些话<br>我们先不讲 </p>
<p>等待着那将要盛装出场的未来 </p>
<p>人随风飘荡 </p>
<p>天各自一方 </p>
<p>在风尘中遗忘的清白脸庞 </p>
<p>此生多勉强 </p>
<p>此身越重洋 </p>
<p>轻描时光漫长低唱语焉不详 </p>
<p>数不清的流年 </p>
<p>似是而非的脸<br>把你的故事对我讲<br>就让我笑出泪光<br>是不是生活太艰难<br>还是活色生香 </p>
<p>我们都遍体鳞伤 </p>
<p>也慢慢坏了心肠 </p>
<p>你得到你想要的吗<br>换来的是铁石心肠 </p>
<p>可曾还有什么人<br>再让你幻想 </p>
<p>大风吹来了<br>我们随风飘荡 </p>
<p>在风尘中遗忘的清白脸庞 </p>
<p>此生多寒凉 </p>
<p>此身越重洋 </p>
<p>轻描时光漫长低唱语焉不详 </p>
<p>大风吹来了<br>我们随风飘荡 </p>
<p>在风尘中熄灭的清澈目光 </p>
<p>我想回头望 </p>
<p>把故事从头讲<br>时光迟暮不返人生已不再来</p>
</blockquote>]]></content>
      
        <categories>
            
            <category> 那些很美的句子 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌词 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171111]]></title>
      <url>/20171111.html</url>
      <content type="html"><![CDATA[<p>想到凌晨，双十一，还是忍不住买买买，很舒心，最好的就是这个时候能给父母多买点东西，平时说缺什么他们都不让，这个时候多买点，还买了一个电饭煲，还不错。</p>
<p>看到5系列博朗剃须刀，好想买呀，对于我这种毛发密集型的，每天都要剃须刀；说说而已，但是还是好贵，以后再说。</p>
<p>半夜久久不能入睡，我想我是刚刚聊天失眠了，等消息，还不如看个电影，又翻出以前很爱看的《猫的感恩》，深夜3点才能睡着。。</p>
<p>早上一起来快9点啦，，经理还发消息问什么时候才能过来，尬。当然迟到了，他们已经在开会了，。</p>
<p>一上午就没心思听进去了，犹豫了半天才评论了一个说说，我这个人就是这样的，一点东西也算是个惊喜吧。</p>
<p>下午一个人去磨山骑车玩玩，东湖的风景还是很好的。为什么出去还这么累啊，我看是今天黄道吉日不好吧，双十一，单身狗不宜出门。</p>
<p>晚上回来随便写点，洗洗睡吧，生活大抵就是这么无聊咯，我的青春，呼喊了也没回应，只能自己努力创造了。<br>加油。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[成长]]></title>
      <url>/grow-up.html</url>
      <content type="html"><![CDATA[<p>多想多说话，也只有我知道，是因为我害怕，我怕别人听出来，过得不好，我怕问我过得怎么样的时候，可能会你难过，我怕撑不住告诉了别人。</p>
<p>我知道，一个男人应该更坚强一点，所以我从来不跟别人说那些丧气，而又愤怒的话，从来不跟别人说我过得怎么样，谁问我，都能轻描淡写，一笔带过。挺好的，真的什么都挺好的。</p>
<p>现在虽然离梦想还有一大截，薪水也很普通，但也还能存下一笔钱，感觉有了能撑起一个家的责任和感觉了，从心底上就有了一份骄傲。</p>
<p>室友的关心，也会让人心里暖暖的，也还有人能说话，生活有时候不如意，但是为之奋斗的梦想还没有扔下，还知道为什么要这么做，想要的是什么，虽然现在有时候真的很难熬，但是我知道的，总会好的，不会太远；曾经遇到的事，吃过的苦，总有一天，会赶在父母老去之前，给他们更好的生活；总有一天也会遇到一个人，那一天我真的有能力能给她安稳，照顾她一辈子了。</p>
<p>有时候憧憬下未来，想想现在，其实也没什么大不了的，人生充满荆棘，等待去跨过，才能有理想，才能成长；其实也没什么好惧怕的，我还有梦，有家，有爱的能力就够了；其实也不难熬，只是有些事情只能自己消化，不再赶和任何人一起罢了。</p>
<p>其实真的没什么大不了的，人总是要学会长大的，一个人撑起一个家，一个人抵过千军万马。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JPA多表查询的解决办法]]></title>
      <url>/jpa-query-muti.html</url>
      <content type="html"><![CDATA[<p>实际业务中，多表关联查询应用实例很多，怎么使用JPA进行多表查询，可以选择不同的方法优化。<br>记下在JPA中多表查询的有效使用方法。<br><a id="more"></a></p>
<h3 id="使用关系映射"><a href="#使用关系映射" class="headerlink" title="使用关系映射"></a>使用关系映射</h3><p>就是使用一对多，多对一，一对一这种关系进行关联映射，</p>
<p>一个一对多迭代Tree的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 根据组织取得实时轨迹Tree的业务类</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/9 15:21&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"\"DEV_ORGANIZE\""</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganizeMappedEntity</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</div><div class="line">    <span class="comment">// 名称，为了前面取出数据的key一致性，换个名称。</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"\"NAME\""</span>)</div><div class="line">    <span class="keyword">private</span> String no;</div><div class="line">    <span class="comment">// 父组织外键</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"\"PARENTID\""</span>)</div><div class="line">    <span class="keyword">private</span> String parentid;</div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(targetEntity = OrganizeMappedEntity.class,</div><div class="line">            mappedBy = <span class="string">"parentid"</span>, cascade = &#123;CascadeType.ALL&#125;, fetch = FetchType.EAGER)</div><div class="line">    <span class="keyword">private</span> List children;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> no;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String no)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.no = no;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParentid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> parentid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentid</span><span class="params">(String parentid)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parentid = parentid;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> children;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List children)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.children = children;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>平常使用这种方法最多了，因为方便，少写代码，但是平时不一定需要查询所有，而且在数据比较多的情况下，开销比较大，就得使用下面第二种方法。</p>
<h3 id="使用JPQL多表查询"><a href="#使用JPQL多表查询" class="headerlink" title="使用JPQL多表查询"></a>使用JPQL多表查询</h3><p><code>JPQL</code>全称<code>Java Presistence Query Language</code>，Java持久化查询语言。和Hibernate的HQL语句差不多。</p>
<p>现在测试下，从A表和B表各取出一个字段吧。<br>创建一个业务实体DTO：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//学习学习</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">        <span class="comment">//A表字段No</span></div><div class="line">	<span class="keyword">private</span> String no;</div><div class="line">	<span class="comment">//B表字段tel</span></div><div class="line">	<span class="keyword">private</span> String tel;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Long num;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">TestEntity</span><span class="params">(Long num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getNum</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> num;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Long num)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.num = num;</div><div class="line">	&#125;</div><div class="line">    <span class="comment">//通过构造函数注入值</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestEntity</span> <span class="params">(String no, String tel)</span> </span>&#123;</div><div class="line">    	<span class="keyword">this</span>.no = no;</div><div class="line">    	<span class="keyword">this</span>.tel = tel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSerialversionuid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> serialVersionUID;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> no;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String no)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.no = no;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> tel;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.tel = tel;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//重写写，</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"TestEntity&#123;"</span> +</div><div class="line">				<span class="string">"no='"</span> + no + <span class="string">'\''</span> +</div><div class="line">				<span class="string">", tel='"</span> + tel + <span class="string">'\''</span> +</div><div class="line">				<span class="string">", num="</span> + num +</div><div class="line">				<span class="string">'&#125;'</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样可以使用业务实体类的构造函数就行绑定数据了。</p>
<p>Dao层查询数据库的JPQL语句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> com.devframe.database.BasePagingAndSortingRepository;</div><div class="line"><span class="keyword">import</span> com.devframe.entity.DeviceEntity;</div><div class="line"><span class="keyword">import</span> com.devframe.entity.TestEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeviceDao</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">DeviceEntity</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 只为学习。。。</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;TestEntity&gt;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="meta">@Query</span>(value = <span class="string">"SELECT new com.devframe.entity.TestEntity(a.no, b.tel) FROM com.devframe.entity.DeviceEntity a, com.devframe.entity.OrganizeEntity b WHERE a.orgid = b.id"</span>)</div><div class="line">	<span class="function">List&lt;TestEntity&gt; <span class="title">gettest</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用join查询出两个表相关联的所有列。</p>
<p>单元测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> com.devframe.dao.DeviceDao;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/9 17:40&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/applicationContext-base.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceDaoTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> DeviceDao dao;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGettest</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(dao.gettest());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>数据有点多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TestEntity&#123;no=&apos;N57008&apos;, tel=&apos;null&apos;, num=null&#125;, TestEntity&#123;no=&apos;N33505&apos;, tel=&apos;null&apos;, num=null&#125;, TestEntity&#123;no=&apos;N88001&apos;, tel=&apos;null&apos;, num=null&#125;,省略...</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> jpa </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171107]]></title>
      <url>/20171107.html</url>
      <content type="html"><![CDATA[<p>今天乱的一匹，也没怎么学习，日记也没写，故事也没写。</p>
<p>什么都别想，<br>管这个世界明天会怎样，<br>卸下今天的一切，<br>在艰难的时光里，<br>将人生变得美好而辽阔。</p>
<hr>
<p>最近任务有点杂乱，效率低下。回想起最近，学的东西太杂乱了</p>
<p>回想起最近这么几个月，学的东西太杂乱了，分布式存储，分布式缓存，hadoop，python等等，没一个弄清楚明白的，剩下的时间里，先把python放下，把Java中这么几个重要的东西仔细研究一下，只要掌握一门，以后工作就好了。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年，仅剩60天不到了]]></title>
      <url>/2017left.html</url>
      <content type="html"><![CDATA[<p>猛然发现，2017，转眼就要过完了，我这个人从来不喜欢记什么节日，自己的生日有时候都要老爸老妈操心的，我也不太喜欢倒计时，最特别的就是高考倒计时吧。当人从出生的那一刻起，就过上了讨厌的倒计时的生活。</p>
<a id="more"></a>
<p>感觉今年过得很没意思，怎么说了。<br>年初，就去实习公司上班，不为别的只为那个开门红，红包。开始工作的时候，大都是热情满满，感觉怎么样怎么样的好，可是期望满满，后来失望就慢慢多了，感觉工作并没有那么顺心，领导开始只注意项目了，不关心员工死活了，渐渐的我就是失去的热情。有点颓废。</p>
<p>也是刚好，项目的事情没那么多，可以好好写下论文了，大概三月中旬我就开始着手自己毕业设计，直接想了一个以前准备做的OA系统，其实这个还是挺难的，因为最后做得有点失败，后面说。整整四月份都在做这个项目，中间遇到过很多问题，大多数都解决了（有的敷衍了），也有一万行代码了吧（虽然质量很差），没仔细统计过，就是公司上班没什么事，一天到晚写毕业设计一个月，直到五月初才开始写论文。然后就是毕业设计熬过去。然后就是答辩了，so easy，毕竟全篇都是自己完成的，只不过我是小组最后一个答辩，弄完都快晚上八点了。</p>
<p>六月份到公司重新报道吧，没什么可说的，开始接到一个很坑的项目，直接导致我想离开的原因。</p>
<p>七月份就是做那个苦逼的项目，室友封闭一个月，我一个人生活了一个多月，感觉习惯了孤独。</p>
<p>还有一件事情就是，也是我想直接留在武汉的原因吧，说多都是套路，自私点，好点发展。</p>
<p>八月份中旬，经经理推荐，来到了新的公司，虽然是做农业的，不是真正的互联网公司，但是在武汉待遇还很好，经理待人也不错，就是很少加班，但是IT行业不学习的话，感觉人就要倒退了，所以呀，每天至少得在公司蹭一个小时的网，来学习学习。部门的员工很和谐，感觉很轻松，让我工作动力十足，相信可以成长很快的。</p>
<p>在新公司已经两个月了，学习了不少，这个博客笔记也是进入到这个公司才开始正式写的，希望能够陪伴着我进步。</p>
<p>最后的梦想就是，当然是快点成为技术大牛，拿高薪。<br>工作方向的话，主Java开发，物联网，互联网，再就是大数据，补算法，python，人工智能。<br>说起以后工作的城市，人生路还长，现在才刚开始，自己努力了，总有个地方能给你安稳的地方。<br>说起工作城市，还不是面向工资，主要是武汉工资确实太低了，但真的很喜欢武汉的这个城市。不知道明年继续在武汉，有机会税前过万吗？</p>
<p>说起以后的希望实现财富自由的期望工资，标准是超一线年薪30万起吧，一线20万吧，才算合格。当然是以目前的背景基础看的，程序猿的工资只会越来越高的，要坚持努力工作，学习，加油，希望三年能完成一个阶段吧。</p>
<p>当然最希望能遇到一个对的人，我有好多故事要跟你讲啊，想去好多地方，虽然害怕自己习惯了孤独，只要是对的人，还是等得起，不是不想去喜欢一个人，害怕自己再也付出不了真心，真的是好犹豫啊，人真是病态的厉害。</p>
<p>今年总结这么快就开始写了，其实没什么，好多牢骚，完全扭曲了人生观，就这样，加油，努力，现在每天只好自己对自己说声晚安了，我相信这种状况不会太久，希望不会太远，真的好累。</p>
<p>有点矫情了。。。</p>
<p>晚安！</p>
<h2 id="20171125-感觉还剩一个月的时候，人完成沉静不下来了，哎，一晚上写了一篇博客，写到凌晨最后不知道写的什么。"><a href="#20171125-感觉还剩一个月的时候，人完成沉静不下来了，哎，一晚上写了一篇博客，写到凌晨最后不知道写的什么。" class="headerlink" title="20171125 感觉还剩一个月的时候，人完成沉静不下来了，哎，一晚上写了一篇博客，写到凌晨最后不知道写的什么。"></a>20171125 感觉还剩一个月的时候，人完成沉静不下来了，哎，一晚上写了一篇博客，写到凌晨最后不知道写的什么。</h2><p>(continue:</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[做个温柔的人]]></title>
      <url>/tobe-gentle.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>要有在迷茫沮丧的时期，不对自己下结论的能力；在苦楚绝望的时期，不对世界下结论的操守。你要相信，一切都是暂时的，我们唯一需要做的，就是静静地好给世界看。</p>
</blockquote>
<a id="more"></a>
<p>最近感觉生活过的一团糟，书看不下去，博客也写不下去，我想我是个脾气有点爆的人，感觉生活就是很失望一般。</p>
<p>你是那么会安慰人，非得逞强去安慰别人，是什么让人这样，真是不撞南墙不回头，把南墙装得头破血流，也回不了头，只能往前走。这段时间真想对曾经自己的说声对不起，自己真的是很难过，</p>
<p>你是那么会安慰人，生活就是这样，一边安慰着鄙人，一边悄悄自愈着，自己糟糕，安慰别人却头头是道。</p>
<p>你是那么会安慰人，可能是曾经期望太高，导致现在一点一点的失望，失望到，似乎看到那个结局。继续安慰别人，下去就是忍受孤独吧。</p>
<p>然后不知不觉中，顾虑似乎多了不少，身上的包袱就沉重了许多，有些事情，虽然基本已经跟自己无关，但是还不愿意卸下，会上去悉心照顾下她人的感受，可是安慰完这个世界后，感觉没人会安慰自己了，也没人能够懂得自己现在的感受。</p>
<p>可能你也不懂得如何安慰别人，习惯一个人在外面打拼久了，什么都是自己一个人，没事什么都可以撑得下，已经习惯用坚强来安慰自己。</p>
<p>可能你也不懂得如何安慰别人，还是努力把自己最好的一面留给别人，不要去祈求来的安慰，只会是同情，还不如自己吞下所有的难过。</p>
<p>世界上有种傻子，在最难过的时候，还在想着怎么安慰别人，虽然没有关系，也不用在意。</p>
<p>自己一直不知道，有多少人和我一般笨拙，安慰人的话没说几句就词穷了。</p>
<p>所以现在多了一种安慰方式：沉默。</p>
<p>现在知道了。我确实不会安慰人。</p>
<p>只求往后的日子里，希望自己能想明白事情，再去做吧，这样就不会出现这么多的问题，即辜负了别人，也辜负了自己。  </p>
<p>往后的日子里做个温柔的人，无惧黑暗与严寒，只会把温暖带给世界，然后花点时间温暖自己，变得更加优秀。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程中Lock]]></title>
      <url>/java-lock.html</url>
      <content type="html"><![CDATA[<p>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p>
<ol>
<li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li>
<li>线程执行发生异常，此时JVM会让线程自动释放锁。</li>
</ol>
<a id="more"></a>
<p>那么如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。</p>
<p>　　因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</p>
<p>　　再举个例子：当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。</p>
<p>　　但是采用synchronized关键字来实现同步的话，就会导致一个问题：</p>
<p>　　如果多个线程都只是进行读操作，所以当一个线程在进行读操作时，其他线程只能等待无法进行读操作。</p>
<p>　　因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。</p>
<p>　　另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。</p>
<p>　　总结一下，也就是说Lock提供了比synchronized更多的功能。但是要注意以下几点：</p>
<ol>
<li>Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li>
<li>Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</li>
</ol>
<h3 id="java-util-concurrent-locks包下常用的类"><a href="#java-util-concurrent-locks包下常用的类" class="headerlink" title="java.util.concurrent.locks包下常用的类"></a>java.util.concurrent.locks包下常用的类</h3><p>java.util.concurrent.locks包中常用的类和接口。</p>
<h4 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@since</span> <span class="number">1.5</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面来逐个讲述Lock接口中每个方法的使用，lock()、tryLock()、tryLock(long time, TimeUnit unit)和lockInterruptibly()是用来获取锁的。unLock()方法是用来释放锁的。newCondition()这个方法暂且不在此讲述，会在后面的线程协作一文中讲述。</p>
<p>　　在Lock中声明了四个方法来获取锁，那么这四个方法有何区别呢？</p>
<h5 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h5><p>　　首先lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。</p>
<p>　　由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。通常使用Lock来进行同步的话，是以下面这种形式去使用的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Lock lock = ...;</div><div class="line">lock.lock();</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//处理任务</span></div><div class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">     </div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">    lock.unlock();   <span class="comment">//释放锁</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock"></a>tryLock</h5><p>tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</p>
<p>　　tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p>
<p>　　所以，一般情况下通过tryLock来获取锁时是这样使用的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Lock lock = ...;</div><div class="line"><span class="keyword">if</span>(lock.tryLock()) &#123;</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">         <span class="comment">//处理任务</span></div><div class="line">     &#125;<span class="keyword">catch</span>(Exception ex)&#123;</div><div class="line">         </div><div class="line">     &#125;<span class="keyword">finally</span>&#123;</div><div class="line">         lock.unlock();   <span class="comment">//释放锁</span></div><div class="line">     &#125; </div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//如果不能获取锁，则直接做其他事情</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="lockInterruptibly"><a href="#lockInterruptibly" class="headerlink" title="lockInterruptibly"></a>lockInterruptibly</h5><p>lockInterruptibly()方法比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。</p>
<p>　　由于lockInterruptibly()的声明中抛出了异常，所以lock.lockInterruptibly()必须放在try块中或者在调用lockInterruptibly()的方法外声明抛出InterruptedException。</p>
<p>　　因此lockInterruptibly()一般的使用形式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    lock.lockInterruptibly();</div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">     <span class="comment">//.....</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="ReentrantLock类"><a href="#ReentrantLock类" class="headerlink" title="ReentrantLock类"></a>ReentrantLock类</h4><p>ReentrantLock，意思是“可重入锁”。ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。下面通过一些实例看具体看一下如何使用ReentrantLock。</p>
<h5 id="例子1，lock-的正确使用方法"><a href="#例子1，lock-的正确使用方法" class="headerlink" title="例子1，lock()的正确使用方法:"></a>例子1，lock()的正确使用方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">                arrayList.add(i);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果是什么:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Thread-0得到了锁</div><div class="line">Thread-1得到了锁</div><div class="line">Thread-0释放了锁</div><div class="line">Thread-1释放了锁</div></pre></td></tr></table></figure></p>
<p>也许有朋友会问，怎么会输出这个结果？第二个线程怎么会在第一个线程释放锁之前得到了锁？原因在于，在insert方法中的lock变量是局部变量，每个线程执行该方法时都会保存一个副本，那么理所当然每个线程执行到lock.lock()处获取的是不同的锁，所以就不会发生冲突。</p>
<p>　　知道了原因改起来就比较容易了，只需要将lock声明为类的属性即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">                arrayList.add(i);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="例子2，tryLock-的使用方法"><a href="#例子2，tryLock-的使用方法" class="headerlink" title="例子2，tryLock()的使用方法"></a>例子2，tryLock()的使用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.insert(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(lock.tryLock()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">                    arrayList.add(i);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">            &#125;<span class="keyword">finally</span> &#123;</div><div class="line">                System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">                lock.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"获取锁失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Thread-0得到了锁</div><div class="line">Thread-1获取锁失败</div><div class="line">Thread-0释放了锁</div></pre></td></tr></table></figure></p>
<h5 id="例子3，lockInterruptibly"><a href="#例子3，lockInterruptibly" class="headerlink" title="例子3，lockInterruptibly()"></a>例子3，lockInterruptibly()</h5><p>响应中断的使用方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</div><div class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(test);</div><div class="line">        thread1.start();</div><div class="line">        thread2.start();</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        thread2.interrupt();</div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">        lock.lockInterruptibly();   <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</div><div class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">            <span class="keyword">for</span>(    ;     ;) &#123;</div><div class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//插入数据</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</div><div class="line">            lock.unlock();</div><div class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Test test = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Test test)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.test = test;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">         </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            test.insert(Thread.currentThread());</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行之后，发现thread2能够被正确中断。</p>
<h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for reading.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the lock used for writing.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p>
<h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p>
<p>　　下面通过几个例子来看一下ReentrantReadWriteLock具体用法。</p>
<p>　　假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果：</p>
<h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(thread.getName()+<span class="string">"读操作完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段程序的输出结果会是，直到thread1执行完读操作之后，才会打印thread2执行读操作的信息。</p>
<h5 id="改成用读写锁"><a href="#改成用读写锁" class="headerlink" title="改成用读写锁"></a>改成用读写锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</div><div class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                test.get(Thread.currentThread());</div><div class="line">            &#125;;</div><div class="line">        &#125;.start();</div><div class="line">         </div><div class="line">    &#125;  </div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</div><div class="line">        rwl.readLock().lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">             </div><div class="line">            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</div><div class="line">                System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println(thread.getName()+<span class="string">"读操作完毕"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            rwl.readLock().unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0正在进行读操作</div><div class="line">Thread-1正在进行读操作</div><div class="line">Thread-0读操作完毕</div><div class="line">Thread-1读操作完毕</div></pre></td></tr></table></figure></p>
<p>说明thread1和thread2在同时进行读操作。</p>
<p>　　这样就大大提升了读操作的效率。</p>
<p>　　不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</p>
<p>　　如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</p>
<p>　　关于ReentrantReadWriteLock类中的其他方法感兴趣的朋友可以自行查阅API文档。</p>
<h4 id="Lock和synchronized的选择"><a href="#Lock和synchronized的选择" class="headerlink" title="Lock和synchronized的选择"></a>Lock和synchronized的选择</h4><p>总结来说，Lock和synchronized有以下几点不同：</p>
<p>　　1）Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</p>
<p>　　2）synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</p>
<p>　　3）Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</p>
<p>　　4）通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</p>
<p>　　5）Lock可以提高多个线程进行读操作的效率。</p>
<p>　　在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p>
<h3 id="锁的相关概念介绍"><a href="#锁的相关概念介绍" class="headerlink" title="锁的相关概念介绍"></a>锁的相关概念介绍</h3><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>如果锁具备可重入性，则称作为可重入锁。像synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。</p>
<p>看下面这段代码就明白了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        method2();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">         </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述代码中的两个方法method1和method2都用synchronized修饰了，假如某一时刻，线程A执行到了method1，此时线程A获取了这个对象的锁，而由于method2也是synchronized方法，假如synchronized不具备可重入性，此时线程A需要重新申请锁。但是这就会造成一个问题，因为线程A已经持有了该对象的锁，而又在申请获取该对象的锁，这样就会线程A一直等待永远不会获取到的锁。</p>
<p>　　而由于synchronized和Lock都具备可重入性，所以不会发生上述现象。
　　</p>
<h4 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h4><p>可中断锁：顾名思义，就是可以相应中断的锁。</p>
<p>　　在Java中，synchronized就不是可中断锁，而Lock是可中断锁。</p>
<p>　　如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。</p>
<p>　　在前面演示lockInterruptibly()的用法时已经体现了Lock的可中断性。</p>
<h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>公平锁即尽量以请求锁的顺序来获取锁。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该所，这种就是公平锁。</p>
<p>　　非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。</p>
<p>　　在Java中，synchronized就是非公平锁，它无法保证等待的线程获取锁的顺序。</p>
<p>　　而对于ReentrantLock和ReentrantReadWriteLock，它默认情况下是非公平锁，但是可以设置为公平锁。</p>
<p>　　看一下这2个类的源代码就清楚了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Sync object for non-fair locks</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Performs lock.  Try immediate barge, backing up to normal</span></div><div class="line"><span class="comment">     * acquire on failure.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">            setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">        <span class="keyword">else</span></div><div class="line">            acquire(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Sync object for fair locks</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Fair version of tryAcquire.  Don't grant access unless</span></div><div class="line"><span class="comment">     * recursive call or no waiters or is first.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">        <span class="keyword">int</span> c = getState();</div><div class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">                setExclusiveOwnerThread(current);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">            <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">            setState(nextc);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ReentrantLock中定义了2个静态内部类，一个是NotFairSync，一个是FairSync，分别用来实现非公平锁和公平锁。</p>
<p>　　我们可以在创建ReentrantLock对象时，通过以下方式来设置锁的公平性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>如果参数为true表示为公平锁，为fasle为非公平锁。默认情况下，如果使用无参构造器，则是非公平锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125;.</span></div><div class="line"><span class="comment"> * This is equivalent to using &#123;<span class="doctag">@code</span> ReentrantLock(false)&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync = <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</span></div><div class="line"><span class="comment"> * given fairness policy.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外在ReentrantLock类中定义了很多方法，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">　　isFair()        //判断锁是否是公平锁</div><div class="line"></div><div class="line">　　isLocked()    //判断锁是否被任何线程获取了</div><div class="line"></div><div class="line">　　isHeldByCurrentThread()   //判断锁是否被当前线程获取了</div><div class="line"></div><div class="line">　　hasQueuedThreads()   //判断是否有线程在等待该锁</div></pre></td></tr></table></figure></p>
<p>在ReentrantReadWriteLock中也有类似的方法，同样也可以设置为公平锁和非公平锁。不过要记住，ReentrantReadWriteLock并未实现Lock接口，它实现的是ReadWriteLock接口。</p>
<h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p>读写锁将对一个资源（比如文件）的访问分成了2个锁，一个读锁和一个写锁。</p>
<p>　　正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。</p>
<p>　　ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。</p>
<p>　　可以通过readLock()获取读锁，通过writeLock()获取写锁。</p>
<p>　　上面已经演示过了读写锁的使用方法，在此不再赘述。</p>
<p><strong>文章转载：<a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3923167.html">海子</a></strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程中synchronized]]></title>
      <url>/java-synchronized.html</url>
      <content type="html"><![CDATA[<p>在多线程中，当多个线程同时访问同一个资源对象的时候，由于线程在处理中是不可控的，导致，执行的结果可能出现不可控的错误。</p>
<p>例如：两个线程thread-1和thread-2，同时要数据入库，需要判断数据字段a，不重复，所以当插入数据的时候先去检查数据库中a字段，当我们的两个线程中字段a相同的时候，出现thread1先执行查询，在thread2查询，两个线程同时都会得到a字段没重复，这个时候，数据入库，肯定会有问题的。</p>
<p>有线程安全的问题，这个资源叫做<code>临界资源</code>。</p>
<a id="more"></a>
<p>当多个线程同时访问临界资源（一个对象，对象中的属性，一个文件，一个数据库等）时，就可能会产生线程安全问题。</p>
<p>解决办法有两个，一个是让线程同步synchronized， 一个是lock。</p>
<h4 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h4><p>使用 <code>synchronized</code>关键字来修饰一个方法和方法块，当线程访问这个对象的synchronized修饰的方法的时候，会锁住这个方法，其他线程无法访问，等待这个线程执行完毕，其他线程才排队进来依次执行，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test.thread;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/5 9:39&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ThreadData threadData = <span class="keyword">new</span> ThreadData();</div><div class="line">        ThreadData threadData1 = <span class="keyword">new</span> ThreadData();</div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; threadData.data1()).start();</div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; ThreadData.data2()).start();</div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; threadData.data3()).start();</div><div class="line">        <span class="keyword">new</span> Thread(() -&gt; threadData1.data1()).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadData</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">data1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"begin data1"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">3000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"end data1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">data2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"data2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">data3</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"begin data3"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"end data3"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">begin data1</div><div class="line">data2</div><div class="line">begin data1</div><div class="line">end data1</div><div class="line">begin data3</div><div class="line">end data1</div><div class="line">end data3</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>当一个线程正在访问一个对象的synchronized方法，那么其他线程不能访问该对象的其他synchronized方法。</li>
<li>如果一个线程A需要访问对象object1的synchronized方法fun1，另外一个线程B需要访问对象object2的synchronized方法fun1，即使object1和object2是同一类型），也不会产生线程安全问题，因为他们访问的是不同的对象，所以不存在互斥问题。</li>
<li>如果一个线程执行一个对象的非static synchronized方法，另外一个线程需要执行这个对象所属类的static synchronized方法，此时不会发生互斥现象，因为访问static synchronized方法占用的是类锁，而访问非static synchronized方法占用的是对象锁，所以不存在互斥现象。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[他人的面试经历文章]]></title>
      <url>/others-hk.html</url>
      <content type="html"><![CDATA[<p>自己的面试经历比较少，积累下别人的面试经验，了解自己不足，加油。</p>
<p>开一篇文章，记录，有空就去看看。</p>
<hr>
<a id="more"></a>
<p><a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/brolanda/p/4837565.html">简单而不普通的，很有感觉</a></p>
<p><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/qw7501312/article/details/51851166">经验之谈</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 中ArrayList源码分析]]></title>
      <url>/java-arraylist.html</url>
      <content type="html"><![CDATA[<p>这次简单看下ArrayList的实现过程，以及它拥有的操作方法。<br>在Java 8 中 ArrayList 的实现 较以前有很大的改变。</p>
<a id="more"></a>
<h4 id="ArrayList-拥有的属性"><a href="#ArrayList-拥有的属性" class="headerlink" title="ArrayList 拥有的属性"></a>ArrayList 拥有的属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Default initial capacity.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Shared empty array instance used for empty instances.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     <span class="comment">//被用于空实例的共享空数组实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Shared empty array instance used for default sized empty instances. We</span></div><div class="line"><span class="comment">     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></div><div class="line"><span class="comment">     * first element is added.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">     <span class="comment">//被用于默认大小的空实例的共享数组实例。其与EMPTY_ELEMENTDATA的区别是：当我们向数组中添加第一个元素时，知道数组该扩充多少。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The array buffer into which the elements of the ArrayList are stored.</span></div><div class="line"><span class="comment">     * The capacity of the ArrayList is the length of this array buffer. Any</span></div><div class="line"><span class="comment">     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></div><div class="line"><span class="comment">     * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The size of the ArrayList (the number of elements it contains).</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@serial</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div></pre></td></tr></table></figure>
<ol>
<li>实现的接口看出，支持随机访问，克隆，序列化；</li>
<li>默认大小<code>DEFAULT_CAPACITY</code> 为 10 ；</li>
<li><code>elementData</code>存储数组数据的，是 Object[] 类型的数组；</li>
<li><code>size</code> 为当前 ArrayList 的实际大小。<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4>ArrayList 通过构造方法创建有三种方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造一个指定初始容量的空列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity  ArrayList的初始容量</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果给定的初始容量为负值</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 构造一个默认初始容量为10的空列表，但是还没分配大小。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回的顺序排列的</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> c 包含用于去构造ArrayList的元素的collection</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果指定的collection为空</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// c.toArray()可能不会正确地返回一个 Object[]数组，那么使用Arrays.copyOf()方法</span></div><div class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">                <span class="comment">//Arrays.copyOf()返回一个 Object[].class类型的，大小为size，元素为elementData[0,...,size-1]</span></div><div class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// replace with empty array.</span></div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="添加元素add"><a href="#添加元素add" class="headerlink" title="添加元素add"></a>添加元素add</h4><p>最简单的添加方法，在 ArrayList 尾部添加一个元素，需要去扩容，这个是ArrayList 最重要的一个特点；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    elementData[size++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h5><p>下面是扩容的重要代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每当向数组中添加元素时，都要去检查添加元素后的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，都回去调用方法<code>ensureCapacityInternal(int minCapacity)</code><br>在这个方法中看到，那个if语句判断就是，我们使用默认无参的构造函数创建的ArrayList 是在这里去 给大小的，如果第一次 add 的元素长度大于默认长度的话，就是用新的长度，否则给默认大小10；</p>
<p>给定大小后，就去调用<code>grow</code>方法，进行扩容。<br>看到<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code> ArrayList 每次扩容的大小是当前容量的0.5倍，就是默认大小为10，下次扩容后大小为15，下次再扩容后为 <em>15 </em> 1.5*；所以ArrayList每次扩容的容量只会越来越大。</p>
<p>  <code>modCount</code>用于记录ArrayList的结构性变化的次数，add()、remove()、addall()、removerange()及clear()方法都会让modCount增长。</p>
<h5 id="其余的add方法，addAll"><a href="#其余的add方法，addAll" class="headerlink" title="其余的add方法，addAll"></a>其余的add方法，addAll</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将指定的元素(E e)添加到此列表的尾部</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        elementData[size++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//将指定的元素(E e)插入到列表的指定位置(index)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index); <span class="comment">//判断参数index是否IndexOutOfBoundsException</span></div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!  如果数组长度不足，将进行扩容</span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                         size - index); <span class="comment">//将源数组中从index位置开始后的size-index个元素统一后移一位</span></div><div class="line">        elementData[index] = element;</div><div class="line">        size++; <span class="comment">//重新指定siez 大小</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line">        <span class="comment">//将数组a[0,...,numNew-1]复制到数组elementData[size,...,size+numNew-1]</span></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew); </div><div class="line">        size += numNew; <span class="comment">//重新指定size 大小</span></div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 从指定的位置开始，将指定collection中的所有元素插入到此列表中，新元素的顺序为指定collection的迭代器所返回的元素顺序</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index); <span class="comment">//判断参数index是否IndexOutOfBoundsException</span></div><div class="line"></div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            <span class="comment">//先将数组elementData[index,...,index+numMoved-1]复制到elementData[index+numMoved,...,index+2*numMoved-1]</span></div><div class="line">            <span class="comment">//即，将源数组中从index位置开始的后numMoved个元素统一后移numNew位</span></div><div class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</div><div class="line">                             numMoved);</div><div class="line">        <span class="comment">//再将数组a[0,...,numNew-1]复制到数组elementData[index,...,index+numNew-1]</span></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">        size += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="remove-删除元素"><a href="#remove-删除元素" class="headerlink" title="remove 删除元素"></a>remove 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 移除此列表中指定位置上的元素</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> index 需被移除的元素的索引</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the element 被移除的元素值</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);  <span class="comment">//判断index是否 &lt;= size</span></div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        E oldValue = elementData(index);</div><div class="line">        <span class="comment">//将数组elementData中index位置之后的所有元素向前移一位</span></div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">//将原数组最后一个位置置为null，由GC清理</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//移除ArrayList中首次出现的指定元素(如果存在)，ArrayList中允许存放重复的元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="comment">// 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。</span></div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                    fastRemove(index); <span class="comment">//私有的移除方法，跳过index参数的边界检查以及不返回任何值</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//私有的删除指定位置元素的方法，跳过index参数的边界检查以及不返回任何值</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//清空ArrayList，将全部的元素设为null</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        size = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除ArrayList中从fromIndex（包含）到toIndex（不包含）之间所有的元素，共移除了toIndex-fromIndex个元素</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - toIndex;  <span class="comment">//需向前移动的元素的个数</span></div><div class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</div><div class="line">                         numMoved);</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        size = newSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//删除ArrayList中包含在指定容器c中的所有元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(c);  <span class="comment">//检查指定的对象c是否为空</span></div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//移除ArrayList中不包含在指定容器c中的所有元素，与removeAll(Collection&lt;?&gt; c)正好相反</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(c); </div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//批量删除</span></div><div class="line">    <span class="comment">//complement为true 表示不同的删除，</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</div><div class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;  <span class="comment">//读写双指针</span></div><div class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</div><div class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement) <span class="comment">//判断指定容器c中是否含有elementData[r]元素</span></div><div class="line">                    elementData[w++] = elementData[r];</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></div><div class="line">            <span class="comment">// even if c.contains() throws.</span></div><div class="line">            <span class="keyword">if</span> (r != size) &#123;</div><div class="line">                System.arraycopy(elementData, r,</div><div class="line">                                 elementData, w,</div><div class="line">                                 size - r);</div><div class="line">                w += size - r;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (w != size) &#123;</div><div class="line">                <span class="comment">// clear to let GC do its work</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</div><div class="line">                    elementData[i] = <span class="keyword">null</span>;</div><div class="line">                modCount += size - w;</div><div class="line">                size = w;</div><div class="line">                modified = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> modified;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="修改元素-set"><a href="#修改元素-set" class="headerlink" title="修改元素 set"></a>修改元素 set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将指定索引上的值替换为新值，并返回旧值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        E oldValue = elementData(index);</div><div class="line">        elementData[index] = element;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断ArrayList中是否包含Object(o)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//正向查找，返回ArrayList中元素Object o第一次出现的位置，如果元素不存在，则返回-1</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)                 </div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//逆向查找，返回ArrayList中元素Object o最后一次出现的位置，如果元素不存在，则返回-1</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (E) elementData[index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回指定索引处的值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> elementData(index); <span class="comment">//实质上return (E) elementData[index]</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将底层数组的容量调整为当前列表保存的实际元素的大小的功能</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">            elementData = (size == <span class="number">0</span>)</div><div class="line">              ? EMPTY_ELEMENTDATA</div><div class="line">              : Arrays.copyOf(elementData, size);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回ArrayList的大小（元素个数）</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   <span class="comment">//判断ArrayList是否为空</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回此 ArrayList实例的浅拷贝</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</div><div class="line">            v.elementData = Arrays.copyOf(elementData, size);</div><div class="line">            v.modCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//返回一个包含ArrayList中所有元素的数组</span></div><div class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//如果给定的参数数组长度足够，则将ArrayList中所有元素按序存放于参数数组中，并返回</span></div><div class="line">    <span class="comment">//如果给定的参数数组长度小于ArrayList的长度，则返回一个新分配的、长度等于ArrayList长度的、包含ArrayList中所有元素的新数组</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        <span class="keyword">if</span> (a.length &lt; size)</div><div class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></div><div class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</div><div class="line">        <span class="keyword">if</span> (a.length &gt; size)</div><div class="line">            a[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/4 16:53&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; seasons = <span class="keyword">new</span> ArrayList();<span class="comment">// 创建默认大小ArrayList</span></div><div class="line">        seasons.add(<span class="string">"spring"</span>); <span class="comment">//第一次赋值，才有大小</span></div><div class="line">        seasons.addAll(Arrays.asList(<span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>));</div><div class="line">        <span class="comment">//使用迭代器 Iterator</span></div><div class="line">        Iterator iterator = seasons.iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            System.out.println(iterator.next());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//使用迭代器 ListIterator</span></div><div class="line">        System.out.println(<span class="string">"使用迭代器 ListIterator"</span>);</div><div class="line">        ListIterator listIterator = seasons.listIterator();</div><div class="line">        <span class="keyword">while</span> (listIterator.hasNext()) &#123;</div><div class="line">            System.out.println(listIterator.next());</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"使用迭代器 ListIterator，逆向访问"</span>);</div><div class="line">        <span class="keyword">while</span> (listIterator.hasPrevious()) &#123;</div><div class="line">            System.out.println(listIterator.nextIndex() + <span class="string">" : "</span> + listIterator.previous());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//通过索引 ，随机访问</span></div><div class="line">        System.out.println(<span class="string">"通过索引 ，随机访问"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = seasons.size(); i &lt; len; i++) System.out.println(seasons.get(i));</div><div class="line"></div><div class="line">        <span class="comment">// 使用foreach 遍历</span></div><div class="line">        System.out.println(<span class="string">"使用foreach 遍历"</span>);</div><div class="line">        <span class="keyword">for</span> (String season : seasons) System.out.println(season);</div><div class="line">        <span class="comment">//第二种写法</span></div><div class="line">		<span class="comment">//@since 1.8 </span></div><div class="line">		<span class="comment">//@see Iterable</span></div><div class="line">        seasons.forEach(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Iterator与ListIterator的区别：</p>
<ol>
<li>Iterator可以应用于所有的集合，Set、List和Map和这些集合的子类型。而ListIterator只能用于List及其子类型；</li>
<li>Iterator只能实现顺序向后遍历，ListIterator可实现顺序向后遍历和逆向（顺序向前）遍历；</li>
<li>Iterator只能实现remove操作，ListIterator可以实现remove操作，add操作，set操作。<h4 id="多线程中使用ArrayList"><a href="#多线程中使用ArrayList" class="headerlink" title="多线程中使用ArrayList"></a>多线程中使用ArrayList</h4>当多个线程同时修改一个ArrayList对象的时候，必须要保持外部同步操作，但是ArrayList不是同步的，非线程安全，有一种办法就是可以使用<code>Collections.synchronizedList</code>进行包装：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList(...));</div></pre></td></tr></table></figure>
</li>
</ol>
<p>但是在平时开发中，多线程开发中多选择使用<code>Vector</code>或者<code>CopyOnWriteArrayList</code>。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用slf4j管理log4j中遇到的问题]]></title>
      <url>/slf4j-manager.html</url>
      <content type="html"><![CDATA[<p>项目中使用SLF4J管理LOG4J日志的，突然出现问题，不能打印日志了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</div><div class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</div><div class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>意思就是无法加载<code>org.slf4j.impl.StaticLoggerBinder</code> 这么类。</p>
<p>但是这个类在哪里半天看不懂，点进它给出的链接中，开头发现这么一段话：</p>
<blockquote>
<p>This warning message is reported when the org.slf4j.impl.StaticLoggerBinder class could not be loaded into memory. This happens when no appropriate SLF4J binding could be found on the class path. Placing one (and only one) of slf4j-nop.jar slf4j-simple.jar, slf4j-log4j12.jar, slf4j-jdk14.jar or logback-classic.jar on the class path should solve the problem.</p>
</blockquote>
<p>这个警告信息告诉我们，<code>org.slf4j.impl.StaticLoggerBinder</code>无法加载到内存中，当在类路径上找不到合适的SLF4J绑定时，就会出现这种情况。在他给出的几个jar 包中选择一个可以解决问题。</p>
<p>所以maven 中配置为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-nop --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>还发现一个东西，记录下，以后注意点：</p>
<blockquote>
<p><strong>SLF4J versions 1.4.0 and later requires log4j 1.2.12 or later</strong><br>The trace level was added to log4j in version 1.2.12 released on August 29, 2005. The trace level was added to the SLF4J API in version 1.4.0 on May 16th, 2007. Thus, starting with SLF4J 1.4.0, the log4j binding for SLF4J requires log4j version 1.2.12 or above.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> log4j </tag>
            
            <tag> slf4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中使用Configuration注入Bean]]></title>
      <url>/spring-config.html</url>
      <content type="html"><![CDATA[<p>在Spring容器中使用<code>applicationContext.xml</code>中来给对应的类注入对应的属性，来完成初始化，最典型的就是配置数据库连接池了。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line"><span class="tag">		<span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;connection.url&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;connection.username&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;connection.password&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.initialSize&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.minIdle&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.maxActive&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.maxWait&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.timeBetweenEvictionRunsMillis&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.minEvictableIdleTimeMillis&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandoned"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.removeAbandoned&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 超时时间；单位为秒。180秒=3分钟 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.removeAbandonedTimeoutSeconds&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.validationQuery&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testWhileIdle&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testOnBorrow&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testOnReturn&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.poolPreparedStatements&#125;"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></div><div class="line"><span class="tag">			<span class="attr">value</span>=<span class="string">"$&#123;druid.maxPoolPreparedStatementPerConnectionSize&#125;"</span> /&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.filters&#125;"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置参数就不贴出。</p>
<h2 id="使用-Configuration创建Bean"><a href="#使用-Configuration创建Bean" class="headerlink" title="使用@Configuration创建Bean"></a>使用@Configuration创建Bean</h2><p>Configuration 是 Spring 3.X 后提供的注解，用于取代 XML 来配置 Spring, </p>
<p><code>@Configuration</code>可理解为用spring的时候xml里面的<code>&lt;beans&gt;</code>标签；</p>
<p><code>@Bean</code>可理解为用spring的时候xml里面的<code>&lt;bean&gt;</code>标签。</p>
<p>这样就很好理解了。</p>
<p>需要注意的时配置<code>spring</code> 扫描的包 <code>&lt;context:component-scan base-package=&quot;com.xxx.xxx&quot; /&gt;</code> 不然注解不起效果（springboot不需要设置）。</p>
<h3 id="读取json文件的属性注入Bean"><a href="#读取json文件的属性注入Bean" class="headerlink" title="读取json文件的属性注入Bean"></a>读取json文件的属性注入Bean</h3><p>这次使用Json文件来配置bean；</p>
<p>首先写出实体类，和需要配置的数据；</p>
<h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:31&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCfg</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"PersonCfg&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", contacts="</span> + contacts +</div><div class="line">                <span class="string">", hobby="</span> + hobby +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Contact&gt; <span class="title">getContacts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> contacts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContacts</span><span class="params">(List&lt;Contact&gt; contacts)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.contacts = contacts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(List hobby)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobby = hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List hobby;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String phone;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phone = phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Contact&#123;"</span> +</div><div class="line">                <span class="string">"phone='"</span> + phone + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="需要注入的数据"><a href="#需要注入的数据" class="headerlink" title="需要注入的数据"></a>需要注入的数据</h4><p>创建文件命名<code>data.json</code>，(注意属性名对应):<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"wuwii"</span>,</div><div class="line">  <span class="attr">"age"</span>: <span class="number">23</span>,</div><div class="line">  <span class="attr">"city"</span>: <span class="string">"WuHan"</span>,</div><div class="line">  <span class="attr">"hobby"</span>: [<span class="string">"骑行"</span>, <span class="string">"跑步"</span>,<span class="string">"足球"</span>],</div><div class="line">  <span class="attr">"contacts"</span>: [&#123;</div><div class="line">    <span class="attr">"phone"</span>: <span class="string">"18772383543"</span>,</div><div class="line">    <span class="attr">"email"</span>: <span class="string">"k@wuwii.com"</span></div><div class="line">  &#125;,&#123;</div><div class="line">    <span class="attr">"phone"</span>: <span class="string">"12345678912"</span>,</div><div class="line">    <span class="attr">"email"</span>: <span class="string">"1075199251@qq.com"</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="创建Beans"><a href="#创建Beans" class="headerlink" title="创建Beans"></a>创建Beans</h4><p>spring 容器初始化，自动扫描，去初始化Bean，加载进Environment，后面调用的直接自动装配（Autowired）；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:23&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"classpath:data.json"</span>)</div><div class="line">    <span class="keyword">protected</span> File configFile;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PersonCfg <span class="title">readServerConfig</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper().readValue(configFile, PersonCfg.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>@Bean</code> 注解方法的返回值，将注入到容器中，可以使用自动装配。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>直接使用spring-test 的JUnit4 单元测试;<br>直接装配Bean ，来输出它的属性，查看是否装配成功。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util; </div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test; </div><div class="line"><span class="keyword">import</span> org.junit.Before; </div><div class="line"><span class="keyword">import</span> org.junit.After;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* Configs Tester. </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> Zhang Kai </span></div><div class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;11/02/2017&lt;/pre&gt; </span></div><div class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/applicationContext-base.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigsTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PersonCfg personCfg;</div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: 名字随便起的，不规范。</span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigBeans</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    System.out.printf(<span class="string">"Use '@Configuration' autowired beans : %s%n"</span>, personCfg);</div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use <span class="string">'@Configuration'</span> autowired beans : PersonCfg&#123;name=<span class="string">'wuwii'</span>, age=<span class="number">23</span>, city=<span class="string">'WuHan'</span>, contacts=[Contact&#123;phone=<span class="string">'18772383543'</span>, email=<span class="string">'k@wuwii.com'</span>&#125;, Contact&#123;phone=<span class="string">'12345678912'</span>, email=<span class="string">'1075199251@qq.com'</span>&#125;], hobby=[骑行, 跑步]&#125;</div></pre></td></tr></table></figure></p>
<h3 id="读取properties-文件的属性注入Bean"><a href="#读取properties-文件的属性注入Bean" class="headerlink" title="读取properties 文件的属性注入Bean"></a>读取properties 文件的属性注入Bean</h3><p>上面的的方法中除了测试类的方法相同而已，为了方便其余都有改动；</p>
<h4 id="首先实体类，通过构造方法传入值"><a href="#首先实体类，通过构造方法传入值" class="headerlink" title="首先实体类，通过构造方法传入值"></a>首先实体类，通过构造方法传入值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:31&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCfg</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</div><div class="line">    <span class="keyword">private</span> List hobby;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonCfg</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonCfg</span><span class="params">(String name, <span class="keyword">int</span> age, String city, List&lt;Contact&gt; contacts, List hobby)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.city = city;</div><div class="line">        <span class="keyword">this</span>.contacts = contacts;</div><div class="line">        <span class="keyword">this</span>.hobby = hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"PersonCfg&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", contacts="</span> + contacts +</div><div class="line">                <span class="string">", hobby="</span> + hobby +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Contact&gt; <span class="title">getContacts</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> contacts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContacts</span><span class="params">(List&lt;Contact&gt; contacts)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.contacts = contacts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(List hobby)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobby = hobby;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String phone;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Contact</span><span class="params">(String phone, String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phone = phone;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.phone = phone;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Contact&#123;"</span> +</div><div class="line">                <span class="string">"phone='"</span> + phone + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>由于properties 文件不能写 只能写那些单一属性，数组和对象需要自己设置规则，去后台解析出来使用。<br>创建<code>person.properties</code> 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">name=wuwii</div><div class="line">age=23</div><div class="line">city=WuHan</div><div class="line">hobby=football,running</div><div class="line">contacts=18772383543,k@wuwii.com;12345678912,1075199251@qq.com</div></pre></td></tr></table></figure></p>
<h4 id="创建Bean"><a href="#创建Bean" class="headerlink" title="创建Bean"></a>创建Bean</h4><p>通过@Configuration完成spring 初始化，设置@PropertySource，读取配置文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:23&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> Environment env;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PersonCfg <span class="title">getPersonFromProp</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PersonCfg(env.getProperty(<span class="string">"name"</span>), Integer.valueOf(env.getProperty(<span class="string">"age"</span>)),</div><div class="line">                env.getProperty(<span class="string">"city"</span>), string2contacts(env.getProperty(<span class="string">"contacts"</span>)), string2list(env.getProperty(<span class="string">"hobby"</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  按照预先定义规则的列表字符串 转换成列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s 预先定义规则的列表字符串</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">string2list</span> <span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> StringUtil.isNull(s) ? <span class="keyword">null</span> : Arrays.asList(s.split(<span class="string">","</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  &lt;p&gt;按照预先定义规则&lt;/p&gt;</span></div><div class="line"><span class="comment">     *  &lt;p&gt;将配置文件 Contact 列表的字符串 转换成 列表对象&lt;/p&gt;</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s 读取配置文件 Contact 列表的字符串</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;com.devframe.util.Contact&gt;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;Contact&gt; <span class="title">string2contacts</span> <span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (StringUtil.isNull(s)) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        List&lt;String&gt; list1 = Arrays.asList(s.split(<span class="string">";"</span>));</div><div class="line">        <span class="keyword">return</span> list1.stream().map(<span class="keyword">this</span>::contactStr2contact).collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 按照预定义规则转换成 contact对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> contactStr contact类的字符串</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> com.devframe.util.Contact</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Contact <span class="title">contactStr2contact</span> <span class="params">(String contactStr)</span> </span>&#123;</div><div class="line">        String[] index = contactStr.split(<span class="string">","</span>);</div><div class="line">        <span class="comment">// 传入字段数，自己控制，有点蠢了</span></div><div class="line">        <span class="keyword">if</span> (index.length != <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contact(index[<span class="number">0</span>], index[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>最后JUnit4 测试类没变，重新测试，打印出来结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use &apos;@Configuration&apos; autowired beans : PersonCfg&#123;name=&apos;wuwii&apos;, age=23, city=&apos;WuHan&apos;, contacts=[Contact&#123;phone=&apos;18772383543&apos;, email=&apos;k@wuwii.com&apos;&#125;, Contact&#123;phone=&apos;12345678912&apos;, email=&apos;1075199251@qq.com&apos;&#125;], hobby=[football, running]&#125;</div></pre></td></tr></table></figure></p>
<p>成功。</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>20171103 早上来看了下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return the property value associated with the given key, or &#123;<span class="doctag">@code</span> null&#125;</span></div><div class="line"><span class="comment"> * if the key cannot be resolved.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getProperty(String, String)</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getProperty(String, Class)</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return the property value associated with the given key, or</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> defaultValue&#125; if the key cannot be resolved.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> defaultValue the default value to return if no value is found</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String)</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getProperty(String, Class)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key, String defaultValue)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return the property value associated with the given key, or &#123;<span class="doctag">@code</span> null&#125;</span></div><div class="line"><span class="comment"> * if the key cannot be resolved.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> targetType the expected type of the property value</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String, Class)</span></div><div class="line"><span class="comment"> */</span></div><div class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Return the property value associated with the given key, or</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> defaultValue&#125; if the key cannot be resolved.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> targetType the expected type of the property value</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> defaultValue the default value to return if no value is found</span></div><div class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String, Class)</span></div><div class="line"><span class="comment"> */</span></div><div class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType, T defaultValue)</span></span>;</div></pre></td></tr></table></figure></p>
<p>在<code>PropertyResolver</code>接口中发现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span></span>;</div></pre></td></tr></table></figure></p>
<p>这个方法可以直接读取文件内容转换成我们的需要类型，虽然说很好，调试了半天代码不知道properties文件怎么写对象来让它转换，这个以后再看，list列表很好转，将上面的方法加载hobby属性改成这个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">env.getProperty((<span class="string">"age"</span>), Integer.class)</div><div class="line">env.getProperty((<span class="string">"hobby"</span>), List.class)</div></pre></td></tr></table></figure></p>
<p>person文件中hobby属性为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hobby=running,football</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use &apos;@Configuration&apos; autowired beans : PersonCfg&#123;name=&apos;wuwii&apos;, age=23, city=&apos;WuHan&apos;, contacts=[Contact&#123;phone=&apos;18772383543&apos;, email=&apos;k@wuwii.com&apos;&#125;, Contact&#123;phone=&apos;12345678912&apos;, email=&apos;1075199251@qq.com&apos;&#125;], hobby=[running, football]&#125;</div></pre></td></tr></table></figure></p>
<p>没问题</p>
<h4 id="直接使用-Value占位符注入"><a href="#直接使用-Value占位符注入" class="headerlink" title="直接使用@Value占位符注入"></a>直接使用@Value占位符注入</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>使用<code>@Component</code> 方式注入，需要再applicationContext.xml中引入properties文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 参数占位符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span></span></div><div class="line"><span class="tag">	<span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemPropertiesModeName"</span> <span class="attr">value</span>=<span class="string">"SYSTEM_PROPERTIES_MODE_OVERRIDE"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:spring/database.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:person.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>改下实体类，直接在属性上注入<code>@Value</code>，占位符符号<code>${ }</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:31&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCfg</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;city&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line">    <span class="comment">//这个不会，对象属性不会写</span></div><div class="line">    <span class="comment">//@Value("$&#123;contacts1&#125;")</span></div><div class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hobby&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> List hobby;</div><div class="line"></div><div class="line"><span class="comment">//省略代码</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use &apos;@Configuration&apos; autowired beans : PersonCfg&#123;name=&apos;wuwii&apos;, age=23, city=&apos;WuHan&apos;, contacts=null, hobby=[running,football]&#125;</div></pre></td></tr></table></figure></p>
<p>发现数组列表也能直接注入。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在配置类中设置引入配置文件，还需引入占位符，等价于XML中的<code>&lt;context:property-placeholder/&gt;</code>配置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Configs.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Environment env;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PropertySourcesPlaceholderConfigurer <span class="title">propertySourcesPlaceholderConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就可以在类中的属性上使用@Value占位符 注入了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>还可以读取xml文件进行装配，当然也不使用配置文件，直接在Beans的<code>@Value</code>注解上写出需要注解的值，但是那样后期部署修改起来麻烦。</li>
<li>常用的应该时这么两个 比较好，properties 可能用的多点吧；因为平时使用这个外部需要修改的参数 的基本都是一些常量，不会存在这么多转换，这个只是我的测试的代码，所以有一些鬼转换。</li>
<li>还有我使用properties 中为什么没使用中文，因为乱码了。尴尬。这是需要注意的地方，因为电脑默认编码是gbk，但是读的时候，又没有设置编码。解决办法：在读取properties文件的工具类上，加上指定编码格式<code>utf-8</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">URL url = PropertyUtil.class.getResource(<span class="string">"/config.properties"</span>);</div><div class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(url.getPath());</div><div class="line"><span class="comment">//这段代码不是 以前的  PROP.load(in);</span></div><div class="line">PROP.load(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</div><div class="line">in.close();</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中创建线程池的常用方法]]></title>
      <url>/java-create-pool.html</url>
      <content type="html"><![CDATA[<h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>学习了Java中线程池的工作流程，现在学习一下怎么使用线程池；前面了解到构造一个线程池参数，最简单的线程池构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>最少需要设置这么几个参数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">corePoolSize 核心池大小，</div><div class="line">maximumPoolSize 最大线程数量，</div><div class="line">keepAliveTime 心跳时间</div><div class="line">unit 心跳时间单位，什么时候销毁多余的线程</div><div class="line">workQueue 最重要的，阻塞队列，存储等待中的任务</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在前面创建过线程池：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</div><div class="line">            queue);</div></pre></td></tr></table></figure></p>
<p>第一步创建一个固定容量的队列来存储等待执行的任务；<br>第二步设置核心池数，最大容量数，心跳时间参数。</p>
<p>这个executor线程池说明了，核心池数为5，缓存队列最多存储5个任务，最大线程池数为10，当任务数量大于核心数（5）的时候，监控空闲线程，在心跳时间200 MILLISECONDS后，结束任务，直到线程池中线程数不大于核心数 5。</p>
<h3 id="使用Executors来创建线程池"><a href="#使用Executors来创建线程池" class="headerlink" title="使用Executors来创建线程池"></a>使用Executors来创建线程池</h3><p><del>如果没有特殊的要求，一般都是推荐用Executors工具类来创建线程池，因为它的参数都给我们配置好了，直接拿来用就好。</del><br><code>Executors</code>类提供的方法来创建线程池：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Executors.newCachedThreadPool(); <span class="comment">//创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE</span></div><div class="line">Executors.newSingleThreadExecutor(); <span class="comment">//创建容量为1的缓冲池</span></div><div class="line">Executors.newFixedThreadPool(<span class="keyword">int</span> corePoolSize); <span class="comment">//创建固定容量大小的缓冲池，缓存队列大小为Integer.MAX_VALUE</span></div><div class="line">Executors.newScheduledThreadPool(<span class="keyword">int</span> corePoolSize) <span class="comment">//创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行</span></div><div class="line">Executors.newSingleThreadScheduledExcutor <span class="comment">//创建一个单例线程池，定期或延时执行任务。</span></div><div class="line">Executors.newWorkStealingPool <span class="comment">//创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量。</span></div></pre></td></tr></table></figure></p>
<h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p>newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。缓冲池容量大小为Integer.MAX_VALUE。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p>创建容量为1的缓冲池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p>创建固定容量大小的缓冲池，缓存队列大小为Integer.MAX_VALUE:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>定长线程池的大小最好根据系统资源进行设置。如<code>Runtime.getRuntime().availableProcessors()</code>。</p>
<h4 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h4><p>创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</div><div class="line">              <span class="keyword">new</span> DelayedWorkQueue());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里主要主要它的定时任务用法；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 测试newScheduledThreadPool</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/1 16:25&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPoolTwo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ScheduledExecutorService scheduleExcutor = Executors.newScheduledThreadPool(<span class="number">5</span>);</div><div class="line">        <span class="comment">//延迟两秒执行</span></div><div class="line">        scheduleExcutor.schedule(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"Delay 2 seconds."</span>);</div><div class="line">        &#125;, <span class="number">2</span>, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">        <span class="comment">//延迟两秒执行，后面每隔五秒执行</span></div><div class="line">        scheduleExcutor.scheduleAtFixedRate(() -&gt; &#123;</div><div class="line">            System.out.println(<span class="string">"Delay 2 seconds."</span>);</div><div class="line">        &#125;, <span class="number">2</span>, <span class="number">5</span>, TimeUnit.SECONDS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要注意的有两点：</p>
<ol>
<li>使用的是<code>ScheduledExecutorService</code> 这个接口，这个接口也是继承<code>ExecutorService</code>，所以也有sumit，execute方法；</li>
<li><code>ScheduledExecutorService</code>接口中有定时，延迟执行任务的方法:<code>scheduleAtFixedRate</code>,<code>schedule</code>。</li>
</ol>
<h4 id="newSingleThreadScheduledExcutor"><a href="#newSingleThreadScheduledExcutor" class="headerlink" title="newSingleThreadScheduledExcutor"></a>newSingleThreadScheduledExcutor</h4><p>创建一个单例线程池，定期或延时执行任务，方法同同上面的<code>newScheduledThreadPool</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newSingleThreadScheduledExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatedScheduledExecutorService</div><div class="line">            (<span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="newWorkStealingPool"><a href="#newWorkStealingPool" class="headerlink" title="newWorkStealingPool"></a>newWorkStealingPool</h4><p>创建一个拥有多个任务队列（以便减少连接数）的线程池：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</div><div class="line">            (Runtime.getRuntime().availableProcessors(),</div><div class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</div><div class="line">            (parallelism,</div><div class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>默认不传入线程池大小，默认按机器CPU能力来设置。</p>
<p>它使用的是<code>ForkJoinPool</code>多线程中的任务分解机制，将大任务按照预先制定的规则将大任务分解成小任务，多线程并发。这个是java7新加入的线程池，可以使用相对少的线程来处理大量的任务。</p>
<h3 id="阿里代码规范补充"><a href="#阿里代码规范补充" class="headerlink" title="阿里代码规范补充"></a>阿里代码规范补充</h3><p>编码的时候发现了最新的阿里代码规范工具中，发现了这个提示了，记录，</p>
<p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors各个方法的弊端：</p>
<ol>
<li>newFixedThreadPool和newSingleThreadExecutor:<br>  主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。</li>
<li>newCachedThreadPool和newScheduledThreadPool:<br>  主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。</li>
</ol>
<p>Positive example 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//org.apache.commons.lang3.concurrent.BasicThreadFactory</span></div><div class="line">    ScheduledExecutorService executorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>,</div><div class="line">        <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">"example-schedule-pool-%d"</span>).daemon(<span class="keyword">true</span>).build());</div><div class="line">```       </div><div class="line">        </div><div class="line">            </div><div class="line">Positive example <span class="number">2</span>：</div><div class="line">```java</div><div class="line">    ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</div><div class="line">        .setNameFormat(<span class="string">"demo-pool-%d"</span>).build();</div><div class="line"></div><div class="line">    <span class="comment">//Common Thread Pool</span></div><div class="line">    ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">200</span>,</div><div class="line">         <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">         <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1024</span>), namedThreadFactory, <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div><div class="line"></div><div class="line">    pool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));</div><div class="line">    pool.shutdown();<span class="comment">//gracefully shutdown</span></div><div class="line">```      </div><div class="line">        </div><div class="line">            </div><div class="line">Positive example <span class="number">3</span>：</div><div class="line">```java</div><div class="line">    &lt;bean id=<span class="string">"userThreadPool"</span></div><div class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</div><div class="line">        &lt;property name=<span class="string">"corePoolSize"</span> value=<span class="string">"10"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"100"</span> /&gt;</div><div class="line">        &lt;property name=<span class="string">"queueCapacity"</span> value=<span class="string">"2000"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;property name=<span class="string">"threadFactory"</span> value= threadFactory /&gt;</div><div class="line">        &lt;property name=<span class="string">"rejectedExecutionHandler"</span>&gt;</div><div class="line">            &lt;ref local=<span class="string">"rejectedExecutionHandler"</span> /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    <span class="comment">//in code</span></div><div class="line">    userThreadPool.execute(thread);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中守护线程的总结]]></title>
      <url>/user-daemon-thread.html</url>
      <content type="html"><![CDATA[<p>了解下Java中的守护线程，看到这篇文章很详细，记录下来。<br><strong>文章来自</strong><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/shimiso/article/details/8964414">http://blog.csdn.net/shimiso/article/details/8964414</a></p>
<p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程)<br>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：<br>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。<br>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。<br>User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。</p>
<a id="more"></a>
<p>值得一提的是，守护线程并非只有虚拟机内部提供，用户在编写程序时也可以自己设置守护线程。下面的方法就是用来设置守护线程的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Thread daemonTread = <span class="keyword">new</span> Thread();  </div><div class="line">   </div><div class="line">  <span class="comment">// 设定 daemonThread 为 守护线程，default false(非守护线程)  </span></div><div class="line"> daemonThread.setDaemon(<span class="keyword">true</span>);  </div><div class="line">   </div><div class="line"> <span class="comment">// 验证当前线程是否为守护线程，返回 true 则为守护线程  </span></div><div class="line"> daemonThread.isDaemon();</div></pre></td></tr></table></figure></p>
<p>这里有几点需要注意： </p>
<ol>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>
<li>在Daemon线程中产生的新线程也是Daemon的。 </li>
<li>不要认为所有的应用都可以分配给Daemon来进行服务，比如读写操作或者计算逻辑。</li>
</ol>
<p>因为你不可能知道在所有的User完成之前，Daemon是否已经完成了预期的服务任务。一旦User退出了，可能大量数据还没有来得及读入或写出，计算任务也可能多次运行结果不一样。这对程序是毁灭性的。造成这个结果理由已经说过了：一旦所有User Thread离开了，虚拟机也就退出运行了。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//完成文件输出的守护线程任务  </span></div><div class="line"><span class="keyword">import</span> java.io.*;     </div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;     </div><div class="line">               <span class="keyword">try</span>&#123;     </div><div class="line">                  Thread.sleep(<span class="number">1000</span>);<span class="comment">//守护线程阻塞1秒后运行     </span></div><div class="line">                  File f=<span class="keyword">new</span> File(<span class="string">"daemon.txt"</span>);     </div><div class="line">                  FileOutputStream os=<span class="keyword">new</span> FileOutputStream(f,<span class="keyword">true</span>);     </div><div class="line">                  os.write(<span class="string">"daemon"</span>.getBytes());     </div><div class="line">           &#125;     </div><div class="line">               <span class="keyword">catch</span>(IOException e1)&#123;     </div><div class="line">          e1.printStackTrace();     </div><div class="line">               &#125;     </div><div class="line">               <span class="keyword">catch</span>(InterruptedException e2)&#123;     </div><div class="line">                  e2.printStackTrace();     </div><div class="line">           &#125;     </div><div class="line">    &#125;     </div><div class="line">&#125;     </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo2</span></span>&#123;     </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException     </span></div><div class="line"><span class="function">    </span>&#123;     </div><div class="line">        Runnable tr=<span class="keyword">new</span> TestRunnable();     </div><div class="line">        Thread thread=<span class="keyword">new</span> Thread(tr);     </div><div class="line">                thread.setDaemon(<span class="keyword">true</span>); <span class="comment">//设置守护线程     </span></div><div class="line">        thread.start(); <span class="comment">//开始执行分进程     </span></div><div class="line">    &#125;     </div><div class="line">&#125;     </div><div class="line"><span class="comment">//运行结果：文件daemon.txt中没有"daemon"字符串。</span></div></pre></td></tr></table></figure>
<p>看到了吧，把输入输出逻辑包装进守护线程多么的可怕，字符串并没有写入指定文件。原因也很简单，直到主线程完成，守护线程仍处于1秒的阻塞状态。这个时候主线程很快就运行完了，虚拟机退出，Daemon停止服务，输出操作自然失败了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;  </div><div class="line">    　　Thread t1 = <span class="keyword">new</span> MyCommon();  </div><div class="line">    　　Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyDaemon());  </div><div class="line">    　　t2.setDaemon(<span class="keyword">true</span>); <span class="comment">//设置为守护线程  </span></div><div class="line">    　　t2.start();  </div><div class="line">    　　t1.start();  </div><div class="line">　　&#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCommon</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    　　<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </div><div class="line">        　　System.out.println(<span class="string">"线程1第"</span> + i + <span class="string">"次执行！"</span>);  </div><div class="line">        　　<span class="keyword">try</span> &#123;  </div><div class="line">            　　Thread.sleep(<span class="number">7</span>);  </div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            　　e.printStackTrace();  </div><div class="line">        　　&#125;  </div><div class="line">　　    &#125;  </div><div class="line">　　&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDaemon</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">    　　<span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999L</span>; i++) &#123;  </div><div class="line">        　　System.out.println(<span class="string">"后台线程第"</span> + i + <span class="string">"次执行！"</span>);  </div><div class="line">        　　<span class="keyword">try</span> &#123;  </div><div class="line">            　　Thread.sleep(<span class="number">7</span>);  </div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </div><div class="line">            　　e.printStackTrace();  </div><div class="line">        　　&#125;  </div><div class="line">    　　&#125;  </div><div class="line">　　&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">后台线程第0次执行！</div><div class="line">　　线程1第0次执行！ </div><div class="line">　　线程1第1次执行！ </div><div class="line">　　后台线程第1次执行！ </div><div class="line">　　后台线程第2次执行！ </div><div class="line">　　线程1第2次执行！ </div><div class="line">　　线程1第3次执行！ </div><div class="line">　　后台线程第3次执行！ </div><div class="line">　　线程1第4次执行！ </div><div class="line">　　后台线程第4次执行！ </div><div class="line">　　后台线程第5次执行！ </div><div class="line">　　后台线程第6次执行！ </div><div class="line">　　后台线程第7次执行！ </div><div class="line">　　Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>　　从上面的执行结果可以看出：<br>　　前台线程是保证执行完毕的，后台线程还没有执行完毕就退出了。<br>　　实际上：JRE判断程序是否执行结束的标准是所有的前台执线程行完毕了，而不管后台线程的状态，因此，在使用后台县城时候一定要注意这个问题。 </p>
<p>补充说明：<br>定义：守护线程–也称“服务线程”，在没有用户线程可服务时会自动离开。<br>优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。<br>设置：通过setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为<br>守护线程的方式是在 线程对象创建 之前 用线程对象的setDaemon方法。<br>example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的<br>Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是<br>JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于<br>实时监控和管理系统中的可回收资源。<br>生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且<br>周期性地执行某种任务或等待处理某些发生的事件。也就是<br>说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是<br>什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个<br>或以上的非守护线程则JVM不会退出。</p>
<p>实际应用例子：<br>在使用长连接的comet服务端推送技术中，消息推送线程设置为守护线程，服务于ChatServlet的servlet用户线程，在servlet的init启动消息线程，servlet一旦初始化后，一直存在服务器，servlet摧毁后,消息线程自动退出</p>
<p>容器收到一个Servlet请求，调度线程从线程池中选出一个工作者线程,将请求传递给该工作者线程，然后由该线程来执行Servlet的 service方法。当这个线程正在执行的时候,容器收到另外一个请求,调度线程同样从线程池中选出另一个工作者线程来服务新的请求,容器并不关心这个请求是否访问的是同一个Servlet.当容器同时收到对同一个Servlet的多个请求的时候，那么这个Servlet的service()方法将在多线程中并发执行。<br>Servlet容器默认采用单实例多线程的方式来处理请求，这样减少产生Servlet实例的开销，提升了对请求的响应时间，对于Tomcat可以在server.xml中通过<connector>元素设置线程池中线程的数目。<br>如图：<br><img src="http://img.blog.csdn.net/20130523112456083" alt="image"></connector></p>
<p>为什么要用守护线程？</p>
<p>我们知道静态变量是ClassLoader级别的，如果Web应用程序停止，这些静态变量也会从JVM中清除。但是线程则是JVM级别的，如果你在Web 应用中启动一个线程，这个线程的生命周期并不会和Web应用程序保持同步。也就是说，即使你停止了Web应用，这个线程依旧是活跃的。正是因为这个很隐晦 的问题，所以很多有经验的开发者不太赞成在Web应用中私自启动线程。</p>
<p>如果我们手工使用JDK Timer（Quartz的Scheduler），在Web容器启动时启动Timer，当Web容器关闭时，除非你手工关闭这个Timer，否则Timer中的任务还会继续运行！</p>
<p>下面通过一个小例子来演示这个“诡异”的现象，我们通过ServletContextListener在Web容器启动时创建一个Timer并周期性地运行一个任务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码清单StartCycleRunTask：容器监听器  </span></div><div class="line"><span class="keyword">package</span> com.baobaotao.web;  </div><div class="line"><span class="keyword">import</span> java.util.Date;  </div><div class="line"><span class="keyword">import</span> java.util.Timer;  </div><div class="line"><span class="keyword">import</span> java.util.TimerTask;  </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;  </div><div class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartCycleRunTask</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> Timer timer;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;  </div><div class="line">        <span class="comment">// ②该方法在Web容器关闭时执行  </span></div><div class="line">        System.out.println(<span class="string">"Web应用程序启动关闭..."</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;  </div><div class="line">         <span class="comment">//②在Web容器启动时自动执行该方法  </span></div><div class="line">        System.out.println(<span class="string">"Web应用程序启动..."</span>);  </div><div class="line">        timer = <span class="keyword">new</span> Timer();<span class="comment">//②-1:创建一个Timer，Timer内部自动创建一个背景线程  </span></div><div class="line">        TimerTask task = <span class="keyword">new</span> SimpleTimerTask();  </div><div class="line">        timer.schedule(task, <span class="number">1000L</span>, <span class="number">5000L</span>); <span class="comment">//②-2:注册一个5秒钟运行一次的任务  </span></div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;<span class="comment">//③任务  </span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println((++count)+<span class="string">"execute task..."</span>+(<span class="keyword">new</span> Date()));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在web.xml中声明这个Web容器监听：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">：&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span> </div><div class="line">… </div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.baobaotao.web.StartCycleRunTask<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在Tomcat中部署这个Web应用并启动后，你将看到任务每隔5秒钟执行一次。<br>运行一段时间后，登录Tomcat管理后台，将对应的Web应用（chapter13）关闭。 </p>
<p>转到Tomcat控制台，你将看到虽然Web应用已经关闭，但Timer任务还在我行我素地执行如故——舞台已经拆除，戏子继续表演： </p>
<p>我们可以通过改变清单StartCycleRunTask的代码，在contextDestroyed(ServletContextEvent arg0)中添加timer.cancel()代码，在Web容器关闭后手工停止Timer来结束任务。</p>
<p>Spring为JDK Timer和Quartz Scheduler所提供的TimerFactoryBean和SchedulerFactoryBean能够和Spring容器的生命周期关联，在 Spring容器启动时启动调度器，而在Spring容器关闭时，停止调度器。所以在Spring中通过这两个FactoryBean配置调度器，再从 Spring IoC中获取调度器引用进行任务调度将不会出现这种Web容器关闭而任务依然运行的问题。而如果你在程序中直接使用Timer或Scheduler，如不 进行额外的处理，将会出现这一问题。 </p>
<p><strong>文章转载自</strong><a rel="external nofollow" target="_blank" href="http://blog.csdn.net/shimiso/article/details/8964414">http://blog.csdn.net/shimiso/article/details/8964414</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中使用有返回值的线程]]></title>
      <url>/java-thread-return.html</url>
      <content type="html"><![CDATA[<p>在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable，可以获取线程中的返回值，但是获取线程的返回值的时候，需要注意，我们的方法是异步的，获取返回值的时候，线程任务不一定有返回值，所以，需要判断线程是否结束，才能够去取值。</p>
<a id="more"></a>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/31 11:17&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SLEEP_MILLS = <span class="number">3000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer RUN_SLEEP_MILLS = <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> afterSeconds = SLEEP_MILLS / RUN_SLEEP_MILLS;</div><div class="line"></div><div class="line">    <span class="comment">// 线程池（根据机器的核心数）</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService fixedThreadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testCallable</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Future&lt;String&gt; future = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line"><span class="comment">             * 在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable</span></div><div class="line"><span class="comment">             *</span></div><div class="line"><span class="comment">             * Callable需要实现的是call()方法，而不是run()方法，返回值的类型有Callable的类型参数指定，</span></div><div class="line"><span class="comment">             * Callable只能由ExecutorService.submit() 执行，正常结束后将返回一个future对象。</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            future = fixedThreadPool.submit(() -&gt; &#123;</div><div class="line">                Thread.sleep(SLEEP_MILLS);</div><div class="line">                <span class="keyword">return</span> <span class="string">"The thread returns value."</span>;</div><div class="line">            &#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (future == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line"><span class="comment">             * 获得future对象之前可以使用isDone()方法检测future是否完成，完成后可以调用get()方法获得future的值，</span></div><div class="line"><span class="comment">             * 如果直接调用get()方法，get()方法将阻塞到线程结束，很浪费。</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            <span class="keyword">if</span> (future.isDone()) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(future.get());</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"After "</span> + afterSeconds-- + <span class="string">" seconds,get the future returns value."</span>);</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">new</span> Test().testCallable();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">After 3 seconds,get the future returns value.</div><div class="line">After 2 seconds,get the future returns value.</div><div class="line">After 1 seconds,get the future returns value.</div><div class="line">The thread returns value.</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ol>
<li>需要返回值的线程使用Callable 接口，实现call 方法；</li>
<li>获得future对象之前可以使用isDone()方法检测future是否完成，完成后可以调用get()方法获得future的值，如果直接调用get()方法，get()方法将阻塞到线程结束。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程中线程池源码分析及使用]]></title>
      <url>/java-concurrent-thread-pool.html</url>
      <content type="html"><![CDATA[<p>当Java处理高并发的时候，线程数量特别的多的时候，而且每个线程都是执行很短的时间就结束了，频繁创建线程和销毁线程需要占用很多系统的资源和时间，会降低系统的工作效率。</p>
<p>参考<a rel="external nofollow" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3932921.html">http://www.cnblogs.com/dolphin0520/p/3932921.html</a></p>
<p>由于原文作者使用的API 是1.6 版本的，参考他的文章，做了一些修改成 jdk 1.8版本的方法，涉及到的内容比较多，可能有少许错误。</p>
<p><strong>API : jdk1.8.0_144</strong></p>
<a id="more"></a>
<h3 id="ThreadPoolExecutor类"><a href="#ThreadPoolExecutor类" class="headerlink" title="ThreadPoolExecutor类"></a>ThreadPoolExecutor类</h3><p>Java中线程池主要是并发包<code>java.util.concurrent</code> 中 <code>ThreadPoolExecutor</code>这个类实现的。</p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>我们直接调用它的时候，使用的是它的构造函数，它有四个构造函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</div><div class="line">    <span class="comment">//省略前面的代码</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             threadFactory, defaultHandler);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             Executors.defaultThreadFactory(), handler);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></div><div class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></div><div class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></div><div class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></div><div class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></div><div class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</div><div class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</div><div class="line">            maximumPoolSize &lt; corePoolSize ||</div><div class="line">            keepAliveTime &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</div><div class="line">                <span class="keyword">null</span> :</div><div class="line">                AccessController.getContext();</div><div class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</div><div class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</div><div class="line">        <span class="keyword">this</span>.workQueue = workQueue;</div><div class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</div><div class="line">        <span class="keyword">this</span>.handler = handler;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//省略后面的代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>ThreadPoolExecutor</code>继承了<code>AbstractExecutorService</code>抽象类，并提供了四个构造器，事实上，前面三个构造器都是调用的第四个构造器进行的初始化工作。所以主要研究下第四个构造器的方法。</p>
<p>首先了解下构造器中参数的意思：</p>
<ul>
<li><code>corePoolSize</code>: 核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li>
<li><code>maximumPoolSize</code>: 线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li>
<li><code>keepAliveTime</code>:字面意思就是心跳时间，就是这个线程池中的线程数量大于<code>corePoolSize</code>的时候开始计时，设置空闲线程最多能存活多长时间。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0，它的单位是参数<code>TimeUnit unit</code>；</li>
<li><p><code>unit</code>: 参数<code>keepAliveTime</code>的时间单位，有7种取值，在TimeUnit类中有7种静态属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TimeUnit.DAYS; <span class="comment">//天</span></div><div class="line">TimeUnit.HOURS; <span class="comment">//小时</span></div><div class="line">TimeUnit.MINUTES; <span class="comment">//分钟</span></div><div class="line">TimeUnit.SECONDS; <span class="comment">//秒</span></div><div class="line">TimeUnit.MILLISECONDS; <span class="comment">//毫秒</span></div><div class="line">TimeUnit.MICROSECONDS; <span class="comment">//微妙</span></div><div class="line">TimeUnit.NANOSECONDS; <span class="comment">//纳秒</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>workQueue</code>：一个阻塞队列<code>BlockingQueue</code>，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择，以后再详细学习<code>BlockingQueue</code>阻塞队列使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayBlockingQueue; <span class="comment">//　基于数组的阻塞队列实现</span></div><div class="line">LinkedBlockingQueue; <span class="comment">// 基于链表的阻塞队列</span></div><div class="line">SynchronousQueue; <span class="comment">//一种无缓冲的等待队列</span></div><div class="line">DelayQueue； <span class="comment">// 队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</span></div><div class="line">PriorityBlockingQueue <span class="comment">// 基于优先级的阻塞队列</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>threadFactory</code>: 线程工厂，主要用来创建线程；</p>
</li>
<li><code>handler</code>: 表示当拒绝处理任务时的策略，有以下四种取值：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor.AbortPolicy <span class="comment">//丢弃任务并抛出RejectedExecutionException异常。 </span></div><div class="line">ThreadPoolExecutor.DiscardPolicy <span class="comment">//也是丢弃任务，但是不抛出异常。 </span></div><div class="line">ThreadPoolExecutor.DiscardOldestPolicy <span class="comment">//丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></div><div class="line">ThreadPoolExecutor.CallerRunsPolicy <span class="comment">//由调用线程处理该任务</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ThreadPoolExecutor方法"><a href="#ThreadPoolExecutor方法" class="headerlink" title="ThreadPoolExecutor方法"></a>ThreadPoolExecutor方法</h4><p>首先<code>ThreadPoolExecutor</code>类自己拥有很多方法，用来获取线程池的相关属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p><code>ThreadPoolExecutor</code>继承了<code>AbstractExecutorService</code>这个抽象类，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExecutorService</span> <span class="keyword">implements</span> <span class="title">ExecutorService</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;&#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123; &#125;;</div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">doInvokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line"><span class="function"><span class="params">                           <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</div><div class="line">                                         <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractExecutorService</code>实现了接口 <code>ExecutorService</code>中所有的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</div><div class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</div><div class="line">    Future&lt;?&gt; submit(Runnable task);</div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</div><div class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">        <span class="keyword">throws</span> InterruptedException;</div><div class="line">  </div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</div><div class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line"><span class="function"><span class="params">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ExecutorService</code> 接口继承了 <code>Executor</code>接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出类<code>ThreadPoolExecutor</code>拥有了多少方法。</p>
<p>平时开发中主要使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">execute() // 线程池启动一个线程</div><div class="line">submit() // 线程池启动一个线程，有返回值</div><div class="line">shutdown()  //执行完毕所有等待中的线程，再关闭线程池</div><div class="line">shutdownNow() // 直接关闭，不等待</div></pre></td></tr></table></figure></p>
<ul>
<li><p>execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。</p>
</li>
<li><p>submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果。</p>
</li>
<li><p>shutdown()和shutdownNow()是用来关闭线程池的。</p>
</li>
</ul>
<h3 id="线程池的实现"><a href="#线程池的实现" class="headerlink" title="线程池的实现"></a>线程池的实现</h3><h4 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">* The runState provides the main lifecycle control, taking on values:</div><div class="line">     *</div><div class="line">     *   RUNNING:  Accept <span class="keyword">new</span> tasks and process queued tasks</div><div class="line">     *   SHUTDOWN: Don<span class="string">'t accept new tasks, but process queued tasks</span></div><div class="line"><span class="string">     *   STOP:     Don'</span>t accept <span class="keyword">new</span> tasks, don<span class="string">'t process queued tasks,</span></div><div class="line"><span class="string">     *             and interrupt in-progress tasks</span></div><div class="line"><span class="string">     *   TIDYING:  All tasks have terminated, workerCount is zero,</span></div><div class="line"><span class="string">     *             the thread transitioning to state TIDYING</span></div><div class="line"><span class="string">     *             will run the terminated() hook method</span></div><div class="line"><span class="string">     *   TERMINATED: terminated() has completed</span></div><div class="line"><span class="string">     *</span></div><div class="line"><span class="string">     * The numerical order among these values matters, to allow</span></div><div class="line"><span class="string">     * ordered comparisons. The runState monotonically increases over</span></div><div class="line"><span class="string">     * time, but need not hit each state. The transitions are:</span></div><div class="line"><span class="string">     *</span></div><div class="line"><span class="string">     * RUNNING -&gt; SHUTDOWN</span></div><div class="line"><span class="string">     *    On invocation of shutdown(), perhaps implicitly in finalize()</span></div><div class="line"><span class="string">     * (RUNNING or SHUTDOWN) -&gt; STOP</span></div><div class="line"><span class="string">     *    On invocation of shutdownNow()</span></div><div class="line"><span class="string">     * SHUTDOWN -&gt; TIDYING</span></div><div class="line"><span class="string">     *    When both queue and pool are empty</span></div><div class="line"><span class="string">     * STOP -&gt; TIDYING</span></div><div class="line"><span class="string">     *    When pool is empty</span></div><div class="line"><span class="string">     * TIDYING -&gt; TERMINATED</span></div><div class="line"><span class="string">     *    When the terminated() hook method has completed</span></div><div class="line"><span class="string">     *</span></div><div class="line"><span class="string">     * Threads waiting in awaitTermination() will return when the</span></div><div class="line"><span class="string">     * state reaches TERMINATED.</span></div></pre></td></tr></table></figure>
<p>根据上面的代码文档，，可以清楚的了解到线程池的各种状态，以及在这种状态中能做的事情，状态之间的转变。</p>
<p>如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</p>
<p>如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</p>
<p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>; <span class="comment">//29</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;   <span class="comment">//536870911 目前最大线程容量</span></div><div class="line"></div><div class="line"><span class="comment">// runState is stored in the high-order bits</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 111 00000000000000000000000000000</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS; <span class="comment">// 000 00000000000000000000000000000</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 001 00000000000000000000000000000</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS; <span class="comment">// 010 00000000000000000000000000000 </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS; <span class="comment">// 100 00000000000000000000000000000</span></div><div class="line"></div><div class="line"><span class="comment">// Packing and unpacking ctl</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125; <span class="comment">//最高3位， 状态</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125; <span class="comment">//后29位 ，工作数量</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</div></pre></td></tr></table></figure>
<p>ctl作为ThreadPoolExecutor的核心状态控制字段，包含来两个信息：</p>
<ul>
<li>工作线程总数  <code>workerCount</code></li>
<li>线程池状态 <code>RUNNING</code>、 <code>SHUTDOWN</code>、 <code>STOP</code>、 <code>TIDYING</code>、 <code>TERMINATED</code>。</li>
</ul>
<p>COUNT_BITS 是32减去3 就是29，下面的线程池状态就是－1 到 3 分别向左移动29位。</p>
<p> 如此，int的右侧29位，代表着线程数量，总数可以达到2的29次，29位后的3位代表线程池的状态<br>这样，线程池增加一个线程，只需吧ctl加1即可，而我们也发现实际这个线程池的最高线程数量是2的29次减1。并不是先前我们现象的2的32次减1。这个作者在注释中也提到了，说如果后续需要增大这个值， 可以吧ctl定义成AtomicLong。</p>
<h4 id="任务的执行excute"><a href="#任务的执行excute" class="headerlink" title="任务的执行excute"></a>任务的执行excute</h4><h5 id="属性变量"><a href="#属性变量" class="headerlink" title="属性变量"></a>属性变量</h5><p>了解<code>ThreadPoolExecutor</code>类中其他的一些比较重要成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;              <span class="comment">//任务缓存队列，用来存放等待执行的任务</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();   <span class="comment">//线程池的主要状态锁，对线程池状态（比如线程池大小</span></div><div class="line">                                                              <span class="comment">//、runState等）的改变都要使用这个锁</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();  <span class="comment">//用来存放工作集</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span>  keepAliveTime;    <span class="comment">//线程存货时间   </span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;   <span class="comment">//是否允许为核心线程设置存活时间</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   corePoolSize;     <span class="comment">//核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   maximumPoolSize;   <span class="comment">//线程池最大能容忍的线程数</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   poolSize;       <span class="comment">//线程池中当前的线程数</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler; <span class="comment">//任务拒绝策略</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;   <span class="comment">//线程工厂，用来创建线程</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;   <span class="comment">//用来记录线程池中曾经出现过的最大线程数</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;   <span class="comment">//用来记录已经执行完毕的任务个数</span></div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment"> * Wait condition to support awaitTermination</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition(); <span class="comment">//线程等待时的关闭的条件</span></div><div class="line"></div><div class="line"><span class="comment">/* The context to be used when executing the finalizer, or null. */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc; <span class="comment">// 执行任务完成后使用的内容，或者为null</span></div></pre></td></tr></table></figure></p>
<ul>
<li>largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系。</li>
<li>线程池线程一般正常工作的时候最大线程数为corePoolSize，当任务数量大于corePoolSize的时候，任务就进入等待的队列中，不继续增加线程；当等待队列也放满的时候，不能再往里面装任务的时候，这个时候就需要重新开辟新的线程，来工作了，并且数量要小于<code>maximumPoolSize</code>；如果大于maximumPoolSize，就调用handler方法。</li>
</ul>
<h5 id="执行任务-execute"><a href="#执行任务-execute" class="headerlink" title="执行任务 execute"></a>执行任务 execute</h5><p>使用<code>AbstractExecuorService</code>中的submit 方法，可以执行新的进程，当然submit，最终执行的是execute方法，在<code>ThreadPoolExecutor</code>类中实现了excute方法；</p>
<p>重点研究exexute 方法的实现，这个有点难，网上介绍1.6里面的源码中execute方法已经和我这个1.8版本有很大出入了，大致上应该没有偏离：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Executes the given task sometime in the future.  The task</span></div><div class="line"><span class="comment">     * may execute in a new thread or in an existing pooled thread.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * If the task cannot be submitted for execution, either because this</span></div><div class="line"><span class="comment">     * executor has been shutdown or because its capacity has been reached,</span></div><div class="line"><span class="comment">     * the task is handled by the current &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> command the task to execute</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></div><div class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></div><div class="line"><span class="comment">     *         cannot be accepted for execution</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Proceed in 3 steps:</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></div><div class="line"><span class="comment">         * start a new thread with the given command as its first</span></div><div class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></div><div class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></div><div class="line"><span class="comment">         * threads when it shouldn't, by returning false.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></div><div class="line"><span class="comment">         * to double-check whether we should have added a thread</span></div><div class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></div><div class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></div><div class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></div><div class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></div><div class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></div><div class="line"><span class="comment">         * and so reject the task.</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            c = ctl.get();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">            <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">                reject(command);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</div><div class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">            reject(command);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>执行流程就是：</p>
<ol>
<li>判断提交的任务command是否为null，若是null，则抛出空指针异常；</li>
<li>第二步 ct1.get()；用这个<code>workerCountOf( ct1.get())</code> 计算线程池已经使用多少线程；</li>
<li>当使用的线程数小于核心线程数（corePoolSize），进入addWorker 方法中，这里就是开始进程的地方，进入到最重要的地方，为了这一步不要跳得太远，还是接着看execute方法，后面再看addWorker方法；</li>
<li>当使用的线程数不小于核心线程数（corePoolSize），新来得任务就要进入等待执行的状态；<br><code>if (isRunning(c) &amp;&amp; workQueue.offer(command))</code> 检查线程是否在running 状态和任务是否能够成功进入等待<code>排队</code> ；<br>4.1. 进入队列后，重新检查任务，如果线程池状态不是running状态， ，将回滚任务，拒绝执行任务，这样做主要是因为任务如果还在缓存队列等待的过程中，线程池中断了，就回滚任务，为了安全。<br>4.2. 如果线程中的线程数为0 了，创建一个空线程。</li>
<li>当使用的线程数不小于核心线程数（corePoolSize）的时候，并且添加进入到缓存队列失败后，就会执行<code>else if (!addWorker(command, false))reject(command);</code> 这段代码，意思就是直接开辟一个新的线程去行这个任务，如果执行失败，拒绝策略进行处理这个任务，当然，如果当前线程池中的线程数目达到<code>maximumPoolSize</code>，addWorker方法中也会采取任务拒绝策略进行处理。</li>
</ol>
<h5 id="addWorker-创建线程"><a href="#addWorker-创建线程" class="headerlink" title="addWorker 创建线程"></a>addWorker 创建线程</h5><p>下面将是阅读<code>addWorker</code>的源码，研究线程池怎么添加一个任务的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Checks if a new worker can be added with respect to current</span></div><div class="line"><span class="comment"> * pool state and the given bound (either core or maximum). If so,</span></div><div class="line"><span class="comment"> * the worker count is adjusted accordingly, and, if possible, a</span></div><div class="line"><span class="comment"> * new worker is created and started, running firstTask as its</span></div><div class="line"><span class="comment"> * first task. This method returns false if the pool is stopped or</span></div><div class="line"><span class="comment"> * eligible to shut down. It also returns false if the thread</span></div><div class="line"><span class="comment"> * factory fails to create a thread when asked.  If the thread</span></div><div class="line"><span class="comment"> * creation fails, either due to the thread factory returning</span></div><div class="line"><span class="comment"> * null, or due to an exception (typically OutOfMemoryError in</span></div><div class="line"><span class="comment"> * Thread.start()), we roll back cleanly.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> firstTask the task the new thread should run first (or</span></div><div class="line"><span class="comment"> * null if none). Workers are created with an initial first task</span></div><div class="line"><span class="comment"> * (in method execute()) to bypass queuing when there are fewer</span></div><div class="line"><span class="comment"> * than corePoolSize threads (in which case we always start one),</span></div><div class="line"><span class="comment"> * or when the queue is full (in which case we must bypass queue).</span></div><div class="line"><span class="comment"> * Initially idle threads are usually created via</span></div><div class="line"><span class="comment"> * prestartCoreThread or to replace other dying workers.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> core if true use corePoolSize as bound, else</span></div><div class="line"><span class="comment"> * maximumPoolSize. (A boolean indicator is used here rather than a</span></div><div class="line"><span class="comment"> * value to ensure reads of fresh values after checking other pool</span></div><div class="line"><span class="comment"> * state).</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> true if successful</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</div><div class="line">    retry:</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line"></div><div class="line">        <span class="comment">// Check if queue empty only if necessary.</span></div><div class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</div><div class="line">            ! (rs == SHUTDOWN &amp;&amp;</div><div class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</div><div class="line">               ! workQueue.isEmpty()))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</div><div class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</div><div class="line">                <span class="keyword">break</span> retry;</div><div class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></div><div class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</div><div class="line">                <span class="keyword">continue</span> retry;</div><div class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</div><div class="line">    Worker w = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        w = <span class="keyword">new</span> Worker(firstTask); </div><div class="line">        <span class="keyword">final</span> Thread t = w.thread; <span class="comment">//创建一个线程</span></div><div class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">            mainLock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Recheck while holding lock.</span></div><div class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></div><div class="line">                <span class="comment">// shut down before lock acquired.</span></div><div class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</div><div class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line">                    workers.add(w);</div><div class="line">                    <span class="keyword">int</span> s = workers.size();</div><div class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</div><div class="line">                        largestPoolSize = s;</div><div class="line">                    workerAdded = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (workerAdded) &#123; <span class="comment">//当任务成功添加到线程池，去执行它，改变标志符号。</span></div><div class="line">                t.start();</div><div class="line">                workerStarted = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (! workerStarted)</div><div class="line">            addWorkerFailed(w);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> workerStarted;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看代码注释知道了第二个参数<code>core</code>的意义，当它为<code>true</code>的时候 使用的是线程核心数中的线程，当它为<code>false</code> 的时候，使用的是数量是maximumPoolSize，就是当缓存中的队列也排满的时候。</p>
<p>因此，调用这个 addWorker方法有4种传参的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">addWorker(command, true);</div><div class="line">addWorker(command, false);</div><div class="line">addWorker(null, false);</div><div class="line">addWorker(null, true);</div></pre></td></tr></table></figure></p>
<ol>
<li>第一个：线程数小于corePoolSize时，放一个需要处理的task进worker set。如果worker set长度超过corePoolSize，就返回false。</li>
<li>第二个：当队列被放满时，就尝试将这个新来的task直接放入worker set，而此时worker set 的长度限制是maximumPoolSize。如果线程池也满了的话就返回false。</li>
<li>第三个：放入一个空的task进set，比较的的长度限制是maximumPoolSize。这样一个task为空的worker在线程执行的时候会判断出后去任务队列里拿任务，这样就相当于世创建了一个新的线程，只是没有马上分配任务。</li>
<li>第四个：这个方法就是放一个null的task进set，而且是在小于corePoolSize时。实际使用中是在 prestartCoreThread() 方法。这个方法用来为线程池先启动一个worker等待在那边，如果此时set中的数量已经达到corePoolSize那就返回false，什么也不干。还有是 <code>prestartAllCoreThreads()</code> 方法，准备corePoolSize个worker，初始化线程池中的线程。<br>默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">prestartCoreThread()：初始化一个核心线程；</div><div class="line">prestartAllCoreThreads()：初始化所有核心线程</div></pre></td></tr></table></figure>
</li>
</ol>
<p>前面代码的意思就是验证线程池的状态是不是在<code>RUNNING</code>状态，并且判断，线程数是不是超过了<code>maximumPoolSize</code>，如果超过了最大线程数量，直接返回false，就回到execute 方法最后个<code>if else()</code>代码块中，拒绝任务。</p>
<h5 id="Worker-中主要实现"><a href="#Worker-中主要实现" class="headerlink" title="Worker 中主要实现"></a>Worker 中主要实现</h5><p><code>Worker</code> 这个类很简单，只是继承了一个<code>Runnable</code>接口，然后在<code>run()</code>方法中去执行我们传入的<code>firstTask</code> 主要是其中的run 方法，它的run方法调用的是<code>runWorker</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">    Thread wt = Thread.currentThread();</div><div class="line">    Runnable task = w.firstTask;</div><div class="line">    w.firstTask = <span class="keyword">null</span>;</div><div class="line">    w.unlock(); <span class="comment">// allow interrupts</span></div><div class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</div><div class="line">            w.lock();</div><div class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></div><div class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></div><div class="line">            <span class="comment">// requires a recheck in second case to deal with</span></div><div class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></div><div class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                 (Thread.interrupted() &amp;&amp;</div><div class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class="line">                !wt.isInterrupted())</div><div class="line">                wt.interrupt();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                beforeExecute(wt, task);</div><div class="line">                Throwable thrown = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    task.run();</div><div class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</div><div class="line">                    thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</div><div class="line">                    thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</div><div class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    afterExecute(task, thrown);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                task = <span class="keyword">null</span>;</div><div class="line">                w.completedTasks++;</div><div class="line">                w.unlock();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        completedAbruptly = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        processWorkerExit(w, completedAbruptly);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意当没有可执行的任务的时候，执行<code>getTask()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">        <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line"></div><div class="line">        <span class="comment">// Check if queue empty only if necessary.</span></div><div class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; <span class="comment">//判断线程状态和缓存队列中的线程是否为空</span></div><div class="line">            decrementWorkerCount();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line"></div><div class="line">        <span class="comment">// Are workers subject to culling?</span></div><div class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123; </div><div class="line">            <span class="comment">//也就是说如果线程池处于STOP状态、或者任务队列已为空或者允许为核心池线程设置空闲存活时间并且线程数大于1时，允许worker退出。</span></div><div class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Runnable r = timed ?</div><div class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class="line">                workQueue.take();</div><div class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> r;</div><div class="line">            timedOut = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</div><div class="line">            timedOut = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候看到了，它原来去缓存队列中去取任务，来执行。</p>
<p>并且下面代码块做的任务，作者已经给出注释了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// Recheck while holding lock.</div><div class="line">// Back out on ThreadFactory failure or if</div><div class="line">// shut down before lock acquired.</div></pre></td></tr></table></figure></p>
<p>很容易理解了这段代码。</p>
<p>怎么样开启线程池，并且添加一个任务就到此结束了。</p>
<h4 id="任务拒绝策略"><a href="#任务拒绝策略" class="headerlink" title="任务拒绝策略"></a>任务拒绝策略</h4><p>当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</div><div class="line">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</div><div class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</div></pre></td></tr></table></figure></p>
<h4 id="任务缓存队列及排队策略"><a href="#任务缓存队列及排队策略" class="headerlink" title="任务缓存队列及排队策略"></a>任务缓存队列及排队策略</h4><p>workQueue，任务缓存队列，用来存放等待执行的任务；<br>一个阻塞队列<code>BlockingQueue</code>，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayBlockingQueue; <span class="comment">//　基于数组的阻塞队列实现，此队列创建时必须指定大小；</span></div><div class="line">LinkedBlockingQueue; <span class="comment">// 基于链表的阻塞队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</span></div><div class="line">SynchronousQueue; <span class="comment">//一种无缓冲的等待队列，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</span></div><div class="line">DelayQueue； <span class="comment">// 队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</span></div><div class="line">PriorityBlockingQueue <span class="comment">// 基于优先级的阻塞队列</span></div></pre></td></tr></table></figure></p>
<h4 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h4><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()，其中：</p>
<ul>
<li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务；</li>
<li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。</li>
</ul>
<h4 id="创建线程池并且使用"><a href="#创建线程池并且使用" class="headerlink" title="创建线程池并且使用"></a>创建线程池并且使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/1 11:08&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">5</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</div><div class="line">            queue);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ThreadPoolExecutor executor = TestPool.executor;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</div><div class="line">            MyTask myTask = <span class="keyword">new</span> MyTask(i);</div><div class="line">            executor.execute(myTask);</div><div class="line">            System.out.println(<span class="string">"线程池中线程数目："</span> + executor.getPoolSize() + <span class="string">"，缓存队列中等待执行的任务数目："</span> +</div><div class="line">                    executor.getQueue().size() + <span class="string">"，已执行完的任务数目："</span> + executor.getCompletedTaskCount());</div><div class="line">        &#125;</div><div class="line">        executor.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskNum;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskNum = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"正在执行task "</span> + taskNum);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.currentThread().sleep(<span class="number">4000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"task "</span> + taskNum + <span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">正在执行task 0</div><div class="line">线程池中线程数目：1，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">线程池中线程数目：2，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">线程池中线程数目：3，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">正在执行task 1</div><div class="line">线程池中线程数目：4，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">正在执行task 2</div><div class="line">正在执行task 3</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</div><div class="line">正在执行task 4</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：1，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：2，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：3，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：4，已执行完的任务数目：0</div><div class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">线程池中线程数目：6，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">线程池中线程数目：7，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 10</div><div class="line">线程池中线程数目：8，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 11</div><div class="line">正在执行task 12</div><div class="line">线程池中线程数目：9，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 13</div><div class="line">线程池中线程数目：10，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</div><div class="line">正在执行task 14</div><div class="line">task 0执行完毕</div><div class="line">task 2执行完毕</div><div class="line">task 1执行完毕</div><div class="line">正在执行task 7</div><div class="line">task 3执行完毕</div><div class="line">正在执行task 8</div><div class="line">正在执行task 6</div><div class="line">正在执行task 5</div><div class="line">task 4执行完毕</div><div class="line">task 10执行完毕</div><div class="line">task 11执行完毕</div><div class="line">task 14执行完毕</div><div class="line">task 12执行完毕</div><div class="line">task 13执行完毕</div><div class="line">正在执行task 9</div><div class="line">task 7执行完毕</div><div class="line">task 6执行完毕</div><div class="line">task 5执行完毕</div><div class="line">task 8执行完毕</div><div class="line">task 9执行完毕</div></pre></td></tr></table></figure></p>
<p>从上面的结果可以看出来，当线程池中线程的数目大于5时，便将任务放入任务缓存队列里面，当任务缓存队列满了之后，便创建新的线程。如果上面程序中，将for循环中改成执行20个任务，就会抛出任务拒绝异常了。</p>
<p>例外创建线程的时候建议使用的时<code>Executors</code>类提供的方法来创建线程池：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Executors.newCachedThreadPool(); //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE</div><div class="line">Executors.newSingleThreadExecutor(); //创建容量为1的缓冲池</div><div class="line">Executors.newFixedThreadPool(int corePoolSize); //创建固定容量大小的缓冲池，缓存队列大小为Integer.MAX_VALUE</div><div class="line">Executors.newScheduledThreadPool(int corePoolSize) //创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行</div></pre></td></tr></table></figure></p>
<h3 id="配置线程池的大小"><a href="#配置线程池的大小" class="headerlink" title="配置线程池的大小"></a>配置线程池的大小</h3><p>一般需要根据任务的类型来配置线程池大小：</p>
<ul>
<li><p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1；</p>
</li>
<li><p>如果是IO密集型任务，参考值可以设置为2*NCPU。</p>
</li>
</ul>
<p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>当一个task被安排进来的时候，再确定不是空值后，直接判断在池中已经有工作的线程是否小于corePoolSize，小于则增加一个线程来负责这个task。</li>
<li>如果池中已经工作的线程大于等于corePoolSize，就向队列里存task，而不是继续增加线程。</li>
<li>当workQueue.offer失败时，也就是说task不能再向队列里放的时候，而此时工作线程大于等于corePoolSize，那么新进的task，就要新开一个线程来接待了。</li>
<li>线程池工作机制是这样：<br>  a.如果正在运行的线程数小于 <code>corePoolSize</code>，那就马上创建线程并运行这个任务，而不会进行排队。<br>  b. 如果正在运行的线程数不小于 <code>corePoolSize</code>，那就把这个任务放入队列。<br>  c. 如果队列满了，并且正在运行的线程数小于 <code>maximumPoolSize</code>，那么还是要创建线程并运行这个任务。<br>  d.如果队列满了，并且正在运行的线程数不小于 <code>maximumPoolSize</code>，那么线程池就会调用handler里方法。(采用<code>LinkedBlockingDeque</code>就不会出现队列满情况)。</li>
<li>使用线程池的时候，需要注意先分配好线程池的大小，大约每个线程占用10M内存，就是空间换时间，如果控制的不好，会存在内存溢出的问题，导致机器宕机。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的一些高级特性]]></title>
      <url>/python-features.html</url>
      <content type="html"><![CDATA[<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>定义一个 seasions 列表 ，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions = [&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p>现在需要把前面两个元素放入到 列表 <code>L</code>中，正常想到就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = [seasions[0], seasions[1]]</div><div class="line">&gt;&gt;&gt; L</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure>
<p>进阶一点就是循环取值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = []</div><div class="line">&gt;&gt;&gt; n = 2</div><div class="line">&gt;&gt;&gt; for i in range(n):</div><div class="line">...     L.append(seasions[i])</div><div class="line">...</div><div class="line">&gt;&gt;&gt; L</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure></p>
<p>在python中提供了切片（Slice）操作符，简化了索引范围的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[0:2]</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure></p>
<p>表示从索引为<code>0</code> 开始截取到索引到<code>2</code> 结束，但是不包括索引<code>2</code>的值。</p>
<a id="more"></a>
<p>并且第一个索引0，可以省略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[:2]</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;]</div></pre></td></tr></table></figure></p>
<p>从索引1 开始，截取到索引3 的2个元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[1:3]</div><div class="line">[&apos;summer&apos;, &apos;autumn&apos;]</div></pre></td></tr></table></figure></p>
<p>支持省略第二个参数，截取到结束，<br>从第三个开始截取到结束：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[2:]</div><div class="line">[&apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p>Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[-1:]</div><div class="line">[&apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions[-2:]</div><div class="line">[&apos;autumn&apos;, &apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions[-3:]</div><div class="line">[&apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p>操作（0，99）的数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; l = list(range(100))</div><div class="line">&gt;&gt;&gt; l</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,</div><div class="line">48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,</div><div class="line"> 94, 95, 96, 97, 98, 99]</div><div class="line">&gt;&gt;&gt; l[:10]</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</div><div class="line">&gt;&gt;&gt; l[-10:]</div><div class="line">[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]</div><div class="line">&gt;&gt;&gt; l[50:60]</div><div class="line">[50, 51, 52, 53, 54, 55, 56, 57, 58, 59]</div><div class="line">&gt;&gt;&gt; l[50:60:2]</div><div class="line">[50, 52, 54, 56, 58]</div><div class="line">&gt;&gt;&gt; l[::10]</div><div class="line">[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]</div><div class="line">&gt;&gt;&gt; l[:]</div><div class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,</div><div class="line">48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,</div><div class="line"> 94, 95, 96, 97, 98, 99]</div></pre></td></tr></table></figure></p>
<p>第三个参数是每隔几个元素取出一个值。</p>
<p><code>l[:]</code>复制这个数组。</p>
<p><code>字符串</code>也支持切片操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = &apos;asdfg&apos;</div><div class="line">&gt;&gt;&gt; s[:2]</div><div class="line">&apos;as&apos;</div><div class="line">&gt;&gt;&gt; s[-5::2]</div><div class="line">&apos;adg&apos;</div></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><h4 id="迭代一个list"><a href="#迭代一个list" class="headerlink" title="迭代一个list"></a>迭代一个list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for i in seasions:</div><div class="line">...     print(i)</div><div class="line">...</div><div class="line">spring</div><div class="line">summer</div><div class="line">autumn</div><div class="line">winter</div></pre></td></tr></table></figure>
<h4 id="迭代一个dict"><a href="#迭代一个dict" class="headerlink" title="迭代一个dict"></a>迭代一个<code>dict</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</div><div class="line">&gt;&gt;&gt; for key in d:</div><div class="line">...     print(key)</div><div class="line">...</div><div class="line">a</div><div class="line">c</div><div class="line">b</div></pre></td></tr></table></figure>
<p>默认情况下，<code>dict</code>迭代的是<code>key</code>。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p>
<h4 id="迭代一个字符串"><a href="#迭代一个字符串" class="headerlink" title="迭代一个字符串"></a>迭代一个字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for i in s:</div><div class="line">...     print(i)</div><div class="line">...</div><div class="line">a</div><div class="line">s</div><div class="line">d</div><div class="line">f</div><div class="line">g</div></pre></td></tr></table></figure>
<h4 id="迭代二维数组"><a href="#迭代二维数组" class="headerlink" title="迭代二维数组"></a>迭代二维数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; for x, y in [(1, 1), (2, 4), (3, 9)]:</div><div class="line">...     print(x, y)</div><div class="line">...</div><div class="line">1 1</div><div class="line">2 4</div><div class="line">3 9</div></pre></td></tr></table></figure>
<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>列表生成式即<code>List Comprehensions</code>，是Python内置的非常简单却强大的可以用来创建list的生成式。</p>
<p>生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; list(range(1, 11))</div><div class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</div></pre></td></tr></table></figure></p>
<p>如果要生成[1x1, 2x2, 3x3, …, 10x10]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</div><div class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</div></pre></td></tr></table></figure></p>
<p>for循环后面还可以加上if判断，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</div><div class="line">[4, 16, 36, 64, 100]</div></pre></td></tr></table></figure></p>
<p>还可以使用两层循环，可以生成全排列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [m + n for m in &apos;ABC&apos; for n in &apos;XYZ&apos;]</div><div class="line">[&apos;AX&apos;, &apos;AY&apos;, &apos;AZ&apos;, &apos;BX&apos;, &apos;BY&apos;, &apos;BZ&apos;, &apos;CX&apos;, &apos;CY&apos;, &apos;CZ&apos;]</div></pre></td></tr></table></figure></p>
<p>for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</div><div class="line">&gt;&gt;&gt; for k, v in d.items():</div><div class="line">...     print(k, &apos;=&apos;, v)</div><div class="line">...</div><div class="line">y = B</div><div class="line">x = A</div><div class="line">z = C</div></pre></td></tr></table></figure></p>
<p>使用列表生成式，简化生成一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;x&apos;: &apos;A&apos;, &apos;y&apos;: &apos;B&apos;, &apos;z&apos;: &apos;C&apos; &#125;</div><div class="line">&gt;&gt;&gt; [k + &apos;=&apos; + v for k, v in d.items()]</div><div class="line">[&apos;y=B&apos;, &apos;x=A&apos;, &apos;z=C&apos;]</div></pre></td></tr></table></figure></p>
<p>把一个list中所有的字符串变成大写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; [s.upper() for s in seasions]</div><div class="line">[&apos;SPRING&apos;, &apos;SUMMER&apos;, &apos;AUTUMN&apos;, &apos;WINTER&apos;]</div></pre></td></tr></table></figure></p>
<p>一个既有字符串又有整数的list ，怎么将它的字符串都变成小写，因为整数类型没有<code>lower</code>方法，直接调用会报错：<br>在列表生成式的循环后面加上if 判断<code>isinstance(s, str)</code>，判断是否是需要的类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; L = [&apos;Hello&apos;, &apos;World&apos;, 18, &apos;Apple&apos;, None]</div><div class="line">&gt;&gt;&gt; [s.lower() for s in L if isinstance(s, str)]</div><div class="line">[&apos;hello&apos;, &apos;world&apos;, &apos;apple&apos;]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python学习之路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python中函数]]></title>
      <url>/python-function.html</url>
      <content type="html"><![CDATA[<h3 id="python-中内置函数"><a href="#python-中内置函数" class="headerlink" title="python 中内置函数"></a>python 中内置函数</h3><p>python 中有很多内置函数，参考网站</p>
<p><a rel="external nofollow" target="_blank" href="http://docs.python.org/3/library/functions.html">http://docs.python.org/3/library/functions.html</a></p>
<p>在调用函数的时候，如果参数<code>数量</code>传入错误，会报错<code>TypeError</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; abs(-2)</div><div class="line">2</div><div class="line">&gt;&gt;&gt; abs(-2, 3)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: abs() takes exactly one argument (2 given)</div></pre></td></tr></table></figure>
<p>在调用<code>abs</code> 函数的时候传入两个参数，会报错<code>TypeError</code>，直接提示，abs() 只能有一个参数。</p>
<a id="more"></a>
<p>如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报<code>TypeError</code>的错误，并且给出错误信息：<code>str</code>是错误的参数类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; abs(&apos;a&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: bad operand type for abs(): &apos;str&apos;</div></pre></td></tr></table></figure>
<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>python 中内置函数包括数据类型转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; int(3.21)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; int(&apos;3&apos;)</div><div class="line">3</div><div class="line">&gt;&gt;&gt; int(&apos;3.21&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: invalid literal for int() with base 10: &apos;3.21&apos;</div></pre></td></tr></table></figure></p>
<p>注意的是int()没有做这个转换了字符串成float再转int，直接会报错无效参数。<br>只能这样转了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; int(float(&apos;3.21&apos;))</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p><strong>任何类型都可以转成str</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; str(True)</div><div class="line">&apos;True&apos;</div><div class="line">&gt;&gt;&gt; str(False)</div><div class="line">&apos;False&apos;</div><div class="line">&gt;&gt;&gt; str(321)</div><div class="line">&apos;321&apos;</div><div class="line">&gt;&gt;&gt; str([21,34,2])</div><div class="line">&apos;[21, 34, 2]&apos;</div><div class="line">&gt;&gt;&gt; str(&#123;&quot;a&quot;:21, &quot;b&quot;:(1, 2)&#125;)</div><div class="line">&quot;&#123;&apos;a&apos;: 21, &apos;b&apos;: (1, 2)&#125;&quot;</div></pre></td></tr></table></figure></p>
<p>可以将一个变量赋值为一个函数名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = int</div><div class="line">&gt;&gt;&gt; a(&apos;2&apos;)</div><div class="line">2</div></pre></td></tr></table></figure></p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p>
<p>写一个根据月份返回季节的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据月份返回季节</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_seasion_by_month</span><span class="params">(month)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(month, int):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="number">2</span> &lt;= month &lt;= <span class="number">4</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'spring'</span></div><div class="line">    <span class="keyword">elif</span> <span class="number">5</span> &lt;= month &lt;= <span class="number">7</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'summer'</span></div><div class="line">    <span class="keyword">elif</span> <span class="number">8</span> &lt;= month &lt;= <span class="number">10</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'autumn'</span></div><div class="line">    <span class="keyword">elif</span> <span class="number">11</span> &lt;= month &lt;= <span class="number">12</span> <span class="keyword">or</span> month == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'winter'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'invalid “month” value!'</span></div></pre></td></tr></table></figure></p>
<p>使用python 解释器运行我们自定义的函数的时候，需要引入我们的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from test import get_seasion_by_month</div><div class="line">&gt;&gt;&gt; get_seasion_by_month(10)</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>引入了自定义的方法就可以调用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; get_seasion_by_month(10)</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt; get_seasion_by_month(&apos;10&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;F:\JAVA-program\rywis-fastdfs\rywis-fastdfs\learn\test.py&quot;, line 3, in get_seasion_by_month</div><div class="line">    raise TypeError(&apos;bad operand type&apos;)</div><div class="line">TypeError: bad operand type</div><div class="line">&gt;&gt;&gt; get_seasion_by_month(13)</div><div class="line">&apos;invalid “month” value!&apos;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<ol>
<li>第一步：输入月份<code>10</code> ，返回<code>autumn</code>，符合预期。</li>
<li>第二步：输入字符串<code>“10”</code>，返回我预先设置<code>TypeError</code>错误信息<code>bad operand type</code>，因为我设置了参数类型为 <code>int</code>，不能使用其他的类型，符合期望。</li>
<li>第三步：输入<code>13</code> ，返回无效字符串的提示。</li>
</ol>
<h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><p>写一个返回矩形周长和面积的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取矩形的周长和面积</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rectangle_perimeter_area</span><span class="params">(width, height)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(width, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'"width" is bad operand type'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(height, (int, float)):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'"height" is bad operand type'</span>)</div><div class="line">    perimeter = <span class="number">2</span> * (width + height)</div><div class="line">    area = width * height</div><div class="line">    <span class="keyword">return</span> perimeter, area</div></pre></td></tr></table></figure></p>
<p>使用解释器 运行它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from test import rectangle_perimeter_area</div><div class="line">&gt;&gt;&gt; rectangle_perimeter_area(4, 6)</div><div class="line">(20, 24)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<p>可以看出来，它返回的是一个<code>tuple</code> 数组。</p>
<h4 id="参数检查"><a href="#参数检查" class="headerlink" title="参数检查"></a>参数检查</h4><p>上面写的函数中，写了一个参数类型的检查：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if not isinstance(month, int):</div><div class="line">        raise TypeError(&apos;bad operand type&apos;)</div></pre></td></tr></table></figure></p>
<p>可以控制参数的类型，错误参数类型制定它抛出错误。</p>
<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>python 中函数参数有多种写法。</p>
<h4 id="函数的默认参数值"><a href="#函数的默认参数值" class="headerlink" title="函数的默认参数值"></a>函数的默认参数值</h4><p>写一个打印个人信息的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span> + name)</div><div class="line">    print(<span class="string">'age:'</span> + age)</div></pre></td></tr></table></figure></p>
<p>打印姓名，年龄。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;wuwii&apos;, &apos;23&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div></pre></td></tr></table></figure></p>
<p>现在需要个人信息要加入city 这一项信息，如果直接加入一个参数city 导致之前使用这个函数的方法都需要重新改，因为python 一个函数名只能有一个，不像java那样重载函数，这个时候就需要默认参数了，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, city=<span class="string">'WuHan'</span>)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span> + name)</div><div class="line">    print(<span class="string">'age:'</span> + age)</div><div class="line">    print(<span class="string">'city:'</span> + city)</div></pre></td></tr></table></figure></p>
<p>现在执行这个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;wuwii&apos;, &apos;23&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div><div class="line">city:WuHan</div><div class="line">&gt;&gt;&gt; person(&apos;wuwii&apos;, &apos;23&apos;, &apos;HuangGang&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div><div class="line">city:HuangGang</div></pre></td></tr></table></figure></p>
<p>当不输入参数<code>city</code>的时候，函数使用的默认参数，如果传入<code>city</code>参数，将使用输入的参数。</p>
<h5 id="当默认参数是一个可变对象"><a href="#当默认参数是一个可变对象" class="headerlink" title="当默认参数是一个可变对象"></a>当默认参数是一个可变对象</h5><p>默认参数有一个特例，就是，参数默认值是一个可变对象的时候，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>正常调用不会有问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add_end([1, 2, 3])</div><div class="line">[1, 2, 3, &apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end([&apos;x&apos;, &apos;y&apos;, &apos;z&apos;])</div><div class="line">[&apos;x&apos;, &apos;y&apos;, &apos;z&apos;, &apos;END&apos;]</div></pre></td></tr></table></figure></p>
<p>当使用默认参数的时候：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;, &apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;, &apos;END&apos;, &apos;END&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>原因</strong>：Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</p>
<p>所以一般的时候，都使用不可变的对象作为默认参数，可以尽量避免这种问题。</p>
<p>这个问题的解决就是，调用默认的函数的时候，初始化可变的参数就行了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        L = []</div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>现在就不会有问题了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;]</div><div class="line">&gt;&gt;&gt; add_end()</div><div class="line">[&apos;END&apos;]</div></pre></td></tr></table></figure></p>
<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>
<p>所以Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_one</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> args:</div><div class="line">        print(<span class="string">'值为：'</span> + value)</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person_one(&apos;wuwii&apos;, &apos;23&apos;, &apos;Wuhan&apos;)</div><div class="line">值为：wuwii</div><div class="line">值为：23</div><div class="line">值为：Wuhan</div></pre></td></tr></table></figure></p>
<p>在参数实在很多的时候，这样直接输入参数调用函数很不美观，可以直接将参数放在<code>list</code>或者<code>tuple</code>中，只要在函数调用参数前面加个<code>a</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = [&apos;wuwii&apos;, &apos;23&apos;, &apos;WuHan&apos;]</div><div class="line">&gt;&gt;&gt; person_one(*a)</div><div class="line">值为：wuwii</div><div class="line">值为：23</div><div class="line">值为：WuHan</div></pre></td></tr></table></figure></p>
<p><code>*a</code>表示将<code>list</code> <code>a</code>当作函数<code>person_one</code>的参数。</p>
<h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_two</span><span class="params">(**kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span> + kw[<span class="string">'name'</span>])</div><div class="line">    print(<span class="string">'age:'</span> + kw[<span class="string">'age'</span>])</div><div class="line">    print(<span class="string">'city:'</span> + kw[<span class="string">'city'</span>])</div></pre></td></tr></table></figure>
<p>执行结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person_two(name=&apos;wuwii&apos;, age=&apos;23&apos;, city=&apos;WuHan&apos;)</div><div class="line">name:wuwii</div><div class="line">age:23</div><div class="line">city:WuHan</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h4><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。</p>
<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure></p>
<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>
<p>调用方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;Jack&apos;, 24, city=&apos;Beijing&apos;, job=&apos;Engineer&apos;)</div><div class="line">Jack 24 Beijing Engineer</div></pre></td></tr></table></figure></p>
<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div></pre></td></tr></table></figure></p>
<p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;Jack&apos;, 24, &apos;Beijing&apos;, &apos;Engineer&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">TypeError: person() takes 2 positional arguments but 4 were given</div></pre></td></tr></table></figure></p>
<p>由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但<code>person()</code>函数仅接受2个位置参数。</p>
<p>命名关键字参数可以有缺省值，从而简化调用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city=<span class="string">'Beijing'</span>, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure>
<p>由于命名关键字参数city具有默认值，调用时，可不传入city参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; person(&apos;Jack&apos;, 24, job=&apos;Engineer&apos;)</div><div class="line">Jack 24 Beijing Engineer</div></pre></td></tr></table></figure></p>
<h4 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h4><p>在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></div><div class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</div></pre></td></tr></table></figure>
<p>最神奇的是通过一个tuple和dict，你也可以调用上述函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; args = (1, 2, 3, 4)</div><div class="line">&gt;&gt;&gt; kw = &#123;&apos;d&apos;: 99, &apos;x&apos;: &apos;#&apos;&#125;</div><div class="line">&gt;&gt;&gt; f1(*args, **kw)</div><div class="line">a = 1 b = 2 c = 3 args = (4,) kw = &#123;&apos;d&apos;: 99, &apos;x&apos;: &apos;#&apos;&#125;</div><div class="line">&gt;&gt;&gt; args = (1, 2, 3)</div><div class="line">&gt;&gt;&gt; kw = &#123;&apos;d&apos;: 88, &apos;x&apos;: &apos;#&apos;&#125;</div><div class="line">&gt;&gt;&gt; f2(*args, **kw)</div><div class="line">a = 1 b = 2 c = 3 d = 88 kw = &#123;&apos;x&apos;: &apos;#&apos;&#125;</div></pre></td></tr></table></figure></p>
<p>所以，对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</p>
<h3 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h3><p>有时候，我们写一个函数，暂时不知道怎么处理，但是在python中，什么语法都不写的话，会报错；写一个空函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blank</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>这样代码就可以正常跑起来了。</p>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>写一个一个阶乘函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fact(1)</div><div class="line">1</div><div class="line">&gt;&gt;&gt; fact(5)</div><div class="line">120</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>定义函数时，需要确定函数名和参数个数；</li>
<li>如果有必要，可以先对参数的数据类型做检查；</li>
<li>函数体内部可以用return随时返回函数结果；</li>
<li>行完毕也没有return语句时，自动return None。</li>
<li>以同时返回多个值，但其实就是一个<code>tuple</code>。</li>
<li>要注意定义可变参数和关键字参数的语法：<br>6.1. <code>*args</code>是可变参数，args接收的是一个tuple；<br>6.2. <code>**kw</code>是关键字参数，kw接收的是一个dict。</li>
<li>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</li>
<li>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</li>
<li>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python学习之路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最想的人是你，最不想打扰的也是你]]></title>
      <url>/donot-trouble.html</url>
      <content type="html"><![CDATA[<p>今天是周日，本来一直想着的是她还欠我一餐饭，什么时候能给我，虽然我要不是一餐饭，只是想去见见她，但是想到最近打扰她的时候，没怎么想和我聊天了；我这个人就是这么的多想的吧，感觉是太打扰到了你了，我想的也是很可笑的很啊，我是个这么慢热的人，平时根本不愿意多说话的人，哪怕是一句晚安，现在，感觉多说了几年的话。在想以后是不是要少活好多年了。</p>
<p>忍不住下午，还是去她的学校了，但是还是忍住了没去打扰她，我想我这个人很烦人的吧，还是把愉快的周末留给她自己，不要去打扰了，随便在学校逛了逛，就忍不住的逃离了，其实我的内心还是有些害怕的，真是像个做了亏心事的小偷啊，我这个人这个毛病看来今生没希望改过来了，搞不好要单一辈子了。但是我真的感觉做不到，她总是很忙的样子，实在是怕做错了什么，导致朋友也做不成，我这个人就是适合想念吧，不要把我一点想念的空间也给剥夺了，也不想让她知道我在这里，在这里关心她。</p>
<p>感觉我这个是有点作了吧，很认真的想去吸引她，关心她。也有过动摇，但是还是在想她，还是执念让我坚持吧，不是坚持，给她发的消息，人很开心，等着也高兴，就像是做了什么有意义的事情了，但是有时候也很犹豫，怕她要是在忙了，打扰到了别人，该多不好，人总是有点自私的，说不打扰，我就不去打扰啊，时刻多看两个笑话，给她发过去，要是能到到回应就很好了，然而很多时候没有，我想可能是打扰到她了吧，可能她不是那么喜欢看笑话啊，我也不知道她喜欢着什么吧，虽然很费劲，但是不能给她制造不开心得事情，所以时刻都得忍着点吧。</p>
<p>乐此不疲的去做些事情吧，可能我跟她之间还没开始过，就存在了太多的空白格，不太可能填补上，但是总是想试一试，不管是不甘还是执念吧，我只是关心，不放心的是她。</p>
<p>现在我想可能真的打扰到了，一次次打扰只会消耗一个人的热情，最好的就是舍不得打扰了，未来要做的就是要改掉这个坏毛病。</p>
<p>想，却不去打扰；念，却不去纠缠；只为祝福和守候。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python中集合列表和dict、set]]></title>
      <url>/python-list.html</url>
      <content type="html"><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>pyhon 中有两种集合列表，一个是list，一个是tuple。</p>
<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p><strong>展示四季：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions = [&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>得到list长度</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; len(seasions)</div><div class="line">4</div></pre></td></tr></table></figure></p>
<p><strong>索引访问：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[0]</div><div class="line">&apos;spring&apos;</div><div class="line">&gt;&gt;&gt; seasions[1]</div><div class="line">&apos;summer&apos;</div><div class="line">&gt;&gt;&gt; seasions[2]</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt; seasions[3]</div><div class="line">&apos;winter&apos;</div><div class="line">&gt;&gt;&gt; seasions[4]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: list index out of range</div><div class="line">&gt;&gt;&gt; seasions[-1]</div><div class="line">&apos;winter&apos;</div><div class="line">&gt;&gt;&gt; seasions[-2]</div><div class="line">&apos;autumn&apos;</div><div class="line">&gt;&gt;&gt; seasions[-3]</div><div class="line">&apos;summer&apos;</div><div class="line">&gt;&gt;&gt; seasions[-4]</div><div class="line">&apos;spring&apos;</div><div class="line">&gt;&gt;&gt; seasions[-5]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: list index out of range</div></pre></td></tr></table></figure></p>
<p>可以看出索引是从0开始的，并且支持倒序索引，超出索引范围的话，会抛出错误<code>IndexError: list index out of range</code>。</p>
<p>list 是一个可变的有序列表，可以加入删除元素：</p>
<p><strong>在尾部添加元素<code>append(dom)</code>：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.append(&apos;once again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;once again&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>要删除list末尾的元素，用<code>pop()</code>方法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.pop()</div><div class="line">&apos;once again&apos;</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>支持在任意位置插入一个元素</strong>，例：在第二个位置插入 “again” ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.insert(1, &apos;again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;]</div><div class="line">&gt;&gt;&gt; seasions.insert(10, &apos;again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;]</div><div class="line">&gt;&gt;&gt; seasions.insert(-10, &apos;again&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;again&apos;, &apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div></pre></td></tr></table></figure></p>
<p>可以看出，超出索引范围会加在末尾位置，如果索引是负数的话，则在列表头插入。</p>
<p><strong>也可以删除指定位置的元素</strong><br>删除索引位置为1 的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions.pop(10)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IndexError: pop index out of range</div><div class="line">&gt;&gt;&gt; seasions.pop(0)</div><div class="line">&apos;again&apos;</div></pre></td></tr></table></figure></p>
<p><strong>修改列表中指定位置的元素的值</strong><br>将索引为 1 的 ‘again’ 改为 True：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;again&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div><div class="line">&gt;&gt;&gt; seasions[1] = &apos;once&apos;</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, True, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div></pre></td></tr></table></figure></p>
<p><strong>python 中列表中可以同时存任何类型的数据：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, &apos;once&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div><div class="line">&gt;&gt;&gt; seasions.insert(1, [&apos;heart&apos;, &apos;warm&apos;])</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">[&apos;spring&apos;, [&apos;heart&apos;, &apos;warm&apos;], &apos;once&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;, &apos;again&apos;, &apos;again&apos;]</div></pre></td></tr></table></figure></p>
<h5 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h5><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions = (&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">(&apos;spring&apos;, &apos;summer&apos;, &apos;autumn&apos;, &apos;winter&apos;)</div></pre></td></tr></table></figure>
<p>tuple 是不可变的，定义下来就能修改它的值，但是可以取出它的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; seasions[1]</div><div class="line">&apos;summer&apos;</div></pre></td></tr></table></figure></p>
<p><strong>定义一个空的 tuple</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; emptyTuple = ()</div><div class="line">&gt;&gt;&gt; emptyTuple</div><div class="line">()</div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是定义一个只有一个元素的 tuple 列表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; t = (1)</div><div class="line">&gt;&gt;&gt; t</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>定义的不是tuple，是1这个数！这是因为括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1。</p>
<p>所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; t = (1,)</div><div class="line">&gt;&gt;&gt; t</div><div class="line">(1,)</div></pre></td></tr></table></figure>
<p><strong>当 tuple 列表中有一个 引用类型的时候：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; l = [&apos;wuwii&apos;, &apos;trees&apos;]</div><div class="line">&gt;&gt;&gt; seasions = (&apos;spring&apos;, l)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">(&apos;spring&apos;, [&apos;wuwii&apos;, &apos;trees&apos;])</div><div class="line">&gt;&gt;&gt; l.append(&apos;gentle&apos;)</div><div class="line">&gt;&gt;&gt; seasions</div><div class="line">(&apos;spring&apos;, [&apos;wuwii&apos;, &apos;trees&apos;, &apos;gentle&apos;])</div></pre></td></tr></table></figure>
<p>当list 引用的内容发生改变， tuple 的值看起来确实变了。</p>
<p>但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向’a’，就不能改成指向’b’，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p>
<h4 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h4><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p>
<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">names = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;]</div><div class="line">scores = [95, 75, 85]</div></pre></td></tr></table></figure></p>
<p>给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。</p>
<p>如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d = &#123;&apos;Michael&apos;: 95, &apos;Bob&apos;: 75, &apos;Tracy&apos;: 85&#125;</div><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</div><div class="line">95</div></pre></td></tr></table></figure>
<p>为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。</p>
<p>第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。</p>
<p>dict就是第二种实现方式，给定一个名字，比如’Michael’，dict在内部就可以直接计算出Michael对应的存放成绩的“页码”，也就是95这个数字存放的内存地址，直接取出来，所以速度非常快。</p>
<p>你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。</p>
<h5 id="修改value"><a href="#修改value" class="headerlink" title="修改value"></a>修改value</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</div><div class="line">95</div><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;] = 100</div><div class="line">&gt;&gt;&gt; d[&apos;Michael&apos;]</div><div class="line">100</div></pre></td></tr></table></figure>
<h5 id="查找key"><a href="#查找key" class="headerlink" title="查找key"></a>查找key</h5><p>取值的时候，如果 dict 中没有这个 key ，会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d[&apos;notget&apos;]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">KeyError: &apos;notget&apos;</div></pre></td></tr></table></figure></p>
<p>避免key不存在的错误，有两种办法：</p>
<ol>
<li>通过in判断key是否存在：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;notget&apos; in d</div><div class="line">False</div></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看出它返回的是布尔值。</p>
<ol>
<li>通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d.get(&apos;notget&apos;)</div><div class="line">&gt;&gt;&gt; d.get(&apos;Michael&apos;)</div><div class="line">100</div><div class="line">&gt;&gt;&gt; d.get(&apos;Michael&apos;, 99)</div><div class="line">100</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意</strong>：返回None的时候Python的交互式命令行不显示结果。</p>
<h5 id="删除KEY"><a href="#删除KEY" class="headerlink" title="删除KEY"></a>删除KEY</h5><p>删除 ‘Michael’ ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; d.pop(&apos;Michael&apos;)</div><div class="line">100</div><div class="line">&gt;&gt;&gt; d</div><div class="line">&#123;&apos;Bob&apos;: 75, &apos;Tracy&apos;: 85&#125;</div></pre></td></tr></table></figure></p>
<p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p>
<p>dict 的key 值只能存放<strong>不可变的对象</strong> </p>
<p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。</p>
<p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key。</p>
<p><strong>和list比较，dict有以下几个特点</strong>：</p>
<ul>
<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>
<li>需要占用大量的内存，内存浪费多。</li>
</ul>
<p><strong>而list相反</strong>：</p>
<ul>
<li>查找和插入的时间随着元素的增加而增加；</li>
<li>占用空间小，浪费内存很少。</li>
</ul>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = set([1, 1, 2, 3])</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3&#125;</div></pre></td></tr></table></figure>
<p>虽然初始化给了两个<code>1</code>，但是存储到set 中只有一个1，没有重复的值。</p>
<h5 id="add-key-添加元素"><a href="#add-key-添加元素" class="headerlink" title="add(key) 添加元素"></a>add(key) 添加元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(5)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 5&#125;</div><div class="line">&gt;&gt;&gt; s.add(3)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 5&#125;</div></pre></td></tr></table></figure>
<p>可以添加key，重复的key 会被过滤。</p>
<h5 id="remove-key-删除元素"><a href="#remove-key-删除元素" class="headerlink" title="remove(key) 删除元素"></a>remove(key) 删除元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 5&#125;</div><div class="line">&gt;&gt;&gt; s.remove(5)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3&#125;</div></pre></td></tr></table></figure>
<p>删除key，没有的key 会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.remove(4)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">KeyError: 4</div></pre></td></tr></table></figure></p>
<p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s1 = set([1, 3, 4])</div><div class="line">&gt;&gt;&gt; s1 &amp; s</div><div class="line">&#123;1, 3&#125;</div><div class="line">&gt;&gt;&gt; s1 | s</div><div class="line">&#123;1, 2, 3, 4&#125;</div></pre></td></tr></table></figure>
<h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><ul>
<li>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</li>
<li>set()接收一个参数，就是list或tuple或者其他可迭代对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">L = [x, y, z]</div><div class="line">s = set(L)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是L中的元素x、y、z有任何一个可变set就会报错。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python学习之路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下调试Hadoop集群报错Failed to find winutils.exe]]></title>
      <url>/hadoop-miss-winutils.html</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在windows 环境使用<code>Java</code>下调试远程虚拟机中的Hadoop集群报错，问题很奇怪，说是少了 <code>winutils.exe</code> 文件，而且少了<code>HADOOP_HOME</code> 的环境变量；我是部署在虚拟机CentOS 7 上的集群，难道Windows 上使用 它的Hadoop还需要自己安装环境，事实上，是真的。。</p>
<a id="more"></a>
<figure class="highlight console"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">10:17:34,377 DEBUG Shell:675 - Failed to find winutils.exe</div><div class="line">java.io.FileNotFoundException: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset. -see https://wiki.apache.org/hadoop/WindowsProblems</div><div class="line">	at org.apache.hadoop.util.Shell.fileNotFoundException(Shell.java:528)</div><div class="line">	at org.apache.hadoop.util.Shell.getHadoopHomeDir(Shell.java:549)</div><div class="line">	at org.apache.hadoop.util.Shell.getQualifiedBin(Shell.java:572)</div><div class="line">	at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:669)</div><div class="line">	at org.apache.hadoop.util.StringUtils.&lt;clinit&gt;(StringUtils.java:79)</div><div class="line">	at org.apache.hadoop.fs.FileSystem$Cache$Key.&lt;init&gt;(FileSystem.java:2972)</div><div class="line">	at org.apache.hadoop.fs.FileSystem$Cache$Key.&lt;init&gt;(FileSystem.java:2967)</div><div class="line">	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2829)</div><div class="line">	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:389)</div><div class="line">	at com.devframe.util.HdfsUtils.mkdir(HdfsUtils.java:43)</div><div class="line">	at com.devframe.util.HdfsUtilsTest.testMkdir(HdfsUtilsTest.java:32)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</div><div class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</div><div class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</div><div class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</div><div class="line">	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)</div><div class="line">	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)</div><div class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</div><div class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)</div><div class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)</div><div class="line">	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</div><div class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</div><div class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</div><div class="line">	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</div><div class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</div><div class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)</div><div class="line">	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</div><div class="line">	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</div><div class="line">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</div><div class="line">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</div><div class="line">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</div><div class="line">Caused by: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset.</div><div class="line">	at org.apache.hadoop.util.Shell.checkHadoopHomeInner(Shell.java:448)</div><div class="line">	at org.apache.hadoop.util.Shell.checkHadoopHome(Shell.java:419)</div><div class="line">	at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:496)</div><div class="line">	... 31 more</div></pre></td></tr></table></figure>
<h3 id="寻找问题"><a href="#寻找问题" class="headerlink" title="寻找问题"></a>寻找问题</h3><p>百度了下，找到了问题：</p>
<blockquote><p><strong>Problems running Hadoop on Windows</strong></p>
<p>Hadoop requires native libraries on Windows to work properly -that includes to access the file:// filesystem, where Hadoop uses some Windows APIs to implement posix-like file access permissions.</p>
<p>This is implemented in HADOOP.DLL and WINUTILS.EXE.</p>
<p>In particular, %HADOOP_HOME%\BIN\WINUTILS.EXE must be locatable.</p>
<p>If it is not, Hadoop or an application built on top of Hadoop will fail.</p>
<p><strong>How to fix a missing WINUTILS.EXE</strong></p>
<p>You can fix this problem in two ways</p>
<ul>
<li>Install a full native windows Hadoop version. The ASF does not currently (September 2015) release such a version; releases are available externally.</li>
<li>Or: get the WINUTILS.EXE binary from a Hadoop redistribution. There is a repository of this for some Hadoop versions  <a rel="external nofollow" target="_blank" href="https://github.com/steveloughran/winutils">on github</a>.</li>
</ul>
<p>Then</p>
<ul>
<li>Set the environment variable %HADOOP_HOME% to point to the directory above the BIN dir containing WINUTILS.EXE.</li>
<li>Or: run the Java process with the system property hadoop.home.dir set to the home directory.</li>
</ul>
<footer><strong>Hadoop Wiki ——</strong><cite><a href="https://wiki.apache.org/hadoop/WindowsProblems" target="_blank" rel="external">wiki.apache.org/hadoop/WindowsProblems</a></cite></footer></blockquote>
<p>上面的意思是说Hadoop使用一些Windows api来实现文件访问。</p>
<p>必要 hadoop.DLL和WINUTILS.EXE，这两个文件。</p>
<p>还需要配置 <code>% HADOOP_HOME %</code>的环境变量，来定位 <code>WINUTILS.EXE</code>;</p>
<p>解决办法就是去上面它给的GitHub上 下载对应版本的 文件，将 adoop.DLL和WINUTILS.EXE 文件拷到本地 （Windows）的<code>Hadoop</code> 文件夹下的<code>bin</code>文件夹中。</p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="在Windows-上配置本地Hadoop-环境"><a href="#在Windows-上配置本地Hadoop-环境" class="headerlink" title="在Windows 上配置本地Hadoop 环境"></a>在Windows 上配置本地Hadoop 环境</h4><h5 id="本地安装Hadoop"><a href="#本地安装Hadoop" class="headerlink" title="本地安装Hadoop"></a>本地安装Hadoop</h5><p> 将对应版本的 Hadoop 压缩包，拷一份到Windows 电脑的D盘中解压，我的是Hadoop2.8.1 版本的，将<code>hadoop-2.8.1.tar.gz</code> 解压完就是这样的：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171027110633.png" alt="image"></p>
<p>然后将自己从上面引用地址 GitHub 中 下载对应版本的文件，将  hadoop.DLL和WINUTILS.EXE 拷贝到 bin 目录中。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171027111104.png" alt="image"></p>
<p>修改 <code>/etc/hadoop/hadoop-env.cmd</code> 文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set JAVA_HOME=%JAVA_HOME%</div></pre></td></tr></table></figure></p>
<p>为（修改成自己机器配置的JDK位置）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_144</div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是我这个配置还有个小问题，并不能成功使用Hadoop 命令。这个将在文章最后面讲出原因。</strong></p>
<p>查看 /etc/hadoop/core-site.xml 中<code>fs.default.name</code>是不是的属性值是不是和服务器中一致。不一致需要改成一致。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="配置Hadoop环境变量"><a href="#配置Hadoop环境变量" class="headerlink" title="配置Hadoop环境变量"></a>配置Hadoop环境变量</h5><p>新增环境变量 <code>HADOOP_HOME</code> ，变量值为 <code>D:\hadoop-2.8.1</code></p>
<p>环境变量<code>Path</code> 中新增 <code>%HADOOP_HOME%\bin</code></p>
<h5 id="配置本地Hosts"><a href="#配置本地Hosts" class="headerlink" title="配置本地Hosts"></a>配置本地Hosts</h5><p>需要在C:\Windows\System32\drivers\etc\hosts 文件配置 ip，例如：使用 HDFS 的时候我们机器的配置文件中的地址是：<code>hdfs://server1:9000</code> ，但是本地电脑没配置Hosts 的话，找不到 server1 的机器。</p>
<p>新增我的三台机器的集群信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.19.185 server1</div><div class="line">192.168.19.184 server2</div><div class="line">192.168.19.199 server3</div></pre></td></tr></table></figure></p>
<p>这样下来，再次本地（Windows）调试虚拟机中Hadoop 集群就不会出现开头的问题了。</p>
<h3 id="最后说下中途说的那个问题"><a href="#最后说下中途说的那个问题" class="headerlink" title="最后说下中途说的那个问题"></a>最后说下中途说的那个问题</h3><p>我在 <code>/etc/hadoop/hadoop-env.cmd</code> 文件中 修改成这样的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> JAVA_HOME=C:\Program Files\Java\jdk1.8.0_144</div></pre></td></tr></table></figure></p>
<p>但是Windows 下的 <code>CMD</code> 或者<code>PowerShell</code> 并不能成功使用Hadoop 命令，会报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\server&gt; hadoop version</div><div class="line">系统找不到指定的路径。</div><div class="line">Error: JAVA_HOME is incorrectly <span class="built_in">set</span>.</div><div class="line">       Please update D:\hadoop-2.8.1\etc\hadoop\hadoop-env.cmd</div><div class="line"><span class="string">'-Xmx512m'</span> 不是内部或外部命令，也不是可运行的程序</div><div class="line">或批处理文件。</div></pre></td></tr></table></figure></p>
<p>报错，我们设置的<code>JAVA_HOME</code> 位置并不正确。</p>
<p>这个问题很奇怪，因为我的这个JDK 位置用过很多次了，可以肯定没问题。</p>
<p>在网上找到了问题所在，不过还是需要自己改。。</p>
<blockquote>
<p>if your java environment path contains space, such as “C:\Program Files\java\xxxxx” , the word 《Program Files》 contains a space, so CMD can’t identificate<br>this is the right answer</p>
</blockquote>
<p><code>Program Files</code>，就是这个我们安装软件默认的路径，有空格，CMD 不能识别它，导致我的位置失效了。所以设置路径的时候不能有空格。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python中基本数据类型]]></title>
      <url>/python-basic-type.html</url>
      <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型在数据结构中的定义是一个值的集合以及定义在这个值集上的一组操作。</p>
<p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：<br><a id="more"></a></p>
<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p>
<h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的。</p>
<p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。</p>
<p>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识。</p>
<p>Python还允许用r’’表示’’内部的字符串默认不转义，</p>
<p>如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用’’’…’’’的格式表示多行内容，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (<span class="string">''</span><span class="string">'line1</span></div><div class="line"><span class="string">... line2</span></div><div class="line"><span class="string">... line3</span></div><div class="line"><span class="string">... line4'</span><span class="string">''</span>)</div><div class="line">line1</div><div class="line">line2</div><div class="line">line3</div><div class="line">line4</div></pre></td></tr></table></figure></p>
<h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; True</div><div class="line">True</div><div class="line">&gt;&gt;&gt; False</div><div class="line">False</div><div class="line">&gt;&gt;&gt; True and False</div><div class="line">False</div><div class="line">&gt;&gt;&gt; True or False</div><div class="line">True</div><div class="line">&gt;&gt;&gt; 1 &gt; 2 or 3 &gt; 2</div><div class="line">True</div><div class="line">&gt;&gt;&gt; not 1 &gt; 2</div><div class="line">True</div></pre></td></tr></table></figure></p>
<h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。在声明变量时也可指定它的数据类型。所有变量都具有数据类型，以决定能够存储哪种数据。</p>
<p>变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，</p>
<p>在Python中，等号<code>=</code>是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，这就是动态语言，没有Java中那样必须指定变量类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = 123 # a是整数</div><div class="line">print(a)</div><div class="line">a = &apos;ABC&apos; # a变为字符串</div><div class="line">print(a)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = 2</div><div class="line">&gt;&gt;&gt; x += 2</div><div class="line">&gt;&gt;&gt; print (x)</div><div class="line">4</div></pre></td></tr></table></figure>
<p>python中字符串变量是指向字符串常量池的引用，变量更改的只是对字符串的引用地址变了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = 2</div><div class="line">&gt;&gt;&gt; x += 2</div><div class="line">&gt;&gt;&gt; print (x)</div><div class="line">4</div></pre></td></tr></table></figure>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>在Python中，通常用全部大写的变量名表示常量</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>python 中两种除法</p>
<ol>
<li><p><code>/</code>  除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 8 / 3</div><div class="line">2.6666666666666665</div><div class="line">&gt;&gt;&gt; 9 / 3</div><div class="line">3.0</div></pre></td></tr></table></figure>
</li>
<li><p>还有一种除法是<code>//</code>，称为地板除，整数不管是否整除除法都是整数，浮点数除法是浮点数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 9 / 3</div><div class="line">3.0</div><div class="line">&gt;&gt;&gt; 8 // 3</div><div class="line">2</div><div class="line">&gt;&gt;&gt; 9 // 3</div><div class="line">3</div><div class="line">&gt;&gt;&gt; 9.2123 // 3</div><div class="line">3.0</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Python的整数没有大小限制，</p>
<p>Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python学习之路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识python]]></title>
      <url>/python-first.html</url>
      <content type="html"><![CDATA[<h3 id="Write-In-the-Front"><a href="#Write-In-the-Front" class="headerlink" title="Write In the Front"></a>Write In the Front</h3><p>本来很早打算就要学习python的，这几个月发生了一些事，导致耽误下来，现在开始重新拾起这个梦想吧。</p>
<p>学习<code>python3</code> 都是从<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="external">廖雪峰博客网站</a>上学习的，自己新建一栏<code>python学习之路</code>，写下学习笔记，记录学习过程。</p>
<a id="more"></a>
<hr>
<h3 id="Study"><a href="#Study" class="headerlink" title="Study"></a>Study</h3><p>我安装的<code>pyhon</code> 版本是<code>3.7</code><br>去官网下载最新版的3.X版本，需要<strong>注意</strong>的是：安装的时候记得勾选下方的<code>Add Python 3.7 to PATH</code>，将python的环境变量配置到系统中，就可以直接使用python 命令进入 python 交互模式，然后<code>Install Now</code>；当然手快没勾选的百度自己配置，也是没问题的。<br>在 <code>Windows PowerShell</code> 下进入 python 交互模式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\server&gt; python</div><div class="line">Python 3.7.0a2 (v3.7.0a2:f7ac4fe, Oct 17 2017, 17:06:29) [MSC v.1900 64 bit</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div></pre></td></tr></table></figure></p>
<p>运行打印 hello world<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; <span class="built_in">print</span> (<span class="string">'hello world'</span>)</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p>使用编辑器编辑python ，不能使用记事本。</p>
<p>我目前使用的是 Notepad++ ；</p>
<p>新建一个页面，写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print (&apos;hello world&apos;)</div></pre></td></tr></table></figure></p>
<p>保存文件名为 <code>helloWorld.py</code> 一定要以py 结尾，以python 文件保存起来。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171026171501.png" alt="image"></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171026172010.png" alt="image"></p>
<p>保存完毕后，可以运行这个脚本文件了，命令进入文件所在位置，我是放在桌面的，执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\server\Desktop&gt; python helloWorld.py</div><div class="line">hello world</div></pre></td></tr></table></figure></p>
<p>输出成功。</p>
<h3 id="Summary："><a href="#Summary：" class="headerlink" title="Summary："></a>Summary：</h3><ul>
<li>用文本编辑器写Python程序，然后保存为后缀为.py的文件，在Windows下就可以使用命令Python直接运行这个程序。</li>
<li>直接输入python进入交互模式，相当于启动了Python解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。<br>直接运行.py文件相当于启动了Python解释器，然后一次性把.py文件的源代码给执行了，你是没有机会输入源代码的。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python学习之路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java8 新特性Stream 的学习和使用方法]]></title>
      <url>/java-stream.html</url>
      <content type="html"><![CDATA[<h3 id="流（Stream）"><a href="#流（Stream）" class="headerlink" title="流（Stream）"></a>流（Stream）</h3><p>流是java 8 中新引入的特性，用来处理集合中的数据，Stream 是一个来自数据源的元素队列并支持聚合操作。</p>
<ul>
<li>Java 中 Stream 不会存储元素。</li>
<li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li>
<li>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li>
</ul>
<a id="more"></a>
<p> Stream操作还有几个特征：</p>
<ul>
<li><strong>只遍历一次</strong>。我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。</li>
<li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li>
<li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li>
</ul>
<h3 id="流的使用"><a href="#流的使用" class="headerlink" title="流的使用"></a>流的使用</h3><p>流的使用过程有三步：</p>
<ul>
<li>获取流；</li>
<li>中间操作，得到一个新的流；</li>
<li>最终操作，获取结果。</li>
</ul>
<h4 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h4><p>流有两种：</p>
<ul>
<li>stream() ： 创建串行流。</li>
<li>parallelStream()  ： 创建并行流。</li>
</ul>
<p>并行流的特点就是将一个大任务切分成多个小任务，无序一起执行，当然如果我们需要顺序输出的话可以使用<code>forEachOrdered</code>，速度会比串行流快一些。它通过默认的ForkJoinPool,可能提高你的多线程任务的速度。</p>
<h5 id="从集合获取流"><a href="#从集合获取流" class="headerlink" title="从集合获取流"></a>从集合获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">Stream&lt;FarmEntity&gt; stream = list.stream();</div></pre></td></tr></table></figure>
<h5 id="从数组获取流"><a href="#从数组获取流" class="headerlink" title="从数组获取流"></a>从数组获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] arrays = &#123;<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>&#125;;</div><div class="line">Stream&lt;String&gt; stream = Arrays.stream(arrays);</div></pre></td></tr></table></figure>
<h5 id="从值获取流"><a href="#从值获取流" class="headerlink" title="从值获取流"></a>从值获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>);</div></pre></td></tr></table></figure>
<h5 id="从文件获取流"><a href="#从文件获取流" class="headerlink" title="从文件获取流"></a>从文件获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Stream&lt;String&gt; file =Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</div><div class="line">    file.forEach(System.out::println);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用NIO获取流，可以打印出文本文件的内容。</p>
<h4 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h4><h5 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h5><p>filter函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</div><div class="line">Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<h5 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).distinct().forEach(System.out::print);</div></pre></td></tr></table></figure>
<h5 id="limit-截取"><a href="#limit-截取" class="headerlink" title="limit 截取"></a>limit 截取</h5><p>截取前面两个单位：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</div></pre></td></tr></table></figure></p>
<h5 id="skip-跳过"><a href="#skip-跳过" class="headerlink" title="skip 跳过"></a>skip 跳过</h5><p>和上面的limit 相反，跳过前面两个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h5 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h5><p>map 方法用于映射每个元素到对应的结果。<br>给每个词语后面加个 “兮”<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">珊瑚兮</div><div class="line">阳光兮</div><div class="line">细腻兮</div><div class="line">冷暖兮</div><div class="line">阳光兮</div></pre></td></tr></table></figure></p>
<h5 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted 排序"></a>sorted 排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></div><div class="line">Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</div></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">冷暖</div><div class="line">珊瑚</div><div class="line">细腻</div><div class="line">阳光</div><div class="line">阳光</div></pre></td></tr></table></figure></p>
<p>java8 以前排序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before Java 8 sorted</span></div><div class="line">       System.out.println(<span class="string">"java8以前排序："</span>);</div><div class="line">       List&lt;String&gt; list1 = Arrays.asList(strings);</div><div class="line">       list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> o1.compareTo(o2);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java8以前排序：</div><div class="line">java8 以前的排序：[冷暖, 珊瑚, 细腻, 阳光, 阳光]</div></pre></td></tr></table></figure></p>
<p>HashMap根据value值排序key：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">map.put(<span class="string">"spring"</span>, <span class="number">1</span>);</div><div class="line">map.put(<span class="string">"summer"</span>, <span class="number">2</span>);</div><div class="line">map.put(<span class="string">"autumn"</span>, <span class="number">3</span>);</div><div class="line">map.put(<span class="string">"winter"</span>, <span class="number">4</span>);</div><div class="line">map.entrySet().stream()</div><div class="line">    .sorted((a, b) -&gt; b.getValue().compareTo(a.getValue()))</div><div class="line">    .forEach(a -&gt; System.out.println(a.getKey()));</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">winter</div><div class="line">autumn</div><div class="line">summer</div><div class="line">spring</div></pre></td></tr></table></figure></p>
<h5 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//统计</span></div><div class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest number in List : 4</div><div class="line">Lowest  number in List : 1</div><div class="line">Sum of all numbers : 11</div><div class="line">Average of all numbers : 2.2</div></pre></td></tr></table></figure></p>
<h5 id="match-匹配"><a href="#match-匹配" class="headerlink" title="match 匹配"></a>match 匹配</h5><ul>
<li><code>anyMatch</code>用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为<code>boolean</code>类型。 </li>
<li><code>noneMatch</code>与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件</li>
<li><code>findAny</code>能够从流中随便选一个元素出来，它返回一个Optional类型的元素。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">       System.out.println(result1);</div><div class="line"></div><div class="line">       Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">       System.out.println(reslut2);</div><div class="line">       <span class="comment">//随机读取一个</span></div><div class="line">       Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</div><div class="line">       System.out.println(getResult);</div><div class="line">       System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">false</div><div class="line">true</div><div class="line">Optional[冷暖]</div><div class="line">获取Optional中的值：冷暖</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Optional是Java8新加入的一个容器，这个容器只存1个或0个元素，它用于防止出现NullpointException，它提供如下方法：</p>
<ul>
<li><code>isPresent()</code> 判断容器中是否有值。</li>
<li><code>ifPresent(Consume lambda)</code> 容器若不为空则执行括号中的Lambda表达式。</li>
<li><code>T get()</code>  获取容器中的元素，若容器为空则抛出NoSuchElement异常。</li>
<li><code>T orElse(T other)</code>  获取容器中的元素，若容器为空则返回括号中的默认值。</li>
</ul>
</blockquote>
<h5 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce 归约"></a>reduce 归约</h5><p>求和：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//归约</span></div><div class="line">        <span class="comment">//第一种方法求和</span></div><div class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</div><div class="line">        System.out.println(connectStrings);</div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法求和</span></div><div class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</div><div class="line">        System.out.println(connectStrings1);</div></pre></td></tr></table></figure></p>
<p>getConnectStrings方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* Connect Strings</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> s1 参数1</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> s2 参数2</span></div><div class="line"><span class="comment">* <span class="doctag">@return</span> java.lang.String</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> s1 + s2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>reduce</code>中第一个参数是初始值，第二个参数是方法引用。</p>
<h5 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h5><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。 </p>
<p>每种数值流都提供了数值计算函数，如max、min、sum等。</p>
<p>下面使用 mapToInt 为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line"><span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></div><div class="line">IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</div><div class="line"><span class="comment">//使用对应的 Optional 接收</span></div><div class="line">OptionalInt optionalNumber = intStream.max();</div><div class="line"><span class="comment">// 取值，给默认值 0，为空结果为0</span></div><div class="line">System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</div></pre></td></tr></table></figure>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">numberStrings&apos;s max number is: 3</div></pre></td></tr></table></figure></p>
<p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 所以可以直接使用 <code>OptionalInt.getAsInt()</code>获取容器的值。<br>为空的话捕捉异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.util.NoSuchElementException: No value present</div><div class="line">	at java.util.OptionalInt.getAsInt(OptionalInt.java:118)</div><div class="line">	at com.wuwii.test.TestStream.main(TestStream.java:105)</div></pre></td></tr></table></figure></p>
<p>此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong。</p>
<h5 id="Collectors-集合归约"><a href="#Collectors-集合归约" class="headerlink" title="Collectors 集合归约"></a>Collectors 集合归约</h5><p>将流转换成集合和聚合元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Collectors 集合归约</span></div><div class="line">       <span class="comment">//  toList</span></div><div class="line">       List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</div><div class="line">       <span class="comment">// Get String by connected</span></div><div class="line">       String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">       System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collectors toList: [冷暖, 珊瑚, 细腻, 阳光, 阳光] , Conlletors Join Strings: 冷暖,珊瑚,细腻,阳光,阳光</div></pre></td></tr></table></figure></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.util.stream.Collectors;</div><div class="line"><span class="keyword">import</span> java.util.stream.IntStream;</div><div class="line"><span class="keyword">import</span> java.util.stream.Stream;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Learn Java 8 Stream</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/25 22:16&lt;/pre&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// Get Stream from file</span></div><div class="line">        System.out.println(<span class="string">"读取文件："</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Stream&lt;String&gt; file = Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</div><div class="line">            file.forEach(System.out::println);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Filter</span></div><div class="line">        String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</div><div class="line">        Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Distinct</span></div><div class="line">        System.out.println(<span class="string">"去重:"</span>);</div><div class="line">        Arrays.stream(strings).distinct().forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Limit</span></div><div class="line">        System.out.println(<span class="string">"截取:"</span>);</div><div class="line">        Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Get Stream by Skip</span></div><div class="line">        System.out.println(<span class="string">"跳过:"</span>);</div><div class="line">        Arrays.stream(strings).skip(<span class="number">2</span>).forEach(System.out::print);</div><div class="line"></div><div class="line">        <span class="comment">// Java 8 sorted</span></div><div class="line">        System.out.println(<span class="string">"排序："</span>);</div><div class="line">        <span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></div><div class="line">		Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">// Before Java 8 sorted</span></div><div class="line">        System.out.println(<span class="string">"java8以前排序："</span>);</div><div class="line">        List&lt;String&gt; list1 = Arrays.asList(strings);</div><div class="line">        list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o1.compareTo(o2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</div><div class="line"></div><div class="line">        <span class="comment">//Handle map</span></div><div class="line">        System.out.println(<span class="string">"map 映射："</span>);</div><div class="line">        Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">//Match</span></div><div class="line">        Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">        System.out.println(result1);</div><div class="line"></div><div class="line">        Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</div><div class="line">        System.out.println(reslut2);</div><div class="line">        <span class="comment">//findAny to find anyone</span></div><div class="line">        Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</div><div class="line">        System.out.println(getResult);</div><div class="line">        System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</div><div class="line"></div><div class="line">        <span class="comment">//统计</span></div><div class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div><div class="line"></div><div class="line">        <span class="comment">//归约</span></div><div class="line">        <span class="comment">//第一种方法求和</span></div><div class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</div><div class="line">        System.out.println(connectStrings);</div><div class="line"></div><div class="line">        <span class="comment">// 第二种方法求和</span></div><div class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</div><div class="line">        System.out.println(connectStrings1);</div><div class="line"></div><div class="line">        <span class="comment">//Collectors 集合归约</span></div><div class="line">        <span class="comment">//  toList</span></div><div class="line">        List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</div><div class="line">        <span class="comment">// Get String by connected</span></div><div class="line">        String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">        System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</div><div class="line"></div><div class="line">        String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</div><div class="line">        <span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></div><div class="line">        IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</div><div class="line">        <span class="comment">//使用对应的 Optional 接收</span></div><div class="line">        OptionalInt optionalNumber = intStream.max();</div><div class="line">        <span class="comment">// 取值，给默认值 0，为空结果为0</span></div><div class="line">        System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 拼接字符串</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s1 参数1</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> s2 参数2</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s1 + s2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[珍惜]]></title>
      <url>/cherish-her.html</url>
      <content type="html"><![CDATA[<p>话说开会的时候，总是有人心不在焉的，没错，那个人就是我，开会随手刷刷手机，看到这个文章的不要学我哈。<br>无意中看到一个句子。<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1508832180808&amp;di=277bb0ccfa259488634243e76d0ca4bd&amp;imgtype=0&amp;src=http%3A%2F%2Fuploadfile.bizhizu.cn%2F2014%2F0529%2F20140529021838977.jpg" alt="img"><br><a id="more"></a></p>
<p>其实人生的路很漫长<br>在这条人生的路上<br>你会遇到很多的人<br>很多的风景<br>当你错过以后<br>你以为人生就已经结束了<br>实际上<br>没有<br>因为它还在继续<br>你还会遇到更多的人<br>更多的风景<br>也许下一个人才是真正适合你的人</p>
<p>可是你又没跟那个人在一起过<br>你怎么知道她不是最适合你的人呢<br>你错过了她<br>你以为你会碰到更好的人<br>可是事实证明呢<br>你到现在还是单着<br>这说明了什么<br>说明了你在潜意识里<br>你觉得她是最值得珍惜的<br>是最值得你去爱的<br>最值得你去关怀的<br>你所错过的<br>才是真正美丽的风景</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--宁财神 《龙门镖局》</p>
]]></content>
      
        <categories>
            
            <category> 那些很美的句子 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 桔子 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Programmer's Day]]></title>
      <url>/programmer-day.html</url>
      <content type="html"><![CDATA[<p>今天议论关注最多的就是1024，程序猿节日，可怕，什么时候程序猿都有节日了。。。</p>
<p>当然公司明天还有活动，很高兴有这么个节日，作为一个单身狗，最讨厌的估计就是加班，尼玛，单身狗还害怕什么加班，太没志气了，怎么能跟那些秀恩爱的去比高低，逃。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoOT</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = Arrays.asList(</div><div class="line">                <span class="string">"1024不加班的理由："</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"Cannot find the object"</span>,</div><div class="line">                <span class="string">"太冷，我选择睡觉！！！   "</span>,</div><div class="line">                <span class="string">"                    ☽   "</span>,</div><div class="line">                <span class="string">"   //   /￣'- 、_      "</span>,</div><div class="line">                <span class="string">"  // ℂ/ &lt;_/ _____/    "</span>,</div><div class="line">                <span class="string">"  ￣￣￣￣￣￣￣     "</span></div><div class="line">        );</div><div class="line">        list.stream().forEach(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个是今年自己写在 华为云 论坛上的一个回帖，当然是为了福利的，其实我是为了混个华为P10，实在不行，给个鼠标垫算了，原谅了。</p>
<p>另外附几张论坛好玩的几个图（侵删）</p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1822231n1o90ucduykj2nw.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1537080ctfww4nlkmentap.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/142101oq4bb8bljw4dumuv.jpg" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/1104512bbyq3whcaxxal26.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/23/102951fa586egackcjw4xl.png" alt="image"></p>
<p><img src="http://forum-img.huaweicloud.com/data/attachment/forum/201710/22/200553auslkcexi5ohlhua.png" alt="image"></p>
<p>就发这么多了，，该洗洗睡了。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 中lambda表达式的使用]]></title>
      <url>/java-lambda.html</url>
      <content type="html"><![CDATA[<p>java 中<code>lambda</code>表达式 实在 java 8 版本后新加入的特性，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>
<p><strong>特征:</strong></p>
<ul>
<li><strong>可选类型声明</strong>：不需要声明参数类型，编译器可以统一识别参数值。</li>
<li><strong>可选的参数圆括号</strong>：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
<li><strong>可选的大括号</strong>：如果主体包含了一个语句，就不需要使用大括号。</li>
<li><strong>可选的返回关键字</strong>：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。<a id="more"></a>
总结语法就是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(params) -&gt; expression</div><div class="line">(params) -&gt; statement</div><div class="line">(params) -&gt; &#123; statements &#125;</div></pre></td></tr></table></figure>
<h4 id="使用lambda表达式替换匿名类"><a href="#使用lambda表达式替换匿名类" class="headerlink" title="使用lambda表达式替换匿名类"></a>使用lambda表达式替换匿名类</h4><p>以 Runnable 为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before java8</span></div><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></div><div class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></div><div class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></div><div class="line"><span class="comment">     * thread.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></div><div class="line"><span class="comment">     * take any action whatsoever.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span> Thread#run()</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before jdk 1.8;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line"><span class="comment">// after jdk 1.8</span></div><div class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"after jdk 1.8;"</span>)).start();</div></pre></td></tr></table></figure></p>
<p>执行结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">before jdk 1.8;</div><div class="line">after jdk 1.8;</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式-迭代"><a href="#使用lambda表达式-迭代" class="headerlink" title="使用lambda表达式 迭代"></a>使用lambda表达式 迭代</h4><p>以 forEach 为例，迭代所有对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">        <span class="comment">//before java8</span></div><div class="line">        <span class="keyword">for</span> (String s : list1) &#123;</div><div class="line">            System.out.println(<span class="string">"before: "</span> + s);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//after</span></div><div class="line">        list1.forEach(n -&gt; System.out.println(<span class="string">"after: "</span> + n));</div><div class="line">        <span class="comment">//list1.forEach(System.out::println); //可以打印，方法引用由::双冒号操作符标示，</span></div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">before: spring</div><div class="line">before: summer</div><div class="line">before: autumn</div><div class="line">before: winter</div><div class="line">after: spring</div><div class="line">after: summer</div><div class="line">after: autumn</div><div class="line">after: winter</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式和函数式接口Predicate"><a href="#使用lambda表达式和函数式接口Predicate" class="headerlink" title="使用lambda表达式和函数式接口Predicate"></a>使用lambda表达式和函数式接口Predicate</h4><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用 java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。下面是Java 8 Predicate 的例子，展示了过滤集合数据的多种常用方法。Predicate接口非常适用于做过滤。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">        System.out.println(<span class="string">"Print which end with n: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).endsWith(<span class="string">"n"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print which start with s: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).startsWith(<span class="string">"s"</span>));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print whose length greater than 6: "</span>);</div><div class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).length() &gt; <span class="number">6</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print all:"</span>);</div><div class="line">        filter(list1, str -&gt; <span class="keyword">true</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Print none:"</span>);</div><div class="line">        filter(list1, str -&gt; <span class="keyword">false</span>);</div><div class="line">        </div><div class="line">        </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span> <span class="params">(List list, Predicate condition)</span> </span>&#123;</div><div class="line">        list.stream().</div><div class="line">                filter(s -&gt; condition.test(s)).</div><div class="line">                forEach(s -&gt; System.out.println(s));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Print which end with n: </div><div class="line">autumn</div><div class="line">Print which start with s: </div><div class="line">spring</div><div class="line">summer</div><div class="line">Print whose length greater than 6: </div><div class="line">Print all:</div><div class="line">spring</div><div class="line">summer</div><div class="line">autumn</div><div class="line">winter</div><div class="line">Print none:</div></pre></td></tr></table></figure></p>
<p>例外 filter 还提供逻辑操作符AND和OR的方法，名字叫做and()、or()和xor()，用于将传入 filter() 方法的条件合并起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</div><div class="line">Predicate&lt;String&gt; startWithS = s -&gt; s.startsWith(<span class="string">"s"</span>);</div><div class="line">        Predicate&lt;String&gt; endWithG = g -&gt; g.endsWith(<span class="string">"g"</span>);</div><div class="line">        list1.stream()</div><div class="line">                .filter(startWithS.and(endWithG))</div><div class="line">                .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring</div></pre></td></tr></table></figure></p>
<h4 id="使用lambda表达式的Map和Reduce"><a href="#使用lambda表达式的Map和Reduce" class="headerlink" title="使用lambda表达式的Map和Reduce"></a>使用lambda表达式的Map和Reduce</h4><p>给list 中 每个数据 增加 50%<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</div><div class="line">       <span class="keyword">for</span> (Integer num : list2) &#123;</div><div class="line">           Double result = num + num * <span class="number">0.5</span>;</div><div class="line">           System.out.println(result);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       list2.stream()</div><div class="line">               .map(num -&gt; num + num * <span class="number">0.5</span>)</div><div class="line">               .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">150.0</div><div class="line">300.0</div><div class="line">450.0</div><div class="line">600.0</div><div class="line">150.0</div><div class="line">300.0</div><div class="line">450.0</div><div class="line">600.0</div></pre></td></tr></table></figure></p>
<p>计算一个list 每个值加上 50%后的和<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</div><div class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Integer num : list2) &#123;</div><div class="line">            Double result = num + num * <span class="number">0.5</span>;</div><div class="line">            total += result;</div><div class="line">            System.out.println(total);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        total = list2.stream()</div><div class="line">                .map(num -&gt; num + num * <span class="number">0.5</span>)</div><div class="line">                .reduce((sum, result) -&gt; sum + result).get();</div><div class="line">        System.out.println(total);</div></pre></td></tr></table></figure></p>
<p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1500.0</div><div class="line">1500.0</div></pre></td></tr></table></figure></p>
<p>map将集合类（例如列表）元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。</p>
<h4 id="通过过滤创建一个String列表"><a href="#通过过滤创建一个String列表" class="headerlink" title="通过过滤创建一个String列表"></a>通过过滤创建一个String列表</h4><p> 通过过滤创建一个新的字符串列表，每个字符串长度大于2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="comment">// 创建一个字符串列表，每个字符串长度大于2</span></div><div class="line">        List&lt;String&gt; filtered = list3.stream().filter(x -&gt; x.length()&gt; <span class="number">2</span>).collect(Collectors.toList());</div><div class="line">        System.out.printf(<span class="string">"Original List : %s, filtered list : %s %n"</span>, list3, filtered);</div></pre></td></tr></table></figure></p>
<h4 id="对列表的每个元素应用函数"><a href="#对列表的每个元素应用函数" class="headerlink" title="对列表的每个元素应用函数"></a>对列表的每个元素应用函数</h4><p>对list3 的每个元素转换成大写，并用逗号连接起来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</div><div class="line">String string = list3.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">        System.out.printf(<span class="string">"Original List : %s, After String : %s %n"</span>, list3, string);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [abc, def, hi, hello], After String : ABC,DEF,HI,HELLO</div></pre></td></tr></table></figure></p>
<h4 id="复制不同的值，创建一个子列表"><a href="#复制不同的值，创建一个子列表" class="headerlink" title="复制不同的值，创建一个子列表"></a>复制不同的值，创建一个子列表</h4><p>如何利用流的 distinct() 方法来对集合进行去重。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        List&lt;Integer&gt; distinctList = list4.stream().map( i -&gt; i * i).distinct().collect(Collectors.toList());</div><div class="line">        System.out.printf(<span class="string">"Original List : %s,  Square Reslut : %s %n"</span>, list4, distinctList);</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Original List : [1, 2, 3, 4, 1],  Square Reslut : [1, 4, 9, 16]</div></pre></td></tr></table></figure></p>
<h4 id="计算集合元素的最大值、最小值、总和以及平均值"><a href="#计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="计算集合元素的最大值、最小值、总和以及平均值"></a>计算集合元素的最大值、最小值、总和以及平均值</h4><p>IntStream、LongStream 和 DoubleStream 等流的类中，有个非常有用的方法叫做 summaryStatistics() 。可以返回 IntSummaryStatistics、LongSummaryStatistics 或者 DoubleSummaryStatistic s，描述流中元素的各种摘要数据。</p>
<p>我们用这个方法来计算列表的最大值和最小值。它也有 getSum() 和 getAverage() 方法来获得列表的所有元素的总和及平均值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Highest number in List : 4</div><div class="line">Lowest  number in List : 1</div><div class="line">Sum of all numbers : 11</div><div class="line">Average of all numbers : 2.2</div></pre></td></tr></table></figure></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>lambda 表达式只能引用 <code>final</code> 或 final 局部变量，这就是说不能在 lambda 内部<code>修改</code>定义在域外的变量，否则会编译错误。</li>
<li>Lambda表达式在Java中又称为闭包或匿名函数，</li>
<li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li>
<li>如果在 lambda 表达式 内部不能调用参数方法的引用，需要声明参数类型。</li>
</ol>
<p><strong>参考博客：</strong> <a rel="external nofollow" target="_blank" href="http://www.importnew.com/16436.html">http://www.importnew.com/16436.html</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea 的maven 项目设置 默认java编译版本]]></title>
      <url>/compiler-version.html</url>
      <content type="html"><![CDATA[<p>使用 Intellij Idea 创建maven 项目后，每次 reimport 都会回归默认 java 版本 1.5 ，每次都要重新设置版本，很麻烦。下面的方法同样适用Eclipse。<br><a id="more"></a></p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>修改该项目的pom.xml , 只对该项目有效。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">maven.compiler.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.compiler.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;maven.compiler.source&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;maven.compiler.target&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>保存，eclipse 是Update maven 项目， Intellij  reimport。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>修改 maven 的 配置文件 <code>settings.xml</code>，在<code>profiles</code>节点中加入自己的Jdk版本：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>      </div><div class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>      </div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>      </div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>这个方法对于所有使用这个maven 插件的项目都有效。</strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[别太懂事了]]></title>
      <url>/sensible.html</url>
      <content type="html"><![CDATA[<p>不知不觉，又想起了她，自从上次见过她了，心里总是那么时刻的泛起她的影子吧，虽然说好久没见再相见，但是彼此应该没什么深刻的记忆吧，而且排斥的我很厉害，这让我心疼得厉害，到底是什么成为这样的她，不想懂了。</p>
<p>或许吧，是以前一个人久了，什么事都得自己撑着吧，什么事情都得面对，她也是一个很拼的女孩子，什么事情都得抢在前头吧，最后了，有了委屈自己忍，有了眼泪只好自己吞。总是在乎别人的感受，然而不知道自己会有多疼的人，就是这样太懂事的人吧。明明她也很脆弱，无关外表，还是心里，却总要装作坚强的样子，明明她也有时候表现的无所适从的害怕，却还要表现得无所畏惧的淡然。可是，在别人面前，她一直装作那么懂事，别人都不相信她会难过，会流泪了吧。但是，她不这么认为的，相信自己能够修复所有的伤疤，可以完成所有的事情。</p>
<p>但是，太懂事的人，常常会不太幸福吧，常常顾及别人得感受，不懂得去拒绝别人，更不忍心看别人难过，宁可自己委屈，宁可自己疲惫，也不想给任何人带来麻烦，这样真的会活得很累很累，考虑得太多，却总是忽略了自己。这也是我为什么总是说好担心你呀。</p>
<p>别太懂事了，不要太善良了，给别人一次心疼自己的机会，卸下面具，天 塌下来了也不用自己去抗；别再逞强了，你也值得被人疼人。别把所有的事情都揽到自己身上，你只是你自己，不需要活成别人，也可以不管不顾一切，活成自己的模样。</p>
<p>加油，姑娘。真希望你能好好的生活下去，忘了一切烦恼。</p>
<p>晚安。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 上安装Hadoop V 2.8.1集群及配置]]></title>
      <url>/linux-hadoop.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。<br> Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。<br>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。(百科)</p>
</blockquote>
<p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98010877b33533faf5b6942890e89a22/3c6d55fbb2fb4316ecfbfb0322a4462308f7d3e7.jpg" alt="image"></p>
<a id="more"></a>
<h2 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h2><p>本次使用的是2.8.1版本的Hadoop，官网地址<br><a rel="external nofollow" target="_blank" href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz">http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz</a></p>
<p>点击（不用进官网直接点这个链接就能下载）</p>
<p><a rel="external nofollow" target="_blank" href=" http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz "> http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz </a></p>
<h2 id="安装3个虚拟机并实现ssh免密码登录"><a href="#安装3个虚拟机并实现ssh免密码登录" class="headerlink" title="安装3个虚拟机并实现ssh免密码登录"></a>安装3个虚拟机并实现ssh免密码登录</h2><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>使用的Linux系统是CentOS 7 ，修改三台机器的Hosts，让它们能相互映射到，能ping t通<br>参考我的上一篇文章 </p>
<p><a href="http://blog.wuwii.com/linux-hostname.html">http://blog.wuwii.com/linux-hostname.html</a></p>
<p>添加Hosts，这是我的三台机器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.19.185  server1</div><div class="line">192.168.19.184  server2</div><div class="line">192.168.19.199  server3</div></pre></td></tr></table></figure></p>
<p>ping 结果都能ping 通<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># ping -c 4 server1</span></div><div class="line">PING server1 (192.168.19.185) 56(84) bytes of data.</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=1 ttl=64 time=0.536 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=2 ttl=64 time=0.388 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=3 ttl=64 time=0.309 ms</div><div class="line">64 bytes from server1 (192.168.19.185): icmp_seq=4 ttl=64 time=0.368 ms</div><div class="line"></div><div class="line">--- server1 ping statistics ---</div><div class="line">4 packets transmitted, 4 received, 0% packet loss, time 3001ms</div><div class="line">rtt min/avg/max/mdev = 0.309/0.400/0.536/0.084 ms</div></pre></td></tr></table></figure></p>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>密钥三台机器都需要生成，就以一台 server1 机器为例</p>
<p>使用命令 <code>ssh-keygen -t rsa</code> 一路 enter<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ssh-keygen -t rsa</span></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </div><div class="line">Enter same passphrase again: </div><div class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">e0:ea:e3:5d:95:be:c5:9a:dc:90:99:22:d1:cf:99:49 root@server1</div><div class="line">The key<span class="string">'s randomart image is:</span></div><div class="line"><span class="string">+--[ RSA 2048]----+</span></div><div class="line"><span class="string">|                 |</span></div><div class="line"><span class="string">|                 |</span></div><div class="line"><span class="string">|      .          |</span></div><div class="line"><span class="string">|     . o   .     |</span></div><div class="line"><span class="string">|      o S E      |</span></div><div class="line"><span class="string">|     . . * O     |</span></div><div class="line"><span class="string">|    . . o % o    |</span></div><div class="line"><span class="string">|   ... o o B     |</span></div><div class="line"><span class="string">|   .o..   = .    |</span></div><div class="line"><span class="string">+-----------------+</span></div></pre></td></tr></table></figure></p>
<p>出现上面的 ，可以在本帐户的根目录看到一个 .ssh 文件夹 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment">#  ll -a</span></div><div class="line">总用量 68</div><div class="line">dr-xr-x---.  6 root root   256 10月 18 15:00 .</div><div class="line">dr-xr-xr-x. 20 root root  4096 10月 18 10:35 ..</div><div class="line">-rw-------.  1 root root  1456 8月  14 08:44 anaconda-ks.cfg</div><div class="line">-rw-------.  1 root root 24538 10月 18 10:35 .bash_history</div><div class="line">-rw-r--r--.  1 root root    18 12月 29 2013 .bash_logout</div><div class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bash_profile</div><div class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bashrc</div><div class="line">-rw-r--r--.  1 root root   100 12月 29 2013 .cshrc</div><div class="line">-rw-r--r--   1 root root   223 9月  27 10:47 dump.rdb</div><div class="line">drwxr-xr-x. 11 root root   270 8月  15 15:57 fastdfs</div><div class="line">drwxr-xr-x.  2 root root    40 8月  15 15:04 .oracle_jre_usage</div><div class="line">drwxr-----.  3 root root    19 8月  15 15:53 .pki</div><div class="line">-rw-------   1 root root   571 9月  27 16:58 .rediscli_history</div><div class="line">drwx------   2 root root    38 10月 18 14:56 .ssh</div><div class="line">-rw-r--r--.  1 root root   129 12月 29 2013 .tcshrc</div><div class="line">-rw-------   1 root root  7372 10月 18 11:35 .viminfo</div></pre></td></tr></table></figure>
<p>注意它是个隐藏的文件，我是用的是secureFx 显示隐藏文件，需要 视图 -&gt; 文件 勾选上就行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server1 .ssh]<span class="comment"># ll</span></div><div class="line">总用量 8</div><div class="line">-rw------- 1 root root 668 10月 18 15:12 id_rsa</div><div class="line">-rw-r--r-- 1 root root 602 10月 18 15:12 id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>打开 <code>/root/.ssh/id_rsa.pub</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server1 .ssh]# cat id_rsa.pub </div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</div></pre></td></tr></table></figure></p>
<p>查看到了我们生成的密钥成功了</p>
<p>然后我们把三个机器都生成密钥，然后把他们合并成一个文件创建一个<code>/root/.ssh/authorized_keys</code> 文件保存着。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171018152550.png" alt="image"></p>
<p>使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span></div></pre></td></tr></table></figure></p>
<p>其他机器的公共密钥也复制到到这个文件里来（补充，不要连着复制，上一行后面打个空格，再换行。）</p>
<p>所以最后是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">[root@server1 .ssh]# vim authorized_keys</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFwe2pGEMWt+X0FXFPotOQrUAJFDOLflMjtwBIJxTSFBPQuVhoEtJHkacnpsPAtT4zOJxjieLOrsC/G5fKZVpSgYRwmMw6iobe3IsL5uElVfRYoO+HIr/BDep1imVFkmj0DTMUj0q+UYz3wiEaFQk4zh7Gas2qIdgyOtfSQcYN3T7qNh4dPDfdOrBIqZq/fP33UFDBgbUqGZUZhL6mHc8LRHo9+eby3ZPtiEudfeczvi3pI0Dcp0zX+WSuqPK/z47hBN2XlGMIDO2Ta5sAu9WfECe0WcxsPLOPsKPCRsakyMrYlnGk3hEQ9Ci1YsNKUX8j1RhBi3YLKsl5rjhQR67r root@server2</div><div class="line"></div><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFPaRkR/0i51MORrPVnsEZR60t7FZDmJ3DlhVKdt4crCHO+QhsHr5ZwbcLT/9vTBAdRoveuwHJreEO5MLnlcG0dxFjVDduip5M84zGjmKI1k7/tyeNT1bHUhoMWRAaDEk9RUx/rrYzR/DzHvkdXPwPK+uENFCFBo0RTEGxAMkrXkex7SFNITh8t48sto23D20v7O4A+h4Fbe4oiEjlFBeK6H+dJxZVqYE5Xof1Y4Nc0Xh0YfEg9rUT4BS1AdYWZB9ptVyuSzsbmBd1mve8GcR8cf0M75uSIovc3ww/z/sVpx+hluldhVN9wXyUtFZdWcbklJcq6oTMfejY7ISv2lKh root@server3</div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">~                                                                               </div><div class="line">&quot;authorized_keys&quot; [新] 5L, 1183C 已写入</div></pre></td></tr></table></figure></p>
<p>每个电脑都需要这个<code>/root/.ssh/authorized_keys</code>文件，所以直接把它复制到对应位置就行了。</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171018152550.png" alt="image"></p>
<p><strong>注意</strong><br>我们需要给它们相应的权限，一般默认的就是这个权限，下面是root 用户的。<br><code>chmod 700 ~/.ssh</code> #注意：这两条权限设置特别重要，决定成败。<br><code>chmod 600 ~/.ssh/authorized_keys</code></p>
<p>测试使用ssh 密钥无密码登陆</p>
<p>首先测试下localhost ，看能否无密码登陆自己<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]# ssh localhost</div><div class="line">Last login: Thu Oct 19 09:01:34 2017 from 192.168.19.207</div><div class="line">[root@server1 ~]#</div></pre></td></tr></table></figure></p>
<p>演示下server2 电脑上进行登陆 server1 并进行操作，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># ssh server1</span></div><div class="line">The authenticity of host <span class="string">'server1 (192.168.19.185)'</span> can<span class="string">'t be established.</span></div><div class="line"><span class="string">ECDSA key fingerprint is bd:50:b8:e7:b3:69:ad:6c:14:6b:a9:fb:18:43:b9:c9.</span></div><div class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></div><div class="line"><span class="string">Warning: Permanently added '</span>server1,192.168.19.185<span class="string">' (ECDSA) to the list of known hosts.</span></div><div class="line"><span class="string">Last login: Wed Oct 18 16:46:53 2017 from server1</span></div><div class="line"><span class="string">[root@server1 ~]# exit</span></div><div class="line"><span class="string">logout</span></div><div class="line"><span class="string">Connection to server1 closed.</span></div></pre></td></tr></table></figure></p>
<p>之前配置 <code>authorized_keys</code> 搞了半天，虽然用了三行，但是后面没空格，导致 密钥不能使用，每次登陆还需要密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ssh server2</span></div><div class="line">root@server2<span class="string">'s password:</span></div></pre></td></tr></table></figure></p>
<p>没百度出来，自己最后卡了一个小时 恍然大悟，每行后面空出空格就好了。</p>
<p>在其余的电脑相互登陆试试，都能无密登陆，说明，配置成功。</p>
<p><strong>但是一定要注意的是，每次ssh登陆完成后，都要执行 <code>exit</code>，否则你的后续命令是在另外一台机器上执行的。</strong></p>
<h2 id="安装JDK-和Hadoop"><a href="#安装JDK-和Hadoop" class="headerlink" title="安装JDK 和Hadoop"></a>安装JDK 和Hadoop</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>三台机器都需要安装jdk，CentOS7 安装JDK参考 <a href="http://blog.wuwii.com/linux-jdk.html">http://blog.wuwii.com/linux-jdk.html</a></p>
<h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p>首先 三台机器都需要安装hadoop，都需要执行下面所有的操作。</p>
<h4 id="上载文件，并且解压"><a href="#上载文件，并且解压" class="headerlink" title="上载文件，并且解压"></a>上载文件，并且解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 opt]<span class="comment"># tar -xvf hadoop-2.8.1.tar.gz</span></div></pre></td></tr></table></figure>
<p>解压缩后得到<code>hadoop-2.8.1</code> 文件夹。</p>
<h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p>在/root 目录下新建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /root/hadoop</div><div class="line">mkdir /root/hadoop/tmp</div><div class="line">mkdir /root/hadoop/var</div><div class="line">mkdir /root/hadoop/dfs</div><div class="line">mkdir /root/hadoop/dfs/name</div><div class="line">mkdir /root/hadoop/dfs/data</div></pre></td></tr></table></figure></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>配置文件都在 解压后的文件夹 <code>hadoop-2.8.1/etc/hadoop</code> 下。</p>
<h5 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h5><p> 在configuration&gt;节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="修改-hadoop-env-sh文件"><a href="#修改-hadoop-env-sh文件" class="headerlink" title="修改 hadoop-env.sh文件"></a>修改 hadoop-env.sh文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hadoop-env.sh</code>文件<br>将<code>export JAVA_HOME=${JAVA_HOME}</code><br><strong>修改为：</strong><br><code>export JAVA_HOME=/usr/java/jdk1.8.0_144</code><br> <strong>说明：修改为自己的JDK路径和版本号</strong></p>
<h5 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hdfs-site.xml</code>文件，<br>在<configuration>节点内加入配置:</configuration></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明：dfs.permissions配置为false后，可以允许不要检查权限就生成dfs上的文件，方便倒是方便了，但是你需要防止误删除，请将它设置为true，或者直接将该property节点删除，因为默认就是true。</strong> </p>
<h5 id="新建并且修改mapred-site-xml"><a href="#新建并且修改mapred-site-xml" class="headerlink" title="新建并且修改mapred-site.xml"></a>新建并且修改mapred-site.xml</h5><p>在该版本中，有一个名为mapred-site.xml.template的文件，复制该文件，然后改名为mapred-site.xml，命令是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop]<span class="comment"># cp mapred-site.xml.template mapred-site.xml</span></div></pre></td></tr></table></figure></p>
<p>修改这个新建的mapred-site.xml文件，在<configuration>节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:49001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/var<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></configuration></p>
<h5 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h5><p> 修改<code>./hadoop-2.8.1/etc/hadoop/slaves</code>文件，将里面的localhost删除，添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server2</div><div class="line">server3</div></pre></td></tr></table></figure>
<h5 id="修改yarn-site-xml文件"><a href="#修改yarn-site-xml文件" class="headerlink" title="修改yarn-site.xml文件"></a>修改yarn-site.xml文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/yarn-site.xml</code> 文件，<br>在<configuration>节点内加入配置(注意了，内存根据机器配置越大越好):</configuration></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the applications manager interface in the RM.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The http address of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The https adddress of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the RM admin interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB,默认8182MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明：<code>yarn.nodemanager.vmem-check-enabled</code> 这个的意思是忽略虚拟内存的检查，如果你是安装在虚拟机上，这个配置很有用，配上去之后后续操作不容易出问题。如果是实体机上，并且内存够多，可以将这个配置去掉。</strong></p>
<h2 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h2><h3 id="在namenode上执行初始化"><a href="#在namenode上执行初始化" class="headerlink" title="在namenode上执行初始化"></a>在namenode上执行初始化</h3><p> 因为server1是namenode，server2和server3都是datanode，所以只需要对server1进行初始化操作，也就是对hdfs进行格式化。<br>进入到server1这台机器的/opt/hadoop-2.8.1/bin目录，执行初始化命令：<code>./hadoop namenode -format</code>  ，格式化一个新的分布式文件系统。<br>如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@server1 bin]<span class="comment"># cd /opt/hadoop-2.8.1/bin/                      </span></div><div class="line">[root@server1 bin]<span class="comment"># ./hadoop namenode -format                      </span></div><div class="line">DEPRECATED: Use of this script to execute hdfs <span class="built_in">command</span> is deprecated.</div><div class="line">Instead use the hdfs <span class="built_in">command</span> <span class="keyword">for</span> it.</div><div class="line"></div><div class="line">17/10/19 15:09:05 INFO namenode.NameNode: STARTUP_MSG: </div><div class="line">/************************************************************</div><div class="line">STARTUP_MSG: Starting NameNode</div><div class="line">STARTUP_MSG:   user = root</div><div class="line">STARTUP_MSG:   host = server1/192.168.19.185</div><div class="line">STARTUP_MSG:   args = [-format]</div><div class="line">STARTUP_MSG:   version = 2.8.1</div><div class="line">STARTUP_MSG:   classpath = /opt/hadoop-2.8.1/etc/hadoop:/opt/hadoop-2.8.1/share/</div></pre></td></tr></table></figure></p>
<p>执行完成，不报错，说明启动成功。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019151459.png" alt="image"></p>
<p>格式化成功后，可以在看到在<code>/root/hadoop/dfs/name/</code>目录多了一个current目录，而且该目录内有一系列文件。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019151635.png" alt="image"></p>
<h3 id="在namenode上执行启动命令"><a href="#在namenode上执行启动命令" class="headerlink" title="在namenode上执行启动命令"></a>在namenode上执行启动命令</h3><p>因为server1是namenode，server2和server3都是datanode，所以只需要再server1上执行启动命令即可。<br>进入到hserver1这台机器的<code>/opt/hadoop-2.8.1/sbin</code>目录，也就是执行命令：<br><code>cd /opt/hadoop/hadoop-2.8.0/sbin</code><br>执行初始化脚本，也就是执行命令：<br><code>./start-all.sh</code><br>第一次执行上面的启动命令，会需要我们进行交互操作，在问答界面上输入yes回车</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></div><div class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</div><div class="line">Starting namenodes on [server1]</div><div class="line">server1: namenode running as process 3609. Stop it first.</div><div class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</div><div class="line">server2: datanode running as process 17888. Stop it first.</div><div class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</div><div class="line">Starting secondary namenodes [0.0.0.0]</div><div class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</div><div class="line">starting yarn daemons</div><div class="line">resourcemanager running as process 3942. Stop it first.</div><div class="line">server3: starting nodemanager, logging to /opt/hadoop-2.8.1/logs/yarn-root-nodemanager-server3.out</div><div class="line">server2: nodemanager running as process 18038. Stop it first.</div><div class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</div><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></div><div class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</div><div class="line">Starting namenodes on [server1]</div><div class="line">server1: namenode running as process 3609. Stop it first.</div><div class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</div><div class="line">server2: datanode running as process 17888. Stop it first.</div><div class="line">Starting secondary namenodes [0.0.0.0]</div><div class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</div><div class="line">starting yarn daemons</div><div class="line">resourcemanager running as process 3942. Stop it first.</div><div class="line">server2: nodemanager running as process 18038. Stop it first.</div><div class="line">server3: starting no</div></pre></td></tr></table></figure>
<p>没报错，说明执行成功，之前我的server3 上的一个xml 配置错了，很明了的说出了错误的位置。  </p>
<h2 id="测试hadoop"><a href="#测试hadoop" class="headerlink" title="测试hadoop"></a>测试hadoop</h2><p>启动后，需要测试能使用，才能说明配置正确</p>
<p>首先需要关闭防火墙。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]# systemctl stop firewalld.service</div></pre></td></tr></table></figure>
<p>我们的namanode机器是server1，IP是192.168.19.185，直接在谷歌浏览器上输入到端口 50070，自动跳转到了overview页面 （dfshealth.html）<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019153415.png" alt="image"></p>
<p>继续；<br>测试 8088 端口 ：<br>自动跳转到了cluster页面<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171019153453.png" alt="image"></p>
<p>在namenode机器上执行<code>jps</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@server1 hadoop-2.8.1]<span class="comment"># jps</span></div><div class="line">12469 ResourceManager</div><div class="line">12119 NameNode</div><div class="line">12313 SecondaryNameNode</div><div class="line">12730 Jps</div></pre></td></tr></table></figure></p>
<p>在datanode机器上执行<code>jps</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server3 hadoop-2.8.1]<span class="comment"># jps</span></div><div class="line">10776 NodeManager</div><div class="line">11114 Jps</div><div class="line">10635 DataNode</div></pre></td></tr></table></figure></p>
<p>这只能证明它们启动成功，还要看它们之间互相通信。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171025165042.png" alt="hadoop"><br>出现datanode 机器，通信成功。</p>
<p>配置完成。</p>
<p><strong>参考博客：</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/pucao_cug/article/details/71698903">http://blog.csdn.net/pucao_cug/article/details/71698903</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 安装JDK和环境变量的配置]]></title>
      <url>/linux-jdk.html</url>
      <content type="html"><![CDATA[<ul>
<li>系统环境：centos7</li>
<li>安装方式：rpm安装</li>
<li>版本：jdk1.8.0_144</li>
</ul>
<a id="more"></a>
<h4 id="首先查看电脑的-jdk"><a href="#首先查看电脑的-jdk" class="headerlink" title="首先查看电脑的 jdk"></a>首先查看电脑的 jdk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># java -version</span></div><div class="line">openjdk version <span class="string">"1.8.0_102"</span></div><div class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</div><div class="line">OpenJDK 64-Bit Server VM (build 25.102-b14, mixed mode)</div></pre></td></tr></table></figure>
<p>是默认安装的openjdk 不是我们需要的oracle 版本的，安装前需要卸载 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># rpm -qa | grep java</span></div><div class="line">javapackages-tools-3.4.1-11.el7.noarch</div><div class="line">java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</div><div class="line">java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">tzdata-java-2016g-2.el7.noarch</div><div class="line">java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</div><div class="line">java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">python-javapackages-3.4.1-11.el7.noarch</div><div class="line"></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps tzdata-java-2016g-2.el7.noarch</span></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e -nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span></div><div class="line">rpm: -nodeps: unknown option</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e -nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">rpm: -nodeps: unknown option</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">^[[A[root@server2 rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span></div><div class="line">[root@server2 ~]<span class="comment"># rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span></div></pre></td></tr></table></figure></p>
<p>最后查看卸载完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 ~]<span class="comment"># java -version</span></div><div class="line">-bash: /usr/bin/java: No such file or directory</div></pre></td></tr></table></figure></p>
<h4 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h4><p>官网下载</p>
<h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>我下载的是rpm 文件，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment"># rpm -ivh jdk-8u144-linux-x64.rpm </span></div><div class="line">Preparing...                          <span class="comment">################################# [100%]</span></div><div class="line">Updating / installing...</div><div class="line">   1:jdk1.8.0_144-2000:1.8.0_144-fcs  rpm                                  (  1%<span class="comment">################################# [100%]</span></div><div class="line">Unpacking JAR files...</div><div class="line">        tools.jar...</div><div class="line">        plugin.jar...</div><div class="line">        javaws.jar...</div><div class="line">        deploy.jar...</div><div class="line">        rt.jar...</div><div class="line">        jsse.jar...</div><div class="line">        charsets.jar...</div><div class="line">        localedata.jar...</div></pre></td></tr></table></figure></p>
<p>默认安装的是路径是 <code>/usr/java</code></p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>在 <code>/etc/profile</code> 文件中加入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/java/jdk1.8.0_144 PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/</div><div class="line">jre/lib/ext:<span class="variable">$JAVA_HOME</span>/lib/tools.jar <span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure>
<p>使生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment"># source /etc/profile</span></div><div class="line">-bash: jre/lib/ext:/usr/java/jdk1.8.0_144/lib/tools.jar: No such file or directory</div></pre></td></tr></table></figure></p>
<p>查看系统环境状态path 是否生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@server2 opt]<span class="comment">#  echo $PATH </span></div><div class="line">/usr/java/jdk1.8.0_144/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</div></pre></td></tr></table></figure></p>
<p>完成。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171018]]></title>
      <url>/20171018.html</url>
      <content type="html"><![CDATA[<p>最近看她的空间留言，写了又删，删了又写，心里也和不是滋味，现在一想起她，就想到昨天见到第一眼她那种憔悴的面容，真是令人疼惜。我想可能真的不应该去见她吧，弄得现在都没能说上两句话，可能是我太自私了点，打破了一点存留下的美好吧。</p>
<p>最近脑经确实有点炸裂，确实不怎么敢再去看她的空间了，不想再去看那种互相残忍的伤害的局面，不知道他们心里怎么想的，我根本就不想明白，明白的越多，失望估计也就越大了。突然想起，以前那么长时间公司有网，有wifi 也要强忍着不上QQ 不看手机， 就是怕突然看到她的动态，就像一下子惊起梦中的我，然后开始梦游，梦游开始不知觉中触碰各种神经，幻想着有人来刺伤自己。</p>
<p>自从昨天打通了她的手机，今天就无时无刻的想起要去给她拨号过去，问下，你怎么现在再干嘛，过得怎么样了。想着，还是算了，昨天她见到我那种惊慌失措的样子，是真的可爱极了，她一直说她很忙，口中支支吾吾的说还有什么事情没做完。我也是那种慢热的人，做事总是顾及其他，想想还是放下，生怕打扰她，弄不好什么时候又要拉黑了。</p>
<p>想着今晚再打过去吧，不论对错，或许，相见不如怀念，至少能不必再给她带来更多的压力，我想我这个人根本就读不懂女人的心吧，就是直嘛，也好，不要去想那些隐喻，也不要去有那些烦恼，姑且就将自己的快乐带给她人。</p>
<p>既然她想做个坚强的人，就希望她永远做个坚强的女人吧，不要轻易的被击倒。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 上永久修改hostname]]></title>
      <url>/linux-hostname.html</url>
      <content type="html"><![CDATA[<p>由于要做Hadoop集群，需要修改系统的<code>hostname</code> 做一个映射，hostname 命令只能临时修改，重启就会失效，为了有效性，所以需要永久修改系统的hostname。</p>
<p>百度了下，网上都是说修改 <code>/etc/sysconfig/network</code> 配置文件，修改<code>hostname</code><br>参数，reboot 重启后也生效，然而我这样做了并没有生效，而且我打开这个配置文件，并没有Hostname 参数，完全是自己后来加上去的，它里面只有一句话 <code># Created by anaconda</code>。<br><a id="more"></a></p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><h5 id="临时生效"><a href="#临时生效" class="headerlink" title="临时生效"></a>临时生效</h5><p>使用 <code>hostname</code> 命令 ，hostname <new hostname="">，系统重启后失效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># hostname</span></div><div class="line">localhost.localdomain</div><div class="line">[root@localhost ~]<span class="comment"># hostname server1</span></div><div class="line">[root@localhost ~]<span class="comment"># hostname</span></div><div class="line">server1</div><div class="line">[root@localhost ~]<span class="comment">#</span></div></pre></td></tr></table></figure></new></p>
<p>也可以直接cat /proc/sys/kernel/hostname查看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat /proc/sys/kernel/hostname</span></div><div class="line">server1</div></pre></td></tr></table></figure></p>
<p><code>hostname newname</code> 即要设置的新的hostname，运行后立即生效，但是在系统重启后会丢失所做的修改，如果要永久更改系统的hostname，就要修改相关的设置文件。</p>
<h5 id="永久更改Linux的hostname"><a href="#永久更改Linux的hostname" class="headerlink" title="永久更改Linux的hostname"></a>永久更改Linux的hostname</h5><p>man hostname里有这么一句话，</p>
<blockquote>
<p>The host name is usually set once at system startup in<br>/etc/rc.d/rc.inet1 or /etc/init.d/boot (normally by reading the<br>contents of a file which contains the host name, e.g. /etc/hostname).”</p>
</blockquote>
<p>RedHat里没有这个文件，而是由/etc/rc.d/rc.sysinit这个脚本负责设置系统的hostname，它读取/etc/sysconfig/network这个文本文件，RedHat的hostname就是在这个文件里设置。</p>
<p>所以，如果要永久修改RedHat的hostname，就修改/etc/sysconfig/network文件，将里面的HOSTNAME这一行修改成 HOSTNAME=NEWNAME，其中NEWNAME就是你要设置的hostname。</p>
<p><strong>Debian发行版的hostname的配置文件是/etc/hostname。</strong></p>
<p>修该配置文件后，重启系统就会读取配置文件设置新的hostname。</p>
<p>我想我就是 Debian发行版 吧 执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/hostname </span></div><div class="line">localhost.localdomain</div></pre></td></tr></table></figure></p>
<p>果然是这里，直接修改，保存，退出，重启。<br>再去查看Hostname<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># hostname</span></div><div class="line">server1</div><div class="line">[root@server1 ~]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>修改成功</p>
<h4 id="hostname与-etc-hosts的关系"><a href="#hostname与-etc-hosts的关系" class="headerlink" title="hostname与/etc/hosts的关系"></a>hostname与/etc/hosts的关系</h4><p>很过人一提到更改hostname首先就想到修改/etc/hosts文件，认为hostname的配置文件就是/etc/hosts。其实不是的。</p>
<p>hosts文件的作用相当如DNS，提供IP地址到hostname的对应。</p>
<p>早期的互联网计算机少，单机hosts文件里足够存放所有联网计算机。</p>
<p>不过随着互联网的发展，这就远远不够了。于是就出现了分布式的DNS系统。由DNS服务器来提供类似的IP地址到域名的对应。具体可以man hosts。</p>
<p><strong>Linux系统在向DNS服务器发出域名解析请求之前会查询/etc/hosts文件，如果里面有相应的记录，就会使用hosts里面的记录。<code>/etc/hosts</code>文件通常里面包含这一条记录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1    localhost.localdomain   localhost</div></pre></td></tr></table></figure></p>
<p>hosts文件格式是一行一条记录，分别是IP地址 <code>hostname aliases</code>，三者用空白字符分隔，<code>aliases</code>可选。</p>
<p><strong>127.0.0.1到localhost这一条建议不要修改，因为很多应用程序会用到这个，比如sendmail，修改之后这些程序可能就无法正常运行。</strong><br>在<code>/etc/hosts</code> 添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">192.168.19.185  server1</div><div class="line">192.168.19.184  server2</div></pre></td></tr></table></figure></p>
<p>ping server2 能ping 通说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@server1 ~]<span class="comment"># ping server2       </span></div><div class="line">PING server2 (192.168.19.184) 56(84) bytes of data.</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=1 ttl=64 time=0.421 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=2 ttl=64 time=0.602 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=3 ttl=64 time=0.304 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=4 ttl=64 time=1.10 ms</div><div class="line">64 bytes from server2 (192.168.19.184): icmp_seq=5 ttl=64 time=0.545 ms</div></pre></td></tr></table></figure></p>
<p>还有一个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# hostname</div><div class="line">localhost.localdomain</div><div class="line">[root@localhost ~]# vim /etc/hosts</div><div class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</div><div class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</div><div class="line">192.168.19.199  server3</div></pre></td></tr></table></figure></p>
<p>重启系统后发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@server3 ~]# hostname</div><div class="line">server3</div><div class="line">[root@server3 ~]#</div></pre></td></tr></table></figure></p>
<p>hostname 被修改了</p>
<p>在 <code>/etc/rc.d/rc.sysinit</code> 这个启动脚本里发现了问题的所在。<br>rc.sysinit文件里一开始就设置了hostname。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ -f /etc/sysconfig/network ]; <span class="keyword">then</span></div><div class="line">. /etc/sysconfig/network</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$HOSTNAME</span>"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"(none)"</span> ]; <span class="keyword">then</span></div><div class="line">HOSTNAME=localhost</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<p>确实使用了<code>/etc/sysconfig/network</code> 里的hostname值。不过后面还有一段关于设置hostname的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ipaddr=</div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"localhost"</span> -o <span class="string">"<span class="variable">$HOSTNAME</span>"</span> = <span class="string">"localhost.localdomain"</span> ]</div><div class="line">; <span class="keyword">then</span></div><div class="line">ipaddr=$(ip addr show to 0/0 scope global | awk <span class="string">'/[[:space:]]inet</span></div><div class="line"><span class="string">/ &#123; print gensub("/.*","","g",$2) &#125;'</span>)</div><div class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$ipaddr</span>"</span> ]; <span class="keyword">then</span></div><div class="line"><span class="built_in">eval</span> $(ipcalc -h <span class="variable">$ipaddr</span> 2&gt;/dev/null)</div><div class="line">hostname <span class="variable">$&#123;HOSTNAME&#125;</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>脚本判断hostname是否为localhost或者localhost.localdomain，如果是的话，将会使用接口IP地址对应的 hostname来重新设置系统的hostname。问题就出在这里，我的/etc/sysconfig/network 默认的hostname是 localhost.localdomain，它的IP是192.168.19.199，而/etc/hosts里有192.168.19.199的记录。 于是就用192.168.19.199这条记录来替换了hostname。</p>
<p>估计这也是很多人将/etc/hosts误以为是hostname的配置文件的原因。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>查看hostname : hostname</li>
<li>临时修改: hostname <new hostname=""></new></li>
<li>vim /etc/hosts 修改 hostname 参数为 newname</li>
<li>vim /etc/sysconfig/network 修改 hostname 参数为 newname</li>
</ol>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/yangshangwei/article/details/52878530">http://blog.csdn.net/yangshangwei/article/details/52878530</a>   </p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171017]]></title>
      <url>/20171017.html</url>
      <content type="html"><![CDATA[<p>我想我是个固执的人吧，今天上午看到你跟我说她胃疼，最终还是下定决心，去学校见见她吧。</p>
<p>中午下班跟经理打声招呼说下午晚点来，得到回应马上就出发了，第一站是来到药店帮忙询问下暖胃的药吧，平时自己吃过的拿吧，外加一盒消炎的。</p>
<p>我到了学校，我感觉到我已经怂了，好多年没见她了，能把她叫出来吗，经历一段波折，通过手机还是成功约出了她，最终在人海的广场上看到了她，第一眼看上去她看起来憔悴了好多，人也是超级的瘦弱，心中都是一阵疼痛，这么一段时间，人都成什么样子了，这么突然的见面，在这种场合，都有些紧张吧，曾经说，最喜欢看的就是她的眼睛了，现在突然不敢看了，是内心的愧疚吧。</p>
<p>在遇见她的时候，感觉到内心好像充满了惊喜，又有点害怕马上消失，我想是我真的还没准备好，自己现在还是像以前一样的差劲，不敢怎么看她，但是就是这么恰巧，她就这么的一直住在我心里。</p>
<p>她就这样在前面走着，我就在旁边跟着，真是个大傻蛋啊，但是我当时真的什么也想不到说什么了，因为脑子想的都是她，杂乱到无法思考我是来干嘛的，怎么聊下去。说了点心里话，她却一直浅浅的回应，就像手足无措的孩子一样，人还往树上撞，我是超级的难受啊，这样的人怎么去照顾好自己，真的想过去抓住她的手，跟她说，跟着我吧。期间问了她以后想去哪，她说哪里工资高就去哪，我问，你不是那种缺钱的人吧；她回答得那么快，生活开支很高的，我明白她，其实她是个很节俭的人，没什么攀比的，只是想让身边的人过得更好些吧，却一直在逞强着，难受。我随口提了下为什么会留在武汉吧，以前对她说过，她大概忘了，我也不想再提了，或许，很难受，即使不难受，也没人敢承诺一辈子能在一个地方工作的，承诺太多，都是废话了，再自己没信心办好一件事的时候，再也不会去承诺了，我只是轻轻的告诉自己，以后跟着你了。说了下以前高中的时候，我想我可能是个固执的人，这么多年都没能忘记她，内心都是你，这个姑娘，真是个骗子，居然跟我小声说可能不合适。。。当然说的好多我走的时候都想不起来。。有点情绪了。</p>
<p>最后很简单，她送我离开了，走的时候看着她，她太害羞了，她见到我那种惊慌失措的样子，是真的可爱极了，她一直说她很忙，口中支支吾吾的说还有什么事情没做完，我也没听清，压根没打算听这些无用的话语，我将药给她了，离开了，没去追回她，看着她那孤单的背影，真想抱一下，心里真的好想去懂她啊，只是留了张背影照片，模糊了视线。告诉她，等我。</p>
<p>好好善待自己，活出最美丽的自己，多么希望有些事情不要变了。</p>
<p>我想我也是个大傻蛋，中午没吃饭，赶回来两点半，吃了两个包子，混了个苹果，就是直接困了一下午吧，，，</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j格式输出工具类]]></title>
      <url>/custom-log.html</url>
      <content type="html"><![CDATA[<p>将输出的Log日志进行输出到指定位置，控制台、文件、邮件和数据库等，需要对每一条日志的输出格式，把日志分为不同的级别，写一个工具类可以把日志信息格式化输出到 控制台 或 文件等。<a id="more"></a></p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.io.StringWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: Log </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>: LOG工具类</span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span></span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(Log.class);</div><div class="line">	 <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印警告</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.warn(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.warn(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印信息</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.info(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.info(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 打印错误</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            </div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.error(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.error(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * debug</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">/*** 获取输出信息的代码的位置 ***/</span></div><div class="line">            String location = <span class="string">""</span>;</div><div class="line">            StackTraceElement[] stacks = Thread.currentThread().getStackTrace();</div><div class="line">            location = stacks[<span class="number">2</span>].getClassName() + <span class="string">"."</span> + stacks[<span class="number">2</span>].getMethodName()</div><div class="line">                    + <span class="string">"("</span> + stacks[<span class="number">2</span>].getLineNumber() + <span class="string">")"</span>;</div><div class="line">            </div><div class="line">            <span class="comment">/*** 是否是异常  ***/</span></div><div class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">                Exception e = (Exception) obj;</div><div class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">                e.printStackTrace(<span class="keyword">new</span> PrintWriter(sw, <span class="keyword">true</span>));</div><div class="line">                String str = sw.toString();</div><div class="line">                log.debug(location + str);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                log.debug(location + obj.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码忘了从哪里copy 过来的，暂时是这么用的，感觉可以自己定制打印这个规则很好，而且使用的时候直接调用静态方法就可以了，在也不用去各个类上面获取Logger 。</p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util; </div><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test; </div><div class="line"><span class="keyword">import</span> org.junit.Before; </div><div class="line"><span class="keyword">import</span> org.junit.After; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* Log Tester. </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> Zhang Kai </span></div><div class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;10/17/2017&lt;/pre&gt; </span></div><div class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123; </div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: warn(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWarn</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.warn(<span class="string">"他真的很喜欢你 像春雨下得淅淅沥沥"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: info(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.info(<span class="string">"他真的很喜欢你 像夏日聒噪的蝉鸣"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: error(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testError</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.error(<span class="string">"他真的很想念你 像秋叶落得悄无声息"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: debug(Object obj) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDebug</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    Log.debug(<span class="string">"他真的很喜欢你 想冬天的雪沁在心里"</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果， 这样定制的结果，更符合我们的阅读习惯，更加清晰的查看日志内容<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171017111758.png" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> log4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中Log4j的使用及配置详情]]></title>
      <url>/java-log4j.html</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>Log4j</code>是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p>
</blockquote>
<p>项目中日志功能十分强大，可以实时监控你的代码的运行情况，并且就像书页一样清晰可见。<br><a id="more"></a></p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>首先在pom.xml 配置好相关依赖，我这里只使用Log4j，当然还可以使用slf4j 可以管理，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在web.xml 监听 log4j.properties<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启动Log4j --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="配置log4j-properties-配置文件"><a href="#配置log4j-properties-配置文件" class="headerlink" title="配置log4j.properties 配置文件"></a>配置log4j.properties 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG, stdout , R  </div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender  </div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  </div><div class="line">log4j.appender.stdout.layout.ConversionPattern=[QC] %p [%t] %C.%M(%L) | %m%n  </div><div class="line">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  </div><div class="line">log4j.appender.R.File=d://log//FTASWorkFlow.log  </div><div class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout  </div><div class="line">log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n&lt;/span&gt;</div></pre></td></tr></table></figure>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p><code>rootLogger</code>也可以写作<code>rootCategory</code>,<br>rootLogger value的含义<br>第一个逗号前表示log的级别：<code>FATAL</code>,<code>ERROR</code>,<code>WARN</code>,<code>INFO</code>,<code>DEBUG</code>,级别依次降低，开发的时候一般选作DEBUG，上线前期可以INFO或者DEBUG，版本稳定了可以WARN或者ERROR。稳定以后可以每天将日志发送到你的邮箱（至于怎么发，看最下面的Appender），这样就不需要每天去看检查上线的项目有没有异常。</p>
<p>第一个逗号后面的表示你定义的<code>appender</code>，比如我们这里定义了stdout和R，这个名字可以随便定，和下面的对应就好了。这里的stdout代表控制台输出，上线的时候别忘记关掉，直接在rootLogger里去掉stdout就好了。</p>
<h5 id="Log4j提供的appender有以下几种："><a href="#Log4j提供的appender有以下几种：" class="headerlink" title="Log4j提供的appender有以下几种："></a>Log4j提供的appender有以下几种：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">org.apache.log4j.ConsoleAppender（控制台）</div><div class="line">org.apache.log4j.FileAppender（文件）</div><div class="line">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</div><div class="line">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生新文件）</div><div class="line">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</div><div class="line">ConsoleAppender和DailyRollingFileAppender以及RollingFileAppender用的比较多，后面两个用哪个看需求。</div></pre></td></tr></table></figure>
<h5 id="log4j提供以下4种布局样式："><a href="#log4j提供以下4种布局样式：" class="headerlink" title="log4j提供以下4种布局样式："></a>log4j提供以下4种布局样式：</h5><p>不同的Appender有不同的属性，但是Appender都会有一个属性layout，layout又有一个属性PatternLayout<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">org.apache.log4j.HTMLLayout（以HTML表格形式布局）</div><div class="line">org.apache.log4j.PatternLayout（可以灵活地指定布局模式，就是可以自定义输出样式），</div><div class="line">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</div><div class="line">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</div></pre></td></tr></table></figure></p>
<h5 id="再看一下PatternLayout的值代表的什么意思"><a href="#再看一下PatternLayout的值代表的什么意思" class="headerlink" title="再看一下PatternLayout的值代表的什么意思"></a>再看一下PatternLayout的值代表的什么意思</h5><p><code>%d</code> 输出日志时间点的日期或时间，紧跟一对花括号进行自定义格式<br><code>%t</code> 输出产生该日志事件的线程名<br><code>%c</code> 输出所属的类目，通常就是所在类的全名<br><code>%l</code>  输出行号<br><code>%m</code> 输出代码中指定的消息<br><code>%n</code> 输出一个回车换行符，Windows平台为 <code>\r\n</code>，Unix平台为 <code>\n</code>，也就是一跳消息占用一行，所以<code>%m%n</code>基本都是一起用<br><code>%p</code> 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>   我们经常会看到[%-5p]这样的用法，就是对%p进行格式化，占用几个字符空间，因为INFO，DEBUG他们有的占用4个有的占用5个，日志看起来不对其，进行一个格式化而已。<br><code>%r</code> 输出自应用启动到输出该log信息耗费的毫秒数<br><code>%c</code> 输出所属的类目，通常就是所在类的全名<br><code>%x</code> 输出对齐  </p>
<h5 id="再看看appender的其他属性"><a href="#再看看appender的其他属性" class="headerlink" title="再看看appender的其他属性"></a>再看看appender的其他属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log4j.appender.FILE.File=D:/logs/log4j.log      --------定义输出文件的位置及文件名</div><div class="line">log4j.appender.FILE.MaxFileSize=1MB             --------定义每个文件的大小，超过这个大小，则新建一个文件，注意单位 MB 或 KB</div><div class="line">log4j.appender.D.Threshold = DEBUG              --------输出DEBUG级别以上的日志</div></pre></td></tr></table></figure>
<h5 id="输出到邮件"><a href="#输出到邮件" class="headerlink" title="输出到邮件"></a>输出到邮件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender（指定输出到邮件）</div><div class="line">log4j.appender.MAIL.Threshold=FATAL</div><div class="line">log4j.appender.MAIL.BufferSize=10</div><div class="line">log4j.appender.MAIL.From=chenyl@hollycrm.com（发件人）</div><div class="line">log4j.appender.MAIL.SMTPHost=mail.hollycrm.com（SMTP服务器）</div><div class="line">log4j.appender.MAIL.Subject=Log4J Message</div><div class="line">log4j.appender.MAIL.To=chenyl@hollycrm.com（收件人）</div><div class="line">log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout（布局）</div><div class="line">log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）</div><div class="line"> </div><div class="line">输出到数据库</div><div class="line">log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender（指定输出到数据库）</div><div class="line">log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test（指定数据库URL）</div><div class="line">log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver（指定数据库driver）</div><div class="line">log4j.appender.DATABASE.user=root（指定数据库用户）</div><div class="line">log4j.appender.DATABASE.password=root（指定数据库用户密码）</div><div class="line">log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES (&apos;[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n&apos;)（组织SQL语句）</div><div class="line">log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout（布局）</div><div class="line">log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）</div></pre></td></tr></table></figure>
<h5 id="我的项目最终配置"><a href="#我的项目最终配置" class="headerlink" title="我的项目最终配置"></a>我的项目最终配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"># Rules reminder:</div><div class="line"># DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</div><div class="line"></div><div class="line">### 设置级别和目的地(这里多个目的地) ###</div><div class="line">#级别为DEBUG</div><div class="line">#目的地为CONSOLE，zhangLog；zhangLog为自定义输出端，可随意命名</div><div class="line">log4j.rootLogger = DEBUG,CONSOLE,zhangLog</div><div class="line"></div><div class="line">### 这里的com.wuwii是我项目的包名，也就是在这个包记录日志时，开发阶段是只记录DEBUG及以上级别的日志，正式上线的时候可以改成INFO、ERROR</div><div class="line">#### 当然就可以设定特定包打印的级别</div><div class="line">log4j.logger.com.wuwii=DEBUG</div><div class="line"></div><div class="line">#Log4j提供的appender有以下几种：</div><div class="line">#org.apache.log4j.ConsoleAppender（控制台），</div><div class="line">#org.apache.log4j.FileAppender（文件），</div><div class="line">#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</div><div class="line">#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</div><div class="line">#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</div><div class="line"></div><div class="line">### 输出到控制台 ###</div><div class="line">log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.CONSOLE.Target = System.out</div><div class="line">log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.CONSOLE.layout.ConversionPattern =  %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</div><div class="line"></div><div class="line"># My logging configuration...</div><div class="line">## 可以设置特定工具的打印日志级别</div><div class="line">log4j.logger.org.mybatis.jpetstore=INFO</div><div class="line">log4j.logger.com.ibatis=INFO</div><div class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO</div><div class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO</div><div class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO</div><div class="line">log4j.logger.java.sql.Connection = INFO</div><div class="line">log4j.logger.java.sql.Statement = INFO</div><div class="line">log4j.logger.java.sql.PreparedStatement = INFO</div><div class="line">log4j.logger.java.sql.ResultSet = INFO</div><div class="line"></div><div class="line">### 输出到日志文件 ###</div><div class="line">#写到文件中，并且追加</div><div class="line">log4j.appender.zhangLog = org.apache.log4j.DailyRollingFileAppender</div><div class="line"># 设置文件输出位置</div><div class="line">#log4j.appender.zhangLog.File =D\:\\debug.log</div><div class="line">log4j.appender.zhangLog.File=$&#123;catalina.home&#125;/logs/wuwii/debug.log</div><div class="line">#log4j.appender.zhangLog.File =/var/debug/debug.log</div><div class="line">log4j.appender.zhangLog.Append = true</div><div class="line">## 只输出DEBUG级别以上的日志</div><div class="line">log4j.appender.zhangLog.Threshold = DEBUG</div><div class="line">#&apos;.&apos;yyyy-MM-dd: 设置为每天产生一个新的文件</div><div class="line">#1)’.’yyyy-MM: 每月</div><div class="line">#2)’.’yyyy-ww: 每周</div><div class="line">#3)’.’yyyy-MM-dd: 每天</div><div class="line">#4)’.’yyyy-MM-dd-a: 每天两次</div><div class="line">#5)’.’yyyy-MM-dd-HH: 每小时</div><div class="line">#6)’.’yyyy-MM-dd-HH-mm: 每分钟</div><div class="line">log4j.appender.zhangLog.DatePattern = &apos;.&apos;yyyy-MM-dd</div><div class="line">#当文件达到2kb时，文件会被备份成&quot;debug.txt.1&quot;，新的&quot;log.txt&quot;继续记录log信息</div><div class="line">## 在DailyRollingFileAppender 没这个属性</div><div class="line">#log4j.appender.zhangLog.MaxFileSize = 2KB </div><div class="line">#最多建5个文件，当文件个数较多时，后面不再新建文件</div><div class="line">## 在DailyRollingFileAppender 没这个属性</div><div class="line">#log4j.appender.zhangLog.MaxBackupIndex = 5</div><div class="line">log4j.appender.zhangLog.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.zhangLog.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] - [%p] [%c&#123;1&#125;:%L] [%M] %m%n</div><div class="line">#设置子Logger是否继承父Logger的输出源</div><div class="line">#默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出</div><div class="line">log4j.additivity.zhangLog = false</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试的类没有启动 web ，默认的是查找 resources 根目录下的  <code>log4j.properties</code> ，没有则找不到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.wuwii.test;</div><div class="line">import org.apache.log4j.Logger;</div><div class="line"></div><div class="line">public class Log4jTest &#123;</div><div class="line">    public static Logger logger1 = Logger.getLogger(Log4jTest.class);</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //logger1</div><div class="line">        logger1.trace(&quot;他真的很喜欢你 像春雨下得淅淅沥沥，trace&quot;);</div><div class="line">        logger1.debug(&quot;他真的很喜欢你 像夏日聒噪的蝉鸣，debug&quot;);</div><div class="line">        logger1.info(&quot;他真的很想念你 像秋叶落得悄无声息，info&quot;);</div><div class="line">        logger1.warn(&quot;他真的很喜欢你 想冬天的雪沁在心里，warn&quot;);</div><div class="line">        logger1.error(&quot;他真的很喜欢你 像狗本性难移，error&quot;);</div><div class="line">        logger1.fatal(&quot;他真的很喜欢你 所以他可以一直没脸没皮，fatal&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行代码后，我们可以看到控制台打印了：</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016224024.png" alt="image"></p>
<p>因为我们设置了输入到控制台了，再去查看我们的打印日志文件的位置，也可以看到报错信息，使用的 是<code>org.apache.log4j.DailyRollingFileAppender</code>，并没有 <code>maxBackupIndex</code> 和 <code>maxFileSize</code> 属性，所以上面的配置文件也不正确，需要删掉这两行，</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016224226.png" alt="image"></p>
<p>使用的是每天生成一个文件，前一天的备份成<code>yyyy-MM-dd</code> 符合。</p>
<p>打开文件看到</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016224532.png" alt="image"></p>
<p>正确写入，</p>
<p>Log4j的使用及配置就是这样的了。</p>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/zhengliusu/article/details/44619023">http://blog.csdn.net/zhengliusu/article/details/44619023</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> log4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用spring-test 结合JUnit完成单元测试]]></title>
      <url>/spring-test.html</url>
      <content type="html"><![CDATA[<p>Java web项目怎么能少了spring ,当然少不了代码的单元测试，学习一下spring-test 结合 JUnit 完成单元测试，这样做会有很多好处，可以不用写额外一些方法去重复加载 applicationContext ，而且可以事务回滚等特点。下面再详细介绍。<br><a id="more"></a></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>很多人做单元测试的时候，还要在Before方法中，初始化Spring容器，导致容器被初始化多次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Before</span>  </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;  </div><div class="line">      ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext( <span class="string">"classpath:spring/spring-basic.xml"</span>);  </div><div class="line">      baseDao = (IBaseDao) ctx.getBean(<span class="string">"baseDao"</span>);  </div><div class="line">      assertNotNull(baseDao);  </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在开发基于Spring的应用时，如果你还直接使用Junit进行单元测试，那你就错过了Spring满汉全席中最重要的一道硬菜。</p>
<p>再说这道菜之前，我们先来讨论下，在基于Spring的javaweb项目中使用Junit直接进行单元测试有什么不足</p>
<h4 id="导致多次Spring容器初始化问题"><a href="#导致多次Spring容器初始化问题" class="headerlink" title="导致多次Spring容器初始化问题"></a>导致多次Spring容器初始化问题</h4><p>根据JUnit测试方法的调用流程，每执行一个测试方法都会创建一个测试用例的实例并调用setUp()方法。由于一般情况下，我们在setUp()方法中初始化Spring容器，这意味着如果测试用例有多少个测试方法，Spring容器就会被重复初始化多次。虽然初始化Spring容器的速度并不会太慢，但由于可能会在Spring容器初始化时执行加载Hibernate映射文件等耗时的操作，如果每执行一个测试方法都必须重复初始化Spring容器，则对测试性能的影响是不容忽视的；<br> /////////使用Spring测试套件，Spring容器只会初始化一次！ </p>
<h4 id="需要使用硬编码方式手工获取Bean"><a href="#需要使用硬编码方式手工获取Bean" class="headerlink" title="需要使用硬编码方式手工获取Bean"></a>需要使用硬编码方式手工获取Bean</h4><p>  在测试用例类中我们需要通过ctx.getBean()方法从Spirng容器中获取需要测试的目标Bean，并且还要进行强制类型转换的造型操作。这种乏味的操作迷漫在测试用例的代码中，让人觉得烦琐不堪； </p>
<p>////////使用Spring测试套件，测试用例类中的属性会被自动填充Spring容器的对应Bean ，无须在手工设置Bean！ </p>
<h4 id="数据库现场容易遭受破坏"><a href="#数据库现场容易遭受破坏" class="headerlink" title="数据库现场容易遭受破坏"></a>数据库现场容易遭受破坏</h4><p>  测试方法对数据库的更改操作会持久化到数据库中。虽然是针对开发数据库进行操作，但如果数据操作的影响是持久的，可能会影响到后面的测试行为。举个例子，用户在测试方法中插入一条ID为1的User记录，第一次运行不会有问题，第二次运行时，就会因为主键冲突而导致测试用例失败。所以应该既能够完成功能逻辑检查，又能够在测试完成后恢复现场，不会留下“后遗症”； </p>
<p>////////使用Spring测试套件，Spring会在你验证后，自动回滚对数据库的操作，保证数据库的现场不被破坏，因此重复测试不会发生问题！ </p>
<h4 id="不方便对数据操作正确性进行检查"><a href="#不方便对数据操作正确性进行检查" class="headerlink" title="不方便对数据操作正确性进行检查"></a>不方便对数据操作正确性进行检查</h4><p>假如我们向登录日志表插入了一条成功登录日志，可是我们却没有对t_login_log表中是否确实添加了一条记录进行检查。一般情况下，我们可能是打开数据库，肉眼观察是否插入了相应的记录，但这严重违背了自动测试的原则。试想在测试包括成千上万个数据操作行为的程序时，如何用肉眼进行检查？ </p>
<p>////////只要你继承Spring的测试套件的用例类，你就可以通过jdbcTemplate在同一事务中访问数据库，查询数据的变化，验证操作的正确性！ </p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>在pom.xml中加入相关依赖 spring-test,  JUnit</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要注意使用前查看两个包相关版本能否兼容使用</p>
<h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><p>我使用的是<code>JUnitGenerator</code>自动生成的测试文件，后面再加入相关的 加载配置文件的注解，最后的代码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> com.devframe.entity.FarmEntity;</div><div class="line"><span class="keyword">import</span> com.devframe.service.FarmService;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.Before; </div><div class="line"><span class="keyword">import</span> org.junit.After;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.test.annotation.Rollback;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* FarmServiceImpl Tester. </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> Zhang Kai </span></div><div class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;10/16/2017&lt;/pre&gt; </span></div><div class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/applicationContext-base.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FarmServiceImplTest</span> </span>&#123; </div><div class="line"></div><div class="line"><span class="meta">@Resource</span></div><div class="line">FarmService service;</div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="meta">@After</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: setBaseDao(FarmDao dao) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetBaseDao</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: findByOrgids(String pageindex, String pagesize, String where) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByOrgids</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: updateFarm(FarmEntity farmEntity) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateFarm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    String sql = <span class="string">"UPDATE \"AGRI_FARM\" SET \"REMARK\"='备注'"</span>;</div><div class="line">    service.executeUpdate(sql);</div><div class="line">    String sql1 = <span class="string">"SELECT * FROM \"AGRI_FARM\""</span>;</div><div class="line">    List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">    System.out.println(list.get(<span class="number">0</span>).getRemark());</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: exist(String name) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testExist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here... </span></div><div class="line">&#125; </div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果（表里面只有一条数据，简单写下，平时千万不要这样写，哈哈）</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016131207.png" alt="image"></p>
<p>证明测试成功了</p>
<p>把rollback改成 true ,默认就是为true<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span></div><div class="line"><span class="keyword">private</span> FarmDao dao;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">* Method: updateFarm(FarmEntity farmEntity) </span></div><div class="line"><span class="comment">* </span></div><div class="line"><span class="comment">*/</span> </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="comment">//@Rollback(true)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateFarm</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </div><div class="line"><span class="comment">//<span class="doctag">TODO:</span> Test goes here...</span></div><div class="line">    dao.setRemarkValue(<span class="string">"备注44"</span>);</div><div class="line">    String sql1 = <span class="string">"SELECT * FROM \"AGRI_FARM\""</span>;</div><div class="line">    List&lt;FarmEntity&gt; list = service.getBySql(sql1);</div><div class="line">    System.out.println(list.get(<span class="number">0</span>).getRemark());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果  </p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171016140842.png" alt="image"><br>我update 的值是 “备注44” 查询出来的是 “备注11” ，后来一想这样自己写得有点傻了，其实这个方法写的没有一点用，现在只能证明数据库还没更改，但是事务还没结束嘛，肯定没入库，就不要介意了，就是这个意思了，测试完成看下数据变了没有，可以验证成功。</p>
<p><strong>需要注意</strong>  的是不能使用自己写的事务，不然会覆盖掉spring 容器的Transactional，导致测试的事务不能回滚，直接保存到数据库中的。</p>
<p>之前一直被这个问题卡住了，设置了<code>@Rollback(true)</code>都不能成功回滚事务，睡了一觉才知道，这个<code>executeUpdate</code>方法中自己写了一个事务，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 删除表中的数据通过条件</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> sql：删改命令</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 执行是否成功</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">	EntityManager em = emf.createEntityManager();</div><div class="line">	em.getTransaction().begin();</div><div class="line">	Query query = em.createNativeQuery(sql);</div><div class="line">	<span class="keyword">int</span> count = query.executeUpdate();</div><div class="line">	em.getTransaction().commit();</div><div class="line">	em.close();</div><div class="line">	<span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是这样的。改成自己再Dao层重新写了个测试方法。可以的了。到此结束了。</p>
<p><strong>参考文章</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/shan9liang/article/details/40452469">http://blog.csdn.net/shan9liang/article/details/40452469</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> JUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven Scope定义值说明]]></title>
      <url>/maven-scope.html</url>
      <content type="html"><![CDATA[<h4 id="maven依赖关系中Scope的作用"><a href="#maven依赖关系中Scope的作用" class="headerlink" title="maven依赖关系中Scope的作用"></a>maven依赖关系中Scope的作用</h4><p><code>Dependency Scope</code> </p>
<p>在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值： </scope></scope></dependency></p>
<ul>
<li>compile，缺省值，适用于所有阶段，会随着项目一起发布。 </li>
<li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。 </li>
<li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 </li>
<li>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 </li>
<li>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。<a id="more"></a>
</li>
</ul>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>依赖范围控制哪些依赖在哪些classpath 中可用，哪些依赖包含在一个应用中。让我们详细看一下每一种范围：</p>
<h5 id="compile-（编译范围）"><a href="#compile-（编译范围）" class="headerlink" title="compile （编译范围）"></a>compile （编译范围）</h5><p>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath 中可用，同时它们也会被打包。</p>
<h5 id="provided-（已提供范围）"><a href="#provided-（已提供范围）" class="headerlink" title="provided （已提供范围）"></a>provided （已提供范围）</h5><p>provided 依赖只有在当JDK 或者一个容器已提供该依赖之后才使用。例如，<br>如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，但是你不会想要在打包好的WAR 中包含这个Servlet API；这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。</p>
<h5 id="runtime-（运行时范围）"><a href="#runtime-（运行时范围）" class="headerlink" title="runtime （运行时范围）"></a>runtime （运行时范围）</h5><p>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，<br>而只有在运行的时候才需要JDBC<br>驱动实现。</p>
<h5 id="test-（测试范围）"><a href="#test-（测试范围）" class="headerlink" title="test （测试范围）"></a>test （测试范围）</h5><p>test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p>
<h5 id="system-（系统范围）"><a href="#system-（系统范围）" class="headerlink" title="system （系统范围）"></a>system （系统范围）</h5><p>system范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。<br>这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。<br>如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>默认的依赖范围是complie</li>
<li>test范围指的是测试范围有效，在编译和打包时都不会使用这个依赖，<scope>为test的jar不会传递依赖项目；</scope></li>
<li>compile范围指的是编译范围有效，在编译和打包时都会讲依赖存储进去；</li>
<li>provided依赖，在编译和测试的过程有效，最后生成var包时不会加入，诸如：servlet——api，因为servlet-api，tomcat等web服务器已经存在了，如果再打包会冲突；</li>
<li>runtime在运行的时候依赖，在编译的时候不依赖；</li>
</ul>
<p><strong>参考博客</strong> <a rel="external nofollow" target="_blank" href="http://blog.csdn.net/ld513508088/article/details/23827945">http://blog.csdn.net/ld513508088/article/details/23827945</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20171015]]></title>
      <url>/20171015.html</url>
      <content type="html"><![CDATA[<p>每次看到你发的那些难过的句子，</p>
<p>我也感觉心快要化了，</p>
<p>你曾经说过，</p>
<p>不谈恋爱了就不会有烦恼了，</p>
<p>那现在我真的不希望你谈恋爱了，<br>幸福真是个大鬼头，<br>我从没有拥有过，<br>也都对它失望了。</p>
<p>姑娘，你一定要好好照顾自己，</p>
<p>我在想好的女生都是被这样被逼的不想谈恋爱了吗，</p>
<p>在这段时间里，曾经天真活泼的你，瞬间就变得忧郁，有脾气了， 可能很多人认为你变了，不认识了吧。</p>
<p>虽然了解的你不多，但是我想你根本没变吧，只是善于伪装吧，伪装得太好，让别人看不出伤疤，看不到疼痛。</p>
<p>姑娘，真的没必要不要这样了，你说 心比长相好，懂比爱重要。我想一个对的人最起码不会让身边得人这么的难受，我想我虽然一直抱有幻想，但我可能也不是你生命中那个对的人，因为，我也伤害过你，现在留下的只有伤口和已经上锁的心。你这么优秀，没有什么错过的青春，错过的爱情，只是没遇到对的，总有一天，你可以等到那个对的人，宠着你的人，不让你难过的人，愿生活有诗，有梦，有远方，还有一个懂你、爱你的可心人。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellij使用JUnitGenerator V2.0自动生成单元测试代码]]></title>
      <url>/junitgenerator.html</url>
      <content type="html"><![CDATA[<p>单元测试平时开发的时候是大有打交道了，使用Intellij后，发现有这个自动生成Junit 4 单元测试代码的插件，就是要说的 <code>JUnitGenerator</code>。<a id="more"></a></p>
<h4 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4><p>首先我的Intellij 版本是201702</p>
<p>settings -&gt; 搜索 JUnitGenerator 下载V2.0版本，安装插件，重启Intellij</p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>安装完插件，我们就可以进行自动生成单元测试代码了。<br>在要测试的类的页面，使用快捷键 <code>Alt + Insert</code> ，安装了JUnitGenerator 插件就会出现这个<code>JUnit Test</code> 选项，我们选择<code>Junit 4</code></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015170801.png" alt="image"></p>
<p>这个时候虽然能生成测试代码，但是你会发现，它生成的位置不是我们需要的，没有生成到<code>test source</code> 文件夹下，所以需要设置下它的生成目录，</p>
<p>打开首先我的Intellij的 settings -&gt; Other Settings -&gt; 选第一个。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015171518.png" alt="image"><br>其中 Output Path 是设置我们自动生成的测试文件的位置，需要重新设置下到<br><code>${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}</code></p>
<p>然后就是最后的日期格式乱码，点开JUnit 4 选项卡，将<code>date</code> 改成 <code>today</code>，里面是模板，可以根据自己的需求自己改，毕竟，测试代码的命名就没那么严格了。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>我们使用的是Junit 4 的，肯定得先引入Junit 的依赖包，在pom.xml中加入它得依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>不然生成出来的代码会报错的，找不到Jar包。。</p>
<p>改了上面的，应该就没什么问题。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Intellij </tag>
            
            <tag> JUnitGenerator </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Intellij 打包maven 项目，忽略单元测试代码]]></title>
      <url>/install-skip-test.html</url>
      <content type="html"><![CDATA[<p>使用<code>Eclipse</code> 的maven 打包部署项目，以前都是直接直接勾选 <code>Skip Tests</code> <a id="more"></a></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015152112.png" alt="image"></p>
<p><del>使用好像 Intellij 没有这个选项</del>，只能使用maven 的命令 来进行这个操作，可以在项目的根目录直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install -DskipTests</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install -Dmaven.test.skip=true</div></pre></td></tr></table></figure></p>
<p>或者直接在 Intellij 中Install 的时候 带上参数，点开 Intellij中右侧 的 MAVEN PROJECT -&gt; Lifecycle -&gt; install -&gt;右键选择 Create… -&gt; 在 install 后面加上参数 <code>-DskipTests</code></p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015153116.png" alt="image"></p>
<p>再去执行</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015153608.png" alt="image"></p>
<p>SUCCESS!再去看看项目，单元测试代码没有打包。</p>
<hr>
<p>更新，发现了Intellij，有 Skip Tests 选项<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171015155149.png" alt="image"></p>
<hr>
<p>上面的小选项卡里的功能以前并没有注意到，仔细看了看，主要的还是跟Eclipse maven相似，只是源码可以自动下载，更强大了。。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[他真的很喜欢你]]></title>
      <url>/really-love.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>他真的很喜欢你，认真且怂，从一而终。</p>
</blockquote>
<p><img src="https://i.loli.net/2017/10/15/59e238a08a631.jpg" alt="image"></p>
<a id="more"></a>
<p>“何谓孤寂？”<br>“清风，艳日，无笑意。”<br>“可否具体？”<br>“左拥，右抱，无情欲。”<br>“可否再具体？”<br>“不得你。”</p>
<p>“何为思念？”<br>“日月，星辰，旷野雨落。”<br>“可否具体？”<br>“山川，江流，烟袅湖泊。”<br>“可否再具体？”<br>“万物是你，无可躲。</p>
<p>“何为无救？”<br>“良药、妙方，无可医。”<br>“可否具体？”<br>“扁鹊、华佗，俱无策。”<br>“可否再具体？”<br>“念你成疾。”</p>
<p>“何谓求索？”<br>“落霞，朝阳，七千里。”<br>“可否具体？”<br>“夏雨，冬雪，九万顷。”<br>“可否再具体？”<br>“追寻你。”</p>
<p>“何谓伴侣？”<br>“柴米，油盐，木栅栏。”<br>“可否具体？”<br>“粗茶，淡饭，执子手。”<br>“可否再具体？”<br>“和你。”</p>
<p>“何谓漂泊？”<br>“飞蓬，飘萍，无根底。”<br>“可否具体？”<br>“只鹤，孤雁，寒塘独下迟。”<br>“可否再具体？”<br>“南游，东出，客愁，旅思，离乡千万里。”<br>“可否更具体？”<br>“春行，秋度，杳杳无归期。”<br>“仍是不解。”<br>“浪迹云游，何处寻你。”</p>
<p>“何谓难得？”<br>“落虹，繁星，山间风。”<br>“可否具体？”<br>“雾凇，凤翎，黄粱梦。”<br>“可否再具体？”<br>“伴你而生，有始无终。”</p>
<p>“何谓欢喜？”<br>“清风，晓月，伴星辰。”<br>“可否具体？”<br>“一见，再见，已倾心。”<br>“可否再具体？”<br>“余光皆是你。”</p>
<p>“何谓欣悦？”<br>“四海，三山，两心。”<br>“可否具体？”<br>“两人，三餐，四季。”<br>“可否再具体？”<br>“与你。”</p>
<p>“何谓愁？”<br>“江湖，灯市，檐下躲雨。”<br>“可否具体？”<br>“孤舟，青衫，长亭垂柳。”<br>“可否再具体？”<br>“所见是你，无可避。”</p>
<p>“何谓美人？”<br>“纤手，漾眸，柔腰肢。”<br>“可否具体？”<br>“橘子香气。”<br>“可否再具体？”<br>“汝。”</p>
<p>“何谓忧？”<br>“无笑，无乐，郁积于心。”<br>“可否具体？”<br>“思你，念你，不得见你。”<br>“可否再具体？”<br>“你已无意。”</p>
<p>“何谓空寂？”<br>“抬头，艳阳，流云里。”<br>“可否具体？”<br>“飘摇，流浪，无归期。”<br>“可否再具体？”<br>“没等到你。”  </p>
<p>“何为习性？”<br>“清茶，浊酒，和音伴。”<br>“可否具体？”<br>“跋山，涉水，曲随行。”<br>“可否再具体？”<br>“予你。”  </p>
<p>“何为等待？”<br>“不知几分红颜悴，多少相思碎。”<br>“可否详言？”<br>“花开花落两不知，惟介音无回。”<br>“可否甚解？”<br>“一叶一追寻，待一人与归。”    </p>
<p>“何为距离？”<br>“白云，大地，止相望。”<br>“可否具体？”<br>“树木，微风，终轻拂。”<br>“可否再具体？”<br>“你与我。”  </p>
<p>“何为思兮？”<br>“惦念，不语，乱了心。”<br>“可否具体？”<br>“失神差可拟。”<br>“可否再具体？”<br>“哪里都是你。”  </p>
<p>“何谓心安？”<br>“同月沽酌，千诗可叙”<br>“可否具体？”<br>“红色屋顶，白色窗棂。”<br>“可否再具体？”<br>“身边有你。”   </p>
<p>“何为心寒？”<br>“白雪、冷雨，冻寒骨。”<br>“可否具体？”<br>“深夜、凌晨，无可分。”<br>“可否再具体？”<br>“你，已弃。”  </p>
<p>“何为归途？”<br>“夜鸟 荒路 漫漫无期。”<br>“可否具体 ？”<br>“碎言 华灯 喧嚣无际。”<br>“可否再具体？”<br>“一诗 一酌 不觉千里。”<br>“仍是不解。”<br>“与你，四处为安。”  </p>
<p>“何谓笑意？”<br>“单车，白衣，晴空万里”<br>“可否具体？”<br>“天台，茉莉，七月初七”<br>“可否再具体？”<br>“花裙，背影，安然静谧”<br>“可否更具体？”<br>“一看到你”  </p>
<p>“何谓卑微？”<br>“清水，野草，无艳色。”<br>“可否具体？”<br>“爱情，亲情，无回报。”<br>“可否再具体？”<br>“入尘埃。”  </p>
<p>“何为知己？”<br>“相视，不语，已了然”<br>“可否具体？”<br>“浮华万物皆可抛”<br>“可否再具体？”<br>“愿得你”  </p>
<hr>
<p><strong>内容来自网易云《浮生》下面的热门的评论</strong></p>
<p>侵删</p>
]]></content>
      
        <categories>
            
            <category> 那些很美的句子 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 他真的很喜欢你 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java客户端使用Jedis操作Redis]]></title>
      <url>/catch-jedis.html</url>
      <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>搭建好redis ，这是我们需要在java中操作它，在这里我使用<code>jedis</code>  ，这次主要使用redis，存储信息，到时间超时，并且自动删除超时信息，累计数据List，达到一定数量，入库，删除，所以这个时候为了数据安全，删除完，才去写入新数据，需要写一个简单的分布式锁。</p>
<a id="more"></a>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><h4 id="准备，导入Jar包"><a href="#准备，导入Jar包" class="headerlink" title="准备，导入Jar包"></a>准备，导入Jar包</h4><p>首先在<code>pox.xml</code>加入所需要的Jar 包：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jedis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="编写连接工具类"><a href="#编写连接工具类" class="headerlink" title="编写连接工具类"></a>编写连接工具类</h4><p>首先编写工具类去连接redis：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: RedisUtil </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>: redis工具类 </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月26日 下午3:20:29 </span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1149678082569464779L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//Redis服务器IP</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String addr;</div><div class="line">    </div><div class="line">    <span class="comment">//Redis的端口号</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;</div><div class="line">    </div><div class="line">    <span class="comment">//访问密码</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String auth;</div><div class="line">    </div><div class="line">    <span class="comment">//可用连接实例的最大数目，默认值为8；</span></div><div class="line">    <span class="comment">//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxActive;</div><div class="line">    </div><div class="line">    <span class="comment">//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxIdle;</div><div class="line">    </div><div class="line">    <span class="comment">//等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException；</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxWait;</div><div class="line">    </div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> timeOut;</div><div class="line">    </div><div class="line">    <span class="comment">//在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> testOnBorrow;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis jedis;<span class="comment">//非切片额客户端连接</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JedisPool jedisPool;<span class="comment">//非切片连接池</span></div><div class="line">    </div><div class="line">   <span class="comment">// public static ShardedJedis shardedJedis;//切片额客户端连接</span></div><div class="line">    </div><div class="line">   <span class="comment">// public static ShardedJedisPool shardedJedisPool;//切片连接池</span></div><div class="line">    </div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">    	addr = PropertyUtil.get(<span class="string">"redis.addr"</span>);</div><div class="line">    	auth = PropertyUtil.get(<span class="string">"redis.auth"</span>);</div><div class="line">    	port = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.port"</span>));</div><div class="line">    	maxIdle = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.maxIdle"</span>));</div><div class="line">    	maxActive = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.maxActive"</span>));</div><div class="line">    	maxWait = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.maxWait"</span>));</div><div class="line">    	timeOut = Integer.parseInt(PropertyUtil.get(<span class="string">"redis.timeOut"</span>));</div><div class="line">    	testOnBorrow = PropertyUtil.get(<span class="string">"redis.testOnBorrow"</span>).equals(<span class="string">"true"</span>) ? <span class="keyword">true</span> :<span class="keyword">false</span>;</div><div class="line">    	initialPool();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisUtil</span><span class="params">()</span></span>&#123;</div><div class="line">    	initialPool(); </div><div class="line">        jedis = getJedis();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化非切片池</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialPool</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 池基本配置 </span></div><div class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">        config.setMaxTotal(maxActive); </div><div class="line">        config.setMaxIdle(maxIdle); </div><div class="line">        config.setMaxWaitMillis(maxWait); </div><div class="line">        config.setTestOnBorrow(testOnBorrow);</div><div class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config, addr, port);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取Jedis实例</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (jedisPool != <span class="keyword">null</span>) &#123;</div><div class="line">               jedis = jedisPool.getResource();</div><div class="line">               jedis.auth(auth);<span class="comment">//认证</span></div><div class="line">               <span class="keyword">return</span> jedis;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            Log.error(e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 释放jedis资源</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> jedis</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">returnResource</span><span class="params">(<span class="keyword">final</span> Jedis jedis)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</div><div class="line">        	jedis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># Redis Settings</div><div class="line">redis.addr=192.168.19.200</div><div class="line">redis.port=6379</div><div class="line">redis.auth=master</div><div class="line"></div><div class="line">redis.maxIdle=300</div><div class="line">redis.maxActive=1024</div><div class="line">redis.maxWait=10000</div><div class="line">redis.timeOut=10000</div><div class="line">redis.testOnBorrow=false</div></pre></td></tr></table></figure></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>连接上redis我们就可以使用jedis操作我们的redis，直接写业务</p>
<h5 id="登陆，保存会话"><a href="#登陆，保存会话" class="headerlink" title="登陆，保存会话"></a>登陆，保存会话</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String ucid)</span> </span>&#123;</div><div class="line">        Jedis jedisindex = getJedis();</div><div class="line">        String key = <span class="string">"login"</span> + ucid;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//设置登陆时常保存到30m，每次操作都会过来重新存下，重新刷新时间;</span></div><div class="line">            jedisindex.expire(key,  <span class="number">1800</span>);</div><div class="line">            </div><div class="line">            <span class="comment">//TODO code </span></div><div class="line">            </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(e.getMessage(), e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            returnResource(jedisindex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="使用redis完成分布式锁"><a href="#使用redis完成分布式锁" class="headerlink" title="使用redis完成分布式锁"></a>使用redis完成分布式锁</h5><p>当一个用户满60条数据，进行数据入库，使用分布式锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * xxxxxxx</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> track</span></div><div class="line"><span class="comment">  * 满到60个 TIDD add</span></div><div class="line"><span class="comment">  */</span></div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTrack</span><span class="params">(String ucid, String track, Jedis jedisindex)</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         Boolean lockFlag = <span class="keyword">false</span>;</div><div class="line">         <span class="keyword">while</span> (!lockFlag) &#123;</div><div class="line">             lockFlag = lock(<span class="string">"lock"</span> + ucid, jedisindex); <span class="comment">//上锁</span></div><div class="line">             <span class="keyword">if</span> (!lockFlag) <span class="keyword">continue</span>;</div><div class="line">             jedisindex.lpush(ucid, track);</div><div class="line"></div><div class="line">             <span class="keyword">long</span> len = jedisindex.llen(ucid);</div><div class="line">             <span class="comment">//历史轨迹中总点数</span></div><div class="line">             <span class="keyword">int</span> pointNum = Integer.valueOf(PropertyUtil.get(<span class="string">"POINT_NUM"</span>));</div><div class="line">             <span class="keyword">if</span> (pointNum &lt; <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">             <span class="keyword">if</span> (len &gt;= pointNum) &#123;</div><div class="line">                 addHistoryTrack(ucid, jedisindex.lrange(ucid, <span class="number">0</span>, pointNum - <span class="number">1</span>), jedisindex, pointNum);</div><div class="line">             &#125;</div><div class="line">             unlock(<span class="string">"lock"</span> + ucid, jedisindex); <span class="comment">//释放锁</span></div><div class="line">         &#125;</div><div class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         LOGGER.error(e.getMessage(), e);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> </div><div class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOCK_TIMEOUT = <span class="number">1</span>; <span class="comment">//加锁超时时间 单位秒  意味着加锁期间内执行完操作 如果未完成会有并发现象</span></div><div class="line"> </div><div class="line"> </div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">  * 上锁</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Boolean <span class="title">lock</span><span class="params">(String lock, Jedis jedisindex)</span> </span>&#123;</div><div class="line">     <span class="comment">// 1. 通过SETNX试图获取一个lock</span></div><div class="line">     <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">     <span class="keyword">long</span> value = System.currentTimeMillis() + LOCK_TIMEOUT * <span class="number">1000</span> + <span class="number">1</span>;</div><div class="line">     <span class="keyword">long</span> acquired = jedis.setnx(lock, String.valueOf(value));</div><div class="line">     jedisindex.expire(lock, LOCK_TIMEOUT);<span class="comment">//设置1秒超时 ,到时候自动释放锁</span></div><div class="line">     <span class="comment">//SETNX成功，则成功获取一个锁  </span></div><div class="line">     <span class="keyword">if</span> (acquired == <span class="number">1</span>) success = <span class="keyword">true</span>;</div><div class="line">     <span class="keyword">return</span> success;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 解锁</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String lock, Jedis jedisindex)</span> </span>&#123;</div><div class="line">     jedisindex.del(lock);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>使用jedis操作redis，使用的是spring 框架，可以使用<code>Spring Data Redis</code> ,更符合java spring框架依赖注入的特性，使用上大同小异。</li>
<li>使用多线程操作redis 不要把 jedis 存入到<code>ThreadLocal</code> 或各种全局变量中， 可能出现冲突。需要重新从<code>jedisPool</code>获取<code>jedis</code>，然后用完关闭连接就行。</li>
</ol>
<h4 id="学习："><a href="#学习：" class="headerlink" title="学习："></a>学习：</h4><ol>
<li>以后了解对jedis关于事务、管道和分布式的使用。</li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">1）连接操作命令</div><div class="line">   quit：关闭连接（connection）</div><div class="line">   auth：简单密码认证</div><div class="line">   help cmd： 查看cmd帮助，例如：help quit</div><div class="line">   </div><div class="line">   2）持久化</div><div class="line">   save：将数据同步保存到磁盘</div><div class="line">   bgsave：将数据异步保存到磁盘</div><div class="line">   lastsave：返回上次成功将数据保存到磁盘的Unix时戳</div><div class="line">   shundown：将数据同步保存到磁盘，然后关闭服务</div><div class="line">   </div><div class="line">   3）远程服务控制</div><div class="line">   info：提供服务器的信息和统计</div><div class="line">   monitor：实时转储收到的请求</div><div class="line">   slaveof：改变复制策略设置</div><div class="line">   config：在运行时配置Redis服务器</div><div class="line">   </div><div class="line">   4）对value操作的命令</div><div class="line">   exists(key)：确认一个key是否存在</div><div class="line">   del(key)：删除一个key</div><div class="line">   type(key)：返回值的类型</div><div class="line">   keys(pattern)：返回满足给定pattern的所有key</div><div class="line">   randomkey：随机返回key空间的一个</div><div class="line">   keyrename(oldname, newname)：重命名key</div><div class="line">   dbsize：返回当前数据库中key的数目</div><div class="line">   expire：设定一个key的活动时间（s）</div><div class="line">   ttl：获得一个key的活动时间</div><div class="line">   select(index)：按索引查询</div><div class="line">   move(key, dbindex)：移动当前数据库中的key到dbindex数据库</div><div class="line">   flushdb：删除当前选择数据库中的所有key</div><div class="line">   flushall：删除所有数据库中的所有key</div><div class="line">   </div><div class="line">   5）String</div><div class="line">   set(key, value)：给数据库中名称为key的string赋予值value</div><div class="line">   get(key)：返回数据库中名称为key的string的value</div><div class="line">   getset(key, value)：给名称为key的string赋予上一次的value</div><div class="line">   mget(key1, key2,…, key N)：返回库中多个string的value</div><div class="line">   setnx(key, value)：添加string，名称为key，值为value</div><div class="line">   setex(key, time, value)：向库中添加string，设定过期时间time</div><div class="line">   mset(key N, value N)：批量设置多个string的值</div><div class="line">   msetnx(key N, value N)：如果所有名称为key i的string都不存在</div><div class="line">   incr(key)：名称为key的string增1操作</div><div class="line">   incrby(key, integer)：名称为key的string增加integer</div><div class="line">   decr(key)：名称为key的string减1操作</div><div class="line">   decrby(key, integer)：名称为key的string减少integer</div><div class="line">   append(key, value)：名称为key的string的值附加value</div><div class="line">   substr(key, start, end)：返回名称为key的string的value的子串</div><div class="line">   </div><div class="line">   6）List </div><div class="line">   rpush(key, value)：在名称为key的list尾添加一个值为value的元素</div><div class="line">   lpush(key, value)：在名称为key的list头添加一个值为value的 元素</div><div class="line">   llen(key)：返回名称为key的list的长度</div><div class="line">   lrange(key, start, end)：返回名称为key的list中start至end之间的元素</div><div class="line">   ltrim(key, start, end)：截取名称为key的list</div><div class="line">   lindex(key, index)：返回名称为key的list中index位置的元素</div><div class="line">   lset(key, index, value)：给名称为key的list中index位置的元素赋值</div><div class="line">   lrem(key, count, value)：删除count个key的list中值为value的元素</div><div class="line">   lpop(key)：返回并删除名称为key的list中的首元素</div><div class="line">   rpop(key)：返回并删除名称为key的list中的尾元素</div><div class="line">   blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</div><div class="line">   brpop(key1, key2,… key N, timeout)：rpop的block版本。</div><div class="line">   rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</div><div class="line">   </div><div class="line">   7）Set</div><div class="line">   sadd(key, member)：向名称为key的set中添加元素member</div><div class="line">   srem(key, member) ：删除名称为key的set中的元素member</div><div class="line">   spop(key) ：随机返回并删除名称为key的set中一个元素</div><div class="line">   smove(srckey, dstkey, member) ：移到集合元素</div><div class="line">   scard(key) ：返回名称为key的set的基数</div><div class="line">   sismember(key, member) ：member是否是名称为key的set的元素</div><div class="line">   sinter(key1, key2,…key N) ：求交集</div><div class="line">   sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合</div><div class="line">   sunion(key1, (keys)) ：求并集</div><div class="line">   sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合</div><div class="line">   sdiff(key1, (keys)) ：求差集</div><div class="line">   sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合</div><div class="line">   smembers(key) ：返回名称为key的set的所有元素</div><div class="line">   srandmember(key) ：随机返回名称为key的set的一个元素</div><div class="line">   </div><div class="line">   8）Hash</div><div class="line">   hset(key, field, value)：向名称为key的hash中添加元素field</div><div class="line">   hget(key, field)：返回名称为key的hash中field对应的value</div><div class="line">   hmget(key, (fields))：返回名称为key的hash中field i对应的value</div><div class="line">   hmset(key, (fields))：向名称为key的hash中添加元素field </div><div class="line">   hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</div><div class="line">   hexists(key, field)：名称为key的hash中是否存在键为field的域</div><div class="line">   hdel(key, field)：删除名称为key的hash中键为field的域</div><div class="line">   hlen(key)：返回名称为key的hash中元素个数</div><div class="line">   hkeys(key)：返回名称为key的hash中所有键</div><div class="line">   hvals(key)：返回名称为key的hash中所有键对应的value</div><div class="line">   hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> jedis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于升级有道云笔记v6.0.0.1]]></title>
      <url>/youdao-note.html</url>
      <content type="html"><![CDATA[<p>升级后有道云笔记确实有很大的改变，界面变得大方简洁了许多，但是左下角的广告还是在，免费版就不要介意了，网上又办法去掉它。反应速度快上不少，而且最爱的markdown语法看起来反应又快了，以前输入上了百行，拖动就有点卡了，难受得很。细心的人估计发现了，右下角多了一个图标，对的新版本多了三种模式：三栏模式、精简模式和编辑模式。试了一下，很优秀的一个功能。</p>
<p><img src="https://i.loli.net/2017/10/13/59e0609fa7fe2.png" alt="image"></p>
<a id="more"></a>
<p>当然更新是好事，但是我出现了个奇怪的问题，单击导航栏的目录，竟然不能预览文章。</p>
<p><img src="https://i.loli.net/2017/10/13/59e0601f2a9db.png" alt="image"></p>
<p>就是直接说无预览，非要我进入编辑模式，才能看到文章。</p>
<p>无奈，网上搜也没搜到，只好去撩客服了。</p>
<p><img src="https://ooo.0o0.ooo/2017/10/13/59e060bb5c8ae.png" alt="image"></p>
<p>清空就好了，重新登陆账户信息，浪费了不少时间了。。希望有道云笔记能越做越好吧。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Youdao Note </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CENTOS 7 中报错 java.net.ConnectException Connection refused]]></title>
      <url>/tomcat-error01.html</url>
      <content type="html"><![CDATA[<p>再<code>centos7</code> 中正常启动<code>tomcat 9</code>，但是发现项目都不能正常访问，去关闭tomcat 却报错，如下：<a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># /opt/apache-tomcat-9.0.0.M22/bin/shutdown.sh </span></div><div class="line">Using CATALINA_BASE:   /opt/apache-tomcat-9.0.0.M22</div><div class="line">Using CATALINA_HOME:   /opt/apache-tomcat-9.0.0.M22</div><div class="line">Using CATALINA_TMPDIR: /opt/apache-tomcat-9.0.0.M22/temp</div><div class="line">Using JRE_HOME:        /opt/jdk1.8.0_131/jre</div><div class="line">Using CLASSPATH:       /opt/apache-tomcat-9.0.0.M22/bin/bootstrap.jar:/opt/apache-tomcat-9.0.0.M22/bin/tomcat-juli.jar</div><div class="line">十月 12, 2017 7:08:00 下午 org.apache.catalina.startup.Catalina stopServer</div><div class="line">严重: Could not contact [localhost:[8005]]. Tomcat may not be running.</div><div class="line">十月 12, 2017 7:08:00 下午 org.apache.catalina.startup.Catalina stopServer</div><div class="line">严重: Catalina.stop: </div><div class="line">java.net.ConnectException: 拒绝连接 (Connection refused)</div><div class="line">        at java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line">        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</div><div class="line">        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</div><div class="line">        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</div><div class="line">        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</div><div class="line">        at java.net.Socket.connect(Socket.java:589)</div><div class="line">        at java.net.Socket.connect(Socket.java:538)</div><div class="line">        at java.net.Socket.&lt;init&gt;(Socket.java:434)</div><div class="line">        at java.net.Socket.&lt;init&gt;(Socket.java:211)</div><div class="line">        at org.apache.catalina.startup.Catalina.stopServer(Catalina.java:478)</div><div class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">        at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">        at org.apache.catalina.startup.Bootstrap.stopServer(Bootstrap.java:408)</div><div class="line">        at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:497)</div></pre></td></tr></table></figure></p>
<p>发现这种奇怪的问题，去检查端口，发现根本没有tomcat进程的端口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment">#  netstat -tnlp</span></div><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </div><div class="line">tcp        0      0 0.0.0.0:22122           0.0.0.0:*               LISTEN      63455/fdfs_trackerd </div><div class="line">tcp        0      0 0.0.0.0:3690            0.0.0.0:*               LISTEN      2855/svnserve       </div><div class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      127481/redis-server </div><div class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1396/sshd           </div><div class="line">tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      183014/postgres     </div><div class="line">tcp        0      0 0.0.0.0:23000           0.0.0.0:*               LISTEN      64278/fdfs_storaged </div><div class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2229/master         </div><div class="line">tcp        0      0 0.0.0.0:8001            0.0.0.0:*               LISTEN      98427/mosquitto     </div><div class="line">tcp        0      0 0.0.0.0:8002            0.0.0.0:*               LISTEN      72040/nginx: master </div><div class="line">tcp        0      0 0.0.0.0:8004            0.0.0.0:*               LISTEN      109896/vsftpd       </div><div class="line">tcp6       0      0 :::8009                 :::*                    LISTEN      104964/java         </div><div class="line">tcp6       0      0 :::6379                 :::*                    LISTEN      127481/redis-server </div><div class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1396/sshd           </div><div class="line">tcp6       0      0 :::5432                 :::*                    LISTEN      183014/postgres     </div><div class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      2229/master      </div><div class="line">tcp6       0      0 :::8001                 :::*                    LISTEN      98427/mosquitto     </div><div class="line">tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      104964/java</div></pre></td></tr></table></figure></p>
<p>只好重新启动但是，还是启动后，还是没成功访问到项目，日志里也看不到什么多余的错误信息。</p>
<p>只好把项目删除了，再去启动tomcat，启动成功后，再去把war 包丢进webapps中，发现项目居然能成功访问，搞半天，没搞明白，估计还是项目有点问题，不能正常启动，直接把tomcat 弄死了。先记录下，以后有时间深入了解下。。</p>
<p>启动：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># startup.sh              </span></div><div class="line">Using CATALINA_BASE:   /opt/apache-tomcat-9.0.0.M22</div><div class="line">Using CATALINA_HOME:   /opt/apache-tomcat-9.0.0.M22</div><div class="line">Using CATALINA_TMPDIR: /opt/apache-tomcat-9.0.0.M22/temp</div><div class="line">Using JRE_HOME:        /opt/jdk1.8.0_131/jre</div><div class="line">Using CLASSPATH:       /opt/apache-tomcat-9.0.0.M22/bin/bootstrap.jar:/opt/apache-tomcat-9.0.0.M22/bin/tomcat-juli.jar</div><div class="line">Tomcat started.</div></pre></td></tr></table></figure></p>
<p>监视端口进程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># netstat -tnlp|grep 8000</span></div><div class="line">tcp6       0      0 :::8000                 :::*                    LISTEN      104964/java</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[easyui完成日期验证，控制日期的输入范围]]></title>
      <url>/easyui-validate-datebox.html</url>
      <content type="html"><![CDATA[<p>今天改前端问题时候遇到了这个问题，其实easyui还好，看官网例子，也可以解决我们的问题，但是现实业务中却是要考虑到各方面的，要做到更全。<br><a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100%; width: 200px; margin-left: 4px; display: inline-block;"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Title"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Icon icon-calendar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Text"</span>&gt;</span>上传时间<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 120px; height: 38px; line-height: 38px; display: inline-block; float: left; margin-left: 5px;"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"uploadtime1"</span> <span class="attr">class</span>=<span class="string">"easyui-datebox"</span> <span class="attr">data-options</span>=<span class="string">"width:120,height:24,editable:false"</span> /&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 38px; width: 146px; margin-left: 4px; display: inline-block;"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 12px; height: 100%; display: inline-block; line-height: 38px; text-align: center; float: left; margin-left: 2px;"</span>&gt;</span>至<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 120px; height: 100%; line-height: 38px; display: inline-block; margin-left: 12px; float: left;"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"uploadtime2"</span> <span class="attr">class</span>=<span class="string">"easyui-datebox"</span> <span class="attr">data-options</span>=<span class="string">"width:120,height:24,editable:false,validType:'validateDate[\'#uploadtime1\']'"</span> /&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$.extend($.fn.validatebox.defaults.rules, &#123;</div><div class="line">    validateDate: &#123;</div><div class="line">        validator: <span class="function"><span class="keyword">function</span> (<span class="params">value, param</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> start = $(param[<span class="number">0</span>]).datetimebox(<span class="string">'getValue'</span>);  <span class="comment">//获取开始时间</span></div><div class="line">            <span class="keyword">return</span> value &gt;= start;                             <span class="comment">//有效范围为当前时间大于开始时间</span></div><div class="line">        &#125;,</div><div class="line">        message: <span class="string">'结束日期应不能小于开始日期!'</span>                     <span class="comment">//匹配失败消息</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171011171235.png" alt="image"><br>这种方法使用的是easyui的验证，提醒错误错误信息的样式比较好，而且不用手动输入，当然也又有缺点，就是，当用户先输入结束日期，再输入开始日期，就不好去验证了。<br>可以使用例外一种方式控制，官网上看到的，就是控制输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">'#dd'</span>).datebox().datebox(<span class="string">'calendar'</span>).calendar(&#123;</div><div class="line">				validator: <span class="function"><span class="keyword">function</span>(<span class="params">date</span>)</span>&#123;</div><div class="line">					<span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">					<span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(now.getFullYear(), now.getMonth(), now.getDate());</div><div class="line">					<span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(now.getFullYear(), now.getMonth(), now.getDate()+<span class="number">10</span>);</div><div class="line">					<span class="keyword">return</span> d1&lt;=date &amp;&amp; date&lt;=d2;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;);</div></pre></td></tr></table></figure></p>
<p>效果图：<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171011172502.png" alt="image"><br>只能选择设置区域的日期，其余的不能选择。</p>
<p>需要注意的是<code>date-box</code>需要加上<code>editable:false</code>这个属性，不能让手动输入，只能选择。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> easyui </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何使用postman测试上传文件接口，正确提交文件数据]]></title>
      <url>/postman-upload.html</url>
      <content type="html"><![CDATA[<p>今天使用<code>POSTMAN</code>测试文件上传，不太会用这个东东，刚开始发现这个<code>binary</code>是用来上传文件的，<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171010142016.png" alt="image"><br>以为用这个没错，但是使用的时候报错信息如下：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Apache Tomcat/7.0.37 - Error report<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">&lt;!<span class="selector-tag">--H1</span> &#123;<span class="attribute">font-family</span>:Tahoma,Arial,sans-serif;<span class="attribute">color</span>:white;<span class="attribute">background-color</span>:<span class="number">#525D76</span>;<span class="attribute">font-size</span>:<span class="number">22px</span>;&#125; <span class="selector-tag">H2</span> &#123;<span class="attribute">font-family</span>:Tahoma,Arial,sans-serif;<span class="attribute">color</span>:white;<span class="attribute">background-color</span>:<span class="number">#525D76</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;&#125; <span class="selector-tag">H3</span> &#123;<span class="attribute">font-family</span>:Tahoma,Arial,sans-serif;<span class="attribute">color</span>:white;<span class="attribute">background-color</span>:<span class="number">#525D76</span>;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125; <span class="selector-tag">BODY</span> &#123;<span class="attribute">font-family</span>:Tahoma,Arial,sans-serif;<span class="attribute">color</span>:black;<span class="attribute">background-color</span>:white;&#125; <span class="selector-tag">B</span> &#123;<span class="attribute">font-family</span>:Tahoma,Arial,sans-serif;<span class="attribute">color</span>:white;<span class="attribute">background-color</span>:<span class="number">#525D76</span>;&#125; <span class="selector-tag">P</span> &#123;<span class="attribute">font-family</span>:Tahoma,Arial,sans-serif;<span class="attribute">background</span>:white;<span class="attribute">color</span>:black;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;<span class="selector-tag">A</span> &#123;<span class="attribute">color </span>: black;&#125;<span class="selector-tag">A</span><span class="selector-class">.name</span> &#123;<span class="attribute">color </span>: black;&#125;<span class="selector-tag">HR</span> &#123;<span class="attribute">color </span>: <span class="number">#525D76</span>;&#125;<span class="selector-tag">--</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTTP Status 500 - Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: The current request is not a multipart request<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">HR</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">noshade</span>=<span class="string">"noshade"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>type<span class="tag">&lt;/<span class="name">b</span>&gt;</span> Exception report<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>message<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">u</span>&gt;</span>Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: The current request is not a multipart request<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>description<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">u</span>&gt;</span>The server encountered an internal error that prevented it from fulfilling this request.<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>exception<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span>org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.web.multipart.MultipartException: The current request is not a multipart request</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:981)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:871)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:647)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:845)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)</div><div class="line">	org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</div><div class="line">	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</div><div class="line">	com.devframe.util.CorsFilter.doFilter(CorsFilter.java:23)</div><div class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>root cause<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">pre</span>&gt;</span>org.springframework.web.multipart.MultipartException: The current request is not a multipart request</div><div class="line">	org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.assertIsMultipartRequest(RequestParamMethodArgumentResolver.java:216)</div><div class="line">	org.springframework.web.method.annotation.RequestParamMethodArgumentResolver.resolveName(RequestParamMethodArgumentResolver.java:177)</div><div class="line">	org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:90)</div><div class="line">	org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:78)</div><div class="line">	org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:162)</div><div class="line">	org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)</div><div class="line">	org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)</div><div class="line">	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:814)</div><div class="line">	org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:737)</div><div class="line">	org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)</div><div class="line">	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)</div><div class="line">	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:969)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:871)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:647)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:845)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:728)</div><div class="line">	org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)</div><div class="line">	org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</div><div class="line">	com.devframe.util.CorsFilter.doFilter(CorsFilter.java:23)</div><div class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>note<span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">u</span>&gt;</span>The full stack trace of the root cause is available in the Apache Tomcat/7.0.37 logs.<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">HR</span> <span class="attr">size</span>=<span class="string">"1"</span> <span class="attr">noshade</span>=<span class="string">"noshade"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Apache Tomcat/7.0.37<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>项目使用的是springMVC的 <code>MultipartFile</code> 接收的，服务端识别不出来文件。项目中使用的 js 的<code>FormDate</code>上传的，以前使用的 form 表单提交<code>enctype=&quot;multipart/form-data&quot;</code>这两种方法可以解决这个问题，但是postman中不知道怎么设置，刚好还是发现postman中又form-data这中方法提交，仔细一看原来可以选择file类型的参数，尴尬：<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171010142039.png" alt="image"><br>但是还是报错，仔细检查了参数，发现，postman中<code>Headers</code>设置了 <code>Content-Type</code> 使用<code>form-data</code>提交数据的时候不需要这个属性，删除。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171010143123.png" alt="img"><br>做好上面的准备，上传完成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"statusCode"</span>: <span class="number">200</span>,</div><div class="line">    <span class="string">"message"</span>: <span class="string">"完成"</span>,</div><div class="line">    <span class="string">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"name"</span>: <span class="string">"722f95b1-261e-4f42-b7fb-45552e01b9f2"</span>,</div><div class="line">            <span class="string">"byname"</span>: <span class="string">"v2-f26272e386f127af2e9263c83082b4a2_b.jpg"</span>,</div><div class="line">            <span class="string">"extname"</span>: <span class="string">".jpg"</span>,</div><div class="line">            <span class="string">"type"</span>: <span class="string">"图片"</span>,</div><div class="line">            <span class="string">"size"</span>: <span class="number">25</span>,</div><div class="line">            <span class="string">"path"</span>: <span class="string">"外网地址，不方便透露了"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>终于完成了。。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> postman </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript和jQuery中forEach和each的用法，以及各种遍历的使用]]></title>
      <url>/js-array.html</url>
      <content type="html"><![CDATA[<p>今天做个选择出id前缀为imgpreviwe的img标签，给它们个背景图片，直接想都没想，forEach调了半天，没调出来，才知道用错了方法。。哈哈，以前的东西忘得差不多了，重新学习一遍。。</p>
<a id="more"></a>
<p>正确的是这样写，使用<code>each</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"[id^='imgpreviwe']"</span>, $(<span class="string">".MachineEdit"</span>, Dev.App.FillPanel.Target)).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</div><div class="line">                $(<span class="keyword">this</span>).attr(<span class="string">"src"</span>, <span class="string">"image/authorization/default.jpg"</span>);</div><div class="line">            &#125;);</div></pre></td></tr></table></figure></p>
<p>下面来重新学习一遍：</p>
<p>首先声明一个数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">"z"</span>, <span class="string">"s"</span>, <span class="string">"y"</span>, <span class="string">"l"</span>, <span class="string">"v"</span>];</div></pre></td></tr></table></figure></p>
<p>首先来个最简单的遍历：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++)&#123;</div><div class="line">          <span class="built_in">console</span>.log(array[i]);</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>运行结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">z</div><div class="line">s</div><div class="line">y</div><div class="line">i</div><div class="line">v</div></pre></td></tr></table></figure></p>
<p>再来看下<code>forEach</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.forEach(console.log);</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">z 0 (5) [&quot;z&quot;, &quot;s&quot;, &quot;y&quot;, &quot;l&quot;, &quot;v&quot;]</div><div class="line">s 1 (5) [&quot;z&quot;, &quot;s&quot;, &quot;y&quot;, &quot;l&quot;, &quot;v&quot;]</div><div class="line">y 2 (5) [&quot;z&quot;, &quot;s&quot;, &quot;y&quot;, &quot;l&quot;, &quot;v&quot;]</div><div class="line">l 3 (5) [&quot;z&quot;, &quot;s&quot;, &quot;y&quot;, &quot;l&quot;, &quot;v&quot;]</div><div class="line">v 4 (5) [&quot;z&quot;, &quot;s&quot;, &quot;y&quot;, &quot;l&quot;, &quot;v&quot;]</div></pre></td></tr></table></figure>
<p>其实结果是一样的。。</p>
<p>了解到forEach的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">@param &#123;function(T=, number=, Array.&lt;T&gt;=)&#125; callback</span></div><div class="line"><span class="comment">@param &#123;*&#125; [thisArg]</span></div><div class="line"><span class="comment">@return &#123;void&#125;</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback,thisArg</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure></p>
<p>后来发现它的使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(index + <span class="string">" : "</span> + value + <span class="string">" ~ "</span> + array);</div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><code>value</code> 是遍历的值</li>
<li><code>index</code> 索引</li>
<li><code>array</code> 数组本身<br>运行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0 : z ~ z,s,y,l,v</div><div class="line">1 : s ~ z,s,y,l,v</div><div class="line">2 : y ~ z,s,y,l,v</div><div class="line">3 : l ~ z,s,y,l,v</div><div class="line">4 : v ~ z,s,y,l,v</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>map</code>：map即是 “映射”的意思 用法与 forEach 相似：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(index + <span class="string">" : "</span> + value + <span class="string">" ~ "</span> + array);</div><div class="line">      &#125;);</div></pre></td></tr></table></figure></p>
<p>使用<code>each</code>来遍历数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.each(array, <span class="function"><span class="keyword">function</span> (<span class="params">index, value</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(index + <span class="string">" : "</span> + value);</div><div class="line">      &#125;)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0 : z </div><div class="line">1 : s</div><div class="line">2 : y</div><div class="line">3 : l </div><div class="line">4 : v</div></pre></td></tr></table></figure></p>
<p>回归正题了，上面我们使用的是$().each()，处理Dom对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(“input[name=’type’]”).each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>($(<span class="keyword">this</span>).attr(‘checked’)==<span class="literal">true</span>)&#123;</div><div class="line">        <span class="comment">//code</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>index 为索引<br>找到所有input dom的 name 属性为 type ，  </li>
</ul>
<p>看下<code>jQuery each</code>源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">each: <span class="function"><span class="keyword">function</span>(<span class="params"> obj, callback </span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> length, i = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ( isArrayLike( obj ) ) &#123;</div><div class="line">            length = obj.length;</div><div class="line">            <span class="keyword">for</span> ( ; i &lt; length; i++ ) &#123;</div><div class="line">                <span class="keyword">if</span> ( callback.call( obj[ i ], i, obj[ i ] ) === <span class="literal">false</span> ) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> ( i <span class="keyword">in</span> obj ) &#123;</div><div class="line">                <span class="keyword">if</span> ( callback.call( obj[ i ], i, obj[ i ] ) === <span class="literal">false</span> ) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>看到别人写到，jQuery里的each方法是通过js里的call方法来实现的。<br>call这个方法很奇妙，其实官方的说明是：“调用一个对象的一个方法，以另一个对象替换当前对象。”网上更多的解释是变换上下文环境，也有说是改变上下文this指针。<br><code>call([thisObj[,arg1[, arg2[,   [,.argN]]]]])</code></p>
<p><strong>参数</strong><br><code>thisObj</code><br>可选项。将被用作当前对象的对象。 </p>
<p><code>arg1, arg2,  , argN</code><br>可选项。将被传递方法参数序列。</p>
<p>说明<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</p>
<p>引用网上有一个很经典的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    alert(a+b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    alert(a-b);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add.call(sub,<span class="number">3</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：<strong>alert(4)</strong>; </p>
<p>感觉有点厉害了。</p>
<p><strong>注意：</strong> js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>
<p>需要注意的Javascript还有个<br><code>for/in</code> - 循环遍历对象的属性<br><strong>功能</strong> ：遍历对象属性，把属性名和属性值都提出来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">testForIn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> obj = &#123;</div><div class="line">              name: <span class="string">"zhangkai"</span>,</div><div class="line">              color: <span class="string">'green'</span>,</div><div class="line">              movie: <span class="string">'阿甘正传'</span>,</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">              <span class="built_in">console</span>.log(key + <span class="string">" : "</span> + obj[key]);</div><div class="line">          &#125;</div><div class="line">        &#125;)();</div></pre></td></tr></table></figure></p>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name : zhangkai</div><div class="line">color : green</div><div class="line">movie : 阿甘正传</div></pre></td></tr></table></figure>
<p>同样的for in 也能遍历数组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i in array) &#123;</div><div class="line">          console.log(array[i]);</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>结果也是正常的，但是有时候，会打印出数组的函数<code>function</code>，遍历的时候不推荐使用这个。</p>
<p>当然还有while 遍历，那些就不仔细写了。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一叶知秋]]></title>
      <url>/trend.html</url>
      <content type="html"><![CDATA[<p>今天晚上在小区里面慢跑，突然一个东西掉到我眼镜架上，塞在里面了，尬，拿下来一看，看到的是一片树叶。<br><img src="https://i.loli.net/2017/10/08/59da342e1af4a.jpg" alt="image"><br>时间过得真快，已经秋天了，今年国庆八天长假，也过完，我想，今后，再得过多少年，才有八天长假。</p>
<a id="more"></a>
<p>事情一直在发生，故事永远也写不完，我想我现在想什么，也许在眺望着什么，犹豫着什么，患得患失着什么。在每一刻，它都是好的。也许有一天，我老了，不再去疯了，就这么平静得下去。</p>
<p>我想我现在还是这么个人吧，一直以来也是，对身边的事情都是依依不舍的，但是我没有停留，紧跟着前进，真是想去浪迹天涯呀，但是那是不可能的，我有自己的牵挂与责任，我还是放不下，总有一天，我会老去，总是不想放过，但是时常会放弃自己的一些事情，为难着自己，不愿意离开。</p>
<p><img src="https://ooo.0o0.ooo/2017/10/08/59d9afb316e7f.png" alt="img"></p>
<p>也许是秋天总是会给人带来一丝惆怅的心情吧，不知不觉的，你就会触景生情，这个时候千万别拍照，别去看镜子，你会发现，不知不觉，多了一份沧桑，心里有一些焦灼，慢慢的会影响你的心绪。走的时候，又会浑然不知。</p>
<p>我想我现在还是正值好时光的年纪，即使不能清高，也要活出自我，最后像树叶一样洒脱的离开，因为，我想我正在它夏天的这个时候，还没到，还没到，还能享受最热烈的阳光。</p>
<p><img src="https://i.loli.net/2017/10/08/59da398b58f84.jpg" alt="image"></p>
<p>恍惚，秋分早已过，不用在意太多孰是孰非，早就没留退路，只能这样不顾一切，而你是否能明白了。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我想温暖这个有你的世界]]></title>
      <url>/warm-the-world.html</url>
      <content type="html"><![CDATA[<p>平时一个人最喜欢听的故事，很暖心，分享出来，好好睡觉，嗯，晚安。</p>
<a id="more"></a>
<hr>
<p>每天晚上，当月亮升起的时候，月亮之子就会降临地面。<br>他是一个普通的小子。<br>深夜里，他会独自一个人，无忧无虑的在月光下散步。<br>天亮前，他就会消失。<br>没有什么目的性，他与这个世界没有什么联系。他只是以这样一种简单的姿态，在特定的时候，存在于这个世界。</p>
<p>在一个寒冷的夜晚，他像往常一样在皎洁的月光下散步。<br>这时，他在路边看到了一个昏倒的小女孩。<br>于是他把小女孩抱在怀里，带到一棵大树下，在周围点燃了一堆篝火。也许是篝火的温暖，也许是月亮之子的怀抱的温暖，不一会儿，小女孩就醒了过来。<br>小女孩惊讶的问，你是谁啊？<br>月亮之子撒谎道，我只是一个路过的行人，看到你昏迷，就带你过来烤烤火。你好一些了吗？<br>小女孩本能的往月亮之子的怀里挤了挤，然后说，我没事，就是有一些累，睡一觉就好了。<br>月亮之子抱紧她说，那就睡吧。天亮了再赶路。</p>
<p>半夜的时候，小女孩又醒了一次，她指着那堆篝火说真好看，就像跳舞的小精灵，据说跳舞的小精灵的脚丫是火焰做的，只有内心最纯净的人才能看得到那舞蹈。<br>月亮之子给小女孩讲了好多小故事，小女孩很开心，她说恶魔其实是个乖孩子，因为它没有伤害过任何人。她又说见习死神一定是天使变的，原来天使有时候也会撒谎。<br>小女孩躺在月亮之子的怀里，抬头望着漫天繁星，开始数星星……没过多久，她再一次睡着了。</p>
<p>天快亮的时候，月亮之子把外衣披在了小女孩的身上，然后往篝火里加了一些木柴，准备离开。<br>可是他舍不得，也不放心。<br>他知道小女孩白天的时候会继续赶路，可是天气越来越冷。<br>他不知道自己还能做些什么。<br>他马上就要消失了。</p>
<p>天亮了，小女孩醒了过来。<br>她发现盖在自己身上的衣服，她知道这是那个路人留给她的，而路人自己已经启程了。</p>
<p>相遇和离别，有时候是一件很简单的事。没有什么特殊的理由。<br>因为每个人都有自己的目的地。</p>
<p>小女孩离开那堆篝火，回到自己的路上，忽然被眼前的景象震住了。</p>
<p>路的两旁，是整整齐齐的两排篝火，通红的篝火，如同两条火龙一直延伸向地平线。</p>
<p>我想温暖你，不管我在哪里。<br>如果有一天我会离开你，那就让我温暖这个有你的世界。因为我要你知道，即使你看不到我，也可以感受到我的温暖。</p>
<hr>
<p><strong>文章来自知乎：<a rel="external nofollow" target="_blank" href="https://zhuanlan.zhihu.com/p/23526049?utm_medium=social&utm_source=weibo">晚安小故事<15>：月亮之子/ 我想温暖这个有你的世界</15></a></strong></p>
<p>音乐：小星星 -张靓颖</p>
]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log4j WARN No appenders could be found for logger]]></title>
      <url>/log-error.html</url>
      <content type="html"><![CDATA[<p>项目的日志以前没设置好，打印出来的东西一团糟。需要把项目的Log文件改一下，改好测试了，没问题，commit，结果突然发现项目启动不了，瞬间吓坏，倒退了，哈哈，机制。报错一大堆：<a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Transactional resources]) and a value of <span class="built_in">type</span> [java.util.HashMap] (value [&#123;&#123;</div><div class="line">	CreateTime:<span class="string">"2017-10-08 16:24:04"</span>,</div><div class="line">	ActiveCount:1,</div><div class="line">	PoolingCount:0,</div><div class="line">	CreateCount:100,</div><div class="line">	DestroyCount:99,</div><div class="line">	CloseCount:1,</div><div class="line">	ConnectCount:2,</div><div class="line">	Connections:[</div><div class="line">	]</div><div class="line">&#125;</div><div class="line"></div><div class="line">[</div><div class="line">]=org.springframework.jdbc.datasource.ConnectionHolder@71579f16, org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean@7998ca6f=org.springframework.orm.jpa.EntityManagerHolder@1fd59301&#125;]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Current AOP proxy]) and a value of <span class="built_in">type</span> [com.devframe.service.impl.DeviceServiceImpl$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$905a00fd</span>] (value [com.devframe.service.impl.DeviceServiceImpl@b16530c]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Actual transaction active]) and a value of <span class="built_in">type</span> [java.lang.Boolean] (value [<span class="literal">true</span>]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Transaction synchronizations]) and a value of <span class="built_in">type</span> [java.util.LinkedHashSet] (value [[]]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Current AOP method invocation]) and a value of <span class="built_in">type</span> [org.springframework.aop.framework.ReflectiveMethodInvocation] (value [ReflectiveMethodInvocation: public abstract java.util.List com.devframe.dao.DeviceDao.findBySerialnumber(java.lang.String); target is of class [org.springframework.data.jpa.repository.support.SimpleJpaRepository]]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Current transaction name]) and a value of <span class="built_in">type</span> [java.lang.String] (value [com.devframe.service.impl.DeviceServiceImpl.findBySerialnumber]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: Unable to determine string representation of value of <span class="built_in">type</span> [org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo]</div><div class="line">java.lang.NullPointerException</div><div class="line">	at org.springframework.transaction.interceptor.TransactionAspectSupport<span class="variable">$TransactionInfo</span>.toString(TransactionAspectSupport.java:624)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks(WebappClassLoader.java:2520)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.checkThreadLocalsForLeaks(WebappClassLoader.java:2454)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1995)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1901)</div><div class="line">	at org.apache.catalina.loader.WebappLoader.stopInternal(WebappLoader.java:662)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)</div><div class="line">	at org.apache.catalina.core.StandardContext.stopInternal(StandardContext.java:5526)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.stop(LifecycleBase.java:232)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:160)</div><div class="line">	at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1559)</div><div class="line">	at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1549)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line"></div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks</div><div class="line">严重: The web application [/devframe-server] created a ThreadLocal with key of <span class="built_in">type</span> [org.springframework.core.NamedThreadLocal] (value [Current aspect-driven transaction]) and a value of <span class="built_in">type</span> [org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo] (value [Unknown]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.coyote.AbstractProtocol start</div><div class="line">信息: Starting ProtocolHandler [<span class="string">"http-bio-8081"</span>]</div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader loadClass</div><div class="line">信息: Illegal access: this web application instance has been stopped already.  Could not load org.hibernate.engine.transaction.internal.jta.JtaStatusHelper.  The eventual following stack trace is caused by an error thrown <span class="keyword">for</span> debugging purposes as well as to attempt to terminate the thread <span class="built_in">which</span> caused the illegal access, and has no functional impact.</div><div class="line">java.lang.IllegalStateException</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1599)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1558)</div><div class="line">	at org.hibernate.engine.transaction.internal.TransactionCoordinatorImpl.afterTransaction(TransactionCoordinatorImpl.java:142)</div><div class="line">	at org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.afterTransactionCompletion(JdbcTransaction.java:138)</div><div class="line">	at org.hibernate.engine.transaction.spi.AbstractTransactionImpl.rollback(AbstractTransactionImpl.java:213)</div><div class="line">	at org.hibernate.jpa.internal.TransactionImpl.rollback(TransactionImpl.java:108)</div><div class="line">	at org.springframework.orm.jpa.JpaTransactionManager.doRollback(JpaTransactionManager.java:544)</div><div class="line">	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback(AbstractPlatformTransactionManager.java:853)</div><div class="line">	at org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback(AbstractPlatformTransactionManager.java:830)</div><div class="line">	at org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:503)</div><div class="line">	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:285)</div><div class="line">	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)</div><div class="line">	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</div><div class="line">	at org.springframework.aop.framework.CglibAopProxy<span class="variable">$DynamicAdvisedInterceptor</span>.intercept(CglibAopProxy.java:655)</div><div class="line">	at com.devframe.service.impl.DeviceServiceImpl$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$905a00fd</span>.findBySerialnumber(&lt;generated&gt;)</div><div class="line">	at com.devframe.util.mqtt.TimingPublish.run(TimingPublish.java:241)</div><div class="line">	at com.devframe.service.impl.MqttServerImpl.callBackChoose(MqttServerImpl.java:108)</div><div class="line">	at com.devframe.util.mqtt.ServerMQTT.messageArrived(ServerMQTT.java:161)</div><div class="line">	at org.eclipse.paho.client.mqttv3.internal.CommsCallback.deliverMessage(CommsCallback.java:499)</div><div class="line">	at org.eclipse.paho.client.mqttv3.internal.CommsCallback.handleMessage(CommsCallback.java:402)</div><div class="line">	at org.eclipse.paho.client.mqttv3.internal.CommsCallback.run(CommsCallback.java:206)</div><div class="line">	at java.util.concurrent.Executors<span class="variable">$RunnableAdapter</span>.call(Executors.java:511)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">	at java.util.concurrent.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.access<span class="variable">$201</span>(ScheduledThreadPoolExecutor.java:180)</div><div class="line">	at java.util.concurrent.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.run(ScheduledThreadPoolExecutor.java:293)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line"></div><div class="line">十月 08, 2017 4:24:25 下午 org.apache.catalina.loader.WebappClassLoader loadClass</div><div class="line">信息: Illegal access: this web application instance has been stopped already.  Could not load org.eclipse.paho.client.mqttv3.internal.MessageCatalog.  The eventual following stack trace is caused by an error thrown <span class="keyword">for</span> debugging purposes as well as to attempt to terminate the thread <span class="built_in">which</span> caused the illegal access, and has no functional impact.</div><div class="line">java.lang.IllegalStateException</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1599)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1558)</div><div class="line">	at org.eclipse.paho.client.mqttv3.MqttException.getMessage(MqttException.java:225)</div><div class="line">	at org.eclipse.paho.client.mqttv3.MqttException.toString(MqttException.java:233)</div><div class="line">	at java.lang.String.valueOf(String.java:2994)</div><div class="line">	at java.io.PrintStream.println(PrintStream.java:821)</div><div class="line">	at java.lang.Throwable<span class="variable">$WrappedPrintStream</span>.println(Throwable.java:748)</div><div class="line">	at java.lang.Throwable.printStackTrace(Throwable.java:655)</div><div class="line">	at java.lang.Throwable.printStackTrace(Throwable.java:643)</div><div class="line">	at java.lang.Throwable.printStackTrace(Throwable.java:634)</div><div class="line">	at com.devframe.util.mqtt.ServerMQTT.connectionLost(ServerMQTT.java:144)</div><div class="line">	at org.eclipse.paho.client.mqttv3.internal.CommsCallback.connectionLost(CommsCallback.java:292)</div><div class="line">	at org.eclipse.paho.client.mqttv3.internal.ClientComms.shutdownConnection(ClientComms.java:423)</div><div class="line">	at org.eclipse.paho.client.mqttv3.internal.CommsCallback.run(CommsCallback.java:220)</div><div class="line">	at java.util.concurrent.Executors<span class="variable">$RunnableAdapter</span>.call(Executors.java:511)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">	at java.util.concurrent.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.access<span class="variable">$201</span>(ScheduledThreadPoolExecutor.java:180)</div><div class="line">	at java.util.concurrent.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.run(ScheduledThreadPoolExecutor.java:293)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line"></div><div class="line">十月 08, 2017 4:24:38 下午 org.apache.catalina.loader.WebappClassLoader loadClass</div><div class="line">信息: Illegal access: this web application instance has been stopped already.  Could not load org.apache.commons.pool2.impl.EvictionConfig.  The eventual following stack trace is caused by an error thrown <span class="keyword">for</span> debugging purposes as well as to attempt to terminate the thread <span class="built_in">which</span> caused the illegal access, and has no functional impact.</div><div class="line">java.lang.IllegalStateException</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1599)</div><div class="line">	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1558)</div><div class="line">	at org.apache.commons.pool2.impl.GenericObjectPool.evict(GenericObjectPool.java:743)</div><div class="line">	at org.apache.commons.pool2.impl.BaseGenericObjectPool<span class="variable">$Evictor</span>.run(BaseGenericObjectPool.java:1036)</div><div class="line">	at java.util.TimerThread.mainLoop(Timer.java:555)</div><div class="line">	at java.util.TimerThread.run(Timer.java:505)</div></pre></td></tr></table></figure>
<p>根据上面查找问题，刚开始一直以为是 mqtt 出现错误了，检查完全没问题，而且最近只是修改了其他的内容，一想到我刚刚改了log4j，估计是它除了错误，但是上面的错误信息完全没给我有用的提示信息，只能知道<code>web root</code> 都没能启动，就去各个spring配置文件看，但是没发现有配置log4j的位置，最后功夫不负有心人终于在<code>web.xml</code>看到了一段话</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启动Log4j --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure>
<p>跟我目前路径不一致，改好后，成功启动。。。莫名其妙了。</p>
<p>网上查了下，日志出现错误，找不到<code>log4j.properties</code>报错是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">log4j:WARN No appenders could be found for logger (org.apache.ibatis.logging.LogFactory).   </div><div class="line">log4j:WARN Please initialize the log4j system properly.</div></pre></td></tr></table></figure></p>
<p>那就不得而知了。</p>
<p>总算解决了。。</p>
<p>总结：</p>
<ol>
<li>部署的项目在<code>WEB-INF/classes/</code>路径下加上文件 <code>log4j.properties</code> ,开发中，我使用的是maven构建项目的，所以，在<code>resources</code> 文件下加入 <code>log4j.properties</code> 就可以了。</li>
<li>这样下去启动下去仍然会报错，Web开发的时候，spring容器启动去读取这个log4j的配置文件的时候，找不到它，所以要在 <code>web.xml</code> 中重新配置文件位置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启动Log4j --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> log4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我想分享你的悲伤]]></title>
      <url>/share-sadness.html</url>
      <content type="html"><![CDATA[<h3 id="我想分享你的悲伤"><a href="#我想分享你的悲伤" class="headerlink" title="我想分享你的悲伤"></a>我想分享你的悲伤</h3><p>我想分享你的悲伤，</p>
<p>我要成为故事中的小丑，</p>
<p>将悲伤写进喜剧中。</p>
<p>我想分享你的悲伤，</p>
<p>我会强颜为笑，</p>
<p>带上面具，</p>
<p>安慰你。</p>
<p>我想分享你的悲伤</p>
<p>但我不能将悲伤带给你，</p>
<p>因为哄你开心，</p>
<p>才是我的责任，</p>
<p>即便是伤痕累累，</p>
<p>你一笑，</p>
<p>我便好。</p>
<p>我想分享你的悲伤，</p>
<p>永远微笑，</p>
<p>不贪婪。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery实现多文件上传并预览]]></title>
      <url>/multiple-file-upload.html</url>
      <content type="html"><![CDATA[<p>自己做了个文件上传，样式有些简陋，功能还需以后完善。中间遇到了一些问题，在这里记录下。<a id="more"></a></p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 82px; width: 100%; border-bottom: 1px solid #ddd;padding-top: 5px"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 80px; height: 82px;float: left;text-align: right; line-height: 72px;"</span>&gt;</span>反馈图片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"file"</span>&gt;</span>选择文件</div><div class="line">               <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/png,image/gif,image/jpg,image/jpeg"</span> <span class="attr">id</span>=<span class="string">"files"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">multiple</span> /&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.file</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#03afD9</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#99D3F5</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">    <span class="attribute">text-indent</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.file</span> <span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.file</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#95B8E7</span>;</div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#78C3F3</span>;</div><div class="line">    <span class="attribute">color</span>: white;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面用于多图片上传预览功能</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setImagePreviews</span>(<span class="params">docObj</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> preview = $(<span class="string">"#preview"</span>, $(<span class="string">".MachineEdit"</span>, Dev.App.FillPanel.Target));</div><div class="line">            preview.html(<span class="string">""</span>);</div><div class="line">            fileList = docObj.files;</div><div class="line">            <span class="keyword">if</span> (fileList.length &gt; <span class="number">3</span>)&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileList.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (!checkType(fileList[i].name))&#123;</div><div class="line">                    preview.html(<span class="string">""</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                preview.append(<span class="string">"&lt;div style='float:left;cursor:pointer;margin-left: 3px;' &gt;&lt;img id='img"</span> + i + <span class="string">"' /&gt; &lt;/div&gt;"</span>);</div><div class="line">                <span class="keyword">var</span> imgObjPreview = $(<span class="string">"#img"</span>+i, $(<span class="string">".MachineEdit"</span>, Dev.App.FillPanel.Target));</div><div class="line">                <span class="keyword">if</span> (fileList &amp;&amp; fileList[i]) &#123;</div><div class="line">                    <span class="comment">//火狐下，直接设img属性</span></div><div class="line">                    imgObjPreview.css(<span class="string">"display"</span>,<span class="string">"block"</span>);</div><div class="line">                    <span class="comment">//控制缩略图大小</span></div><div class="line">                    imgObjPreview.width(<span class="number">70</span>);</div><div class="line">                    imgObjPreview.height(<span class="number">70</span>);</div><div class="line">                    <span class="comment">//imgObjPreview.src = docObj.files[0].getAsDataURL();</span></div><div class="line">                    <span class="comment">//火狐7以上版本不能用上面的getAsDataURL()方式获取，需要一下方式</span></div><div class="line">                    imgObjPreview.attr(<span class="string">"src"</span>, <span class="built_in">window</span>.URL.createObjectURL(fileList[i]));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//IE下，使用滤镜</span></div><div class="line">                    docObj.select();</div><div class="line">                    <span class="keyword">var</span> imgSrc = <span class="built_in">document</span>.selection.createRange().text;</div><div class="line">                    <span class="keyword">var</span> localImagId = $(<span class="string">"#img"</span>+i, $(<span class="string">".MachineEdit"</span>, Dev.App.FillPanel.Target));</div><div class="line">                    <span class="comment">//必须设置初始大小</span></div><div class="line">                    localImagId.width(<span class="number">70</span>);</div><div class="line">                    localImagId.height(<span class="number">70</span>);</div><div class="line">                    <span class="comment">//图片异常的捕捉，防止用户修改后缀来伪造图片</span></div><div class="line">                    imgObjPreview.css(<span class="string">"display"</span>, <span class="string">"none"</span>);</div><div class="line">                    <span class="built_in">document</span>.selection.empty();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/*检测照片格式*/</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkType</span>(<span class="params">image</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> extStart = image.lastIndexOf(<span class="string">"."</span>);</div><div class="line">            <span class="keyword">var</span> ext = image.substring(extStart, image.length).toUpperCase();</div><div class="line">            <span class="keyword">if</span> ( ext != <span class="string">".PNG"</span> &amp;&amp; ext != <span class="string">".GIF"</span> &amp;&amp; ext != <span class="string">".JPG"</span> &amp;&amp; ext != <span class="string">".JPEG"</span>) &#123;</div><div class="line">                dialog.Alert(<span class="string">"图片限于png，gif，jpeg，jpg格式！"</span>, <span class="string">"error"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>调用方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#files"</span>, $(<span class="string">".MachineEdit"</span>, Dev.App.FillPanel.Target)).bind(<span class="string">"change"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    setImagePreviews(<span class="keyword">this</span>);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>效果展示：<br><img src="https://i.loli.net/2017/10/07/59d8a623e0921.png" alt="img"></p>
<p>上传的时候使用的是<code>FormData</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以上省略</span></div><div class="line">            <span class="keyword">var</span> form = <span class="keyword">new</span> FormData();</div><div class="line">           <span class="comment">//注意参数数组的时候使用多次append就行了</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = fileList.length; i &lt; len; i++) &#123;</div><div class="line">                form.append(<span class="string">"files"</span>, fileList[i]);</div><div class="line">            &#125;</div><div class="line">           </div><div class="line">            form.append(<span class="string">"orgid"</span>, selectorgid);</div><div class="line">            form.append(<span class="string">"cautionid"</span>, selectAl);</div><div class="line">            form.append(<span class="string">"fkder"</span>,Dev.cookie.user.truename);</div><div class="line"></div><div class="line">            $.ajax(&#123;</div><div class="line">                type: <span class="string">"POST"</span>,</div><div class="line">                url: <span class="string">'~~省略~~'</span>,</div><div class="line">                data: form,</div><div class="line">                contentType: <span class="literal">false</span>,</div><div class="line">                processData: <span class="literal">false</span>, <span class="comment">//注意一定要设置为false</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (!Dev.IsNull(response) &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</div><div class="line">                        dialog.Alert(msg.addSuccess, <span class="string">"success"</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        dialog.Alert(msg.addFailed, <span class="string">"error"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                    dialog.Alert(msg.netout, <span class="string">"error"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div></pre></td></tr></table></figure>
<p><code>processData</code>的默认值是<code>true</code>。用于对<code>data</code>参数进行序列化处理。</p>
<h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><p>java后台使用的是springMVC，相同的可以参考。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/***"</span>, method = RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> HttpResponse&lt;CautionFeedBackEntity&gt; <span class="title">addFile</span><span class="params">(@RequestParam(value=<span class="string">"files"</span>,required=<span class="keyword">false</span>)</span>MultipartFile[] files, CautionFeedBackEntity entity) </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			~~~处理~~~</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> HttpResponse&lt;CautionFeedBackEntity&gt;(ResponseStatusCode.C200);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			Log.error(<span class="string">"错误飘过~~~~"</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> HttpResponse&lt;CautionFeedBackEntity&gt;(ResponseStatusCode.C400);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是 <code>MultipartFile[]</code> 需要设置 <code>@RequestParam</code> 参数。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>html优化。</li>
<li>脚本后期还需添加点击删除功能，并且还要更新input-file里的内容。</li>
<li>js中处理图片的过程，还需做更多的控制（文件大小，伪文件）。</li>
<li>使用fastDFS存储。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这些只属于武汉的浪漫，看完幸福感爆棚]]></title>
      <url>/wh-romance.html</url>
      <content type="html"><![CDATA[<p>无意中看到个长图，感觉到身边的城市这边美，平时没什么时间去发现，倒是有点小小的遗憾吧，记下，有机会一定要转转/ y。<a id="more"></a></p>
<p><img src="https://i.loli.net/2017/10/05/59d6030110f9e.jpg" alt="img"></p>
<p>就是希望以后有个人能一起去我们想去的地方。。。</p>
]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 武汉 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我想她，是那么的美好吧]]></title>
      <url>/miss-you.html</url>
      <content type="html"><![CDATA[<p>我想她，是那么的美好吧。</p>
<a id="more"></a>
<p>文字注定是矫情的，所以没什么好忌惮的了。</p>
<p>不知道不觉就想起她，很难过，放不下。这么多年还记得她，不是因为长相，她长相清秀，但是没那么出众，可能因为她别样清脆的声音，但我也不是声控，可能是因为别的，总之，还在意她。</p>
<p>人就是这么奇怪，有时候遇到什么东西就容易出神，青春期的男生可能总是浮想翩翩，就是经常失神吧，我现在大概还是这个样子了，愣。</p>
<p>跟她说过的话不多吧，见面了的时候我也不敢跟她打招呼，因为我很内向，而且还是个很慢热的人，平时话也非常少，我了解的人也不多，实在是一个再也普通不过的人了。</p>
<p>但是在我眼中的她干净，就像不沾人间烟土的仙子。人很聪明，没什么心机，可以跟其他人玩的很合得来。</p>
<p>我觉得她最大的特点就是明媚了，为什么会用这个词了，应该来源于她当时的网名。人烦恼的时候总是会仰望天空，但是天空中也有阴云。看到她的眼睛，感觉就是一直散发着光，是真的明媚，而且带着淡淡的忧伤，那双眼睛总是清澈的，是我迄今为止见过的最漂亮的眼睛；说话的时候就像歌曲，安静优雅而又绵长。</p>
<p>就这样，抓走了我的心。后来做了傻事，表白了她，想当初太年轻了，她很懂事，果断拒绝了我。我当时很颓废，回想当初不应该那样的，后来高考完后，她又加了我，不知道当时是什么自尊心在作祟，居然没想到去追回她，什么高考失利都是借口，自己大概当时有些失望，是想放弃的吧，因为自己也是一个懦夫，不敢再次面对，若干年后，没任何理由去再次去拥有吧。</p>
<p>后来上了大学应该简单联系了几句，但是没多说，我也忘了，曾经一度真的以为我忘了，但是qq还是一直存在我这里，特别关注，平时闲着没事就喜欢翻翻她的空间，但是也不想留下痕迹，简单看下她再干什么，去她去过的地方，看她想看的电影。看到她的照片，她还是以前那个样子，每次看到，心中会有暖意吧，偷偷的存下。直到毕业工作来到了武汉这个城市，不尽然的又想去找她，但是她的心已经对你上了一把锁了，你该用什么去打开它了，没感情经历的我该拿什么去追回她了。</p>
<p>回想当初，自己这个人真的是有点烂了，什么也没付出就像拿到什么，如果当初没能戳穿就好了，即使能远远的看着她，也是一件多么美好的事情啊。我想现在懂了，可能已经太晚了，自己已经不可能撩动她的心了，已经过了那个年纪了，这么长时间，早已经物是人非了，有可能，我这一辈子再也不能见到她了吧，但是只要还能想起她，看到她的消息，心中还是泛起了涟漪。反正现在人都这么烂了，只能用真心去等候吧。</p>
<p>希望在最美好的年华遇到美好的人，然而是遇到美好的人，美好的年华却迟迟的错过了！虽然没经历过什么刻骨铭心的事情，但我不会忘记的，谢谢她，让我想变成更好的人。</p>
<p>愿她以后一直明媚，不再忧伤吧。</p>
<p>真的很美好！都要加油了。</p>
<hr>
<p>最终还是没能抓住她，让别人抓走了她的心。但是看到她现在纠结的感情问题，心都要快化了。很想去看看她，但犹豫她是不想见到我吧，弄巧成拙后，朋友也做不成。</p>
<p>是我真有点情绪了，我还是有些犹豫，只是我这个人就是这样的直吧，EQ不在线。确实啊，但是，喜欢的确实好辛苦啊，追一个人很久不回应该怎么办，苦笑，明知道是傻，还能怎么办了，从没退路的我，不知道游离在何处，发现真的好累，不曾想过什么多余的，可能我还是像从前那么单纯吧。</p>
<p>别人都说，想清楚了，没人会说自己的感情是最特别的，哪个人不深情，最终留给自己的才是最重要的。我想是这段时间打扰得厉害了，于人于己都不好，她幸福的时刻，不忍心再打扰下去了。看到她现在的空间和微博，尽是些伤感的句子，很想让她开心，但是我发现我并不能办到，在她面前真的感觉到好卑微，有些患得患失，情绪化了，真的错了，我是一个只能让她更难受的人，或许真的不是对的人，因为这个样子她并不是我想要的。</p>
<p>虽然我也很不想放弃，但是这样下去对谁都不好，真的好想戒了，就这样静静地看着吧，悄无声息。</p>
<p>希望她能幸福吧，走过很多的路，也做过很多努力，很静静的告诉自己，耐心的等待。</p>
<p>我相信一定能遇到下一个对的人，现在能做的唯有努力提升自己，才能在对的时间不错过，耐心等待，不将就，不奢求。择一城，遇一人，终老。</p>
<p>那个我想见却还在等的人，如果能握紧就不要放手了。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用java将gps时转换为utc时间方法]]></title>
      <url>/gps2utc.html</url>
      <content type="html"><![CDATA[<h3 id="gps时间系统"><a href="#gps时间系统" class="headerlink" title="gps时间系统"></a>gps时间系统</h3><blockquote>
<p><code>GPS时间系统</code>采用原子时AT1秒长作时间基准，秒长定义为铯原子CS133基态的两个超精细能级间跃迁辐射振荡9192631170周所持续的时间，时间起算的原点定义在1980年1月6日世界协调时UTC0时，启动后不跳秒，保证时间的连续。以后随着时间积累，GPS时与UTC时的整秒差以及秒以下的差异通过时间服务部门定期公布。<br>精密导航和测量的需要，GPS建立了专用的时间系统。该系统可简写为GPS由GPS主控站的原于钟控制，规定GPS与协调时的时刻于t980年1月6日o时相一致。其后随着时间的积累两者之间的差别将表现为秒的整倍数。</p>
</blockquote>
<a id="more"></a>
<h4 id="gps周"><a href="#gps周" class="headerlink" title="gps周"></a>gps周</h4><blockquote>
<p><code>GPS周</code>（GPS Week）是GPS系统内部所采用的时间系统。<br>时间零点定义的为：1980年1月5日夜晚与1980年1月6日凌晨之间0点。最大时间单位是周（一周：604800秒）。每1024周（即7168天）为一循环周期。第一个GPS周循环点为1999年8月22日0时0分0秒。即从这一刻起，周数重新从0开始算起。星期记数规则是：Sunday为0，Monday为1，以此类推，依次记作0~6，GPS周记数（GPS Week Number）为“GPS周 星期记数”。</p>
</blockquote>
<h3 id="使用java将gps时转换为utc时间方法"><a href="#使用java将gps时转换为utc时间方法" class="headerlink" title="使用java将gps时转换为utc时间方法"></a>使用java将gps时转换为utc时间方法</h3><p>看到了gps时间系统大概明白了 gps时由整周（7天）计数，与周内秒计数两部分组成。转换为utc时间可以从1980年1月6日0时,基本思路计算出总共的秒数，然后通过计算总秒数包含了多少整年，整年减掉后取余，计算年内多少整月，依次类推就可以计算出最后utc时刻的年月日时分秒.毫秒值了。</p>
<p>转换过程中需要主要的年中的闰年处理，还有GPS时与utc时的闰秒问题，如果是转换为北京时间要求时区的问题需要考虑。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.util.mqtt;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: GPS2UTC </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>: gps时间转成utc+8:00 北京时间</span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月25日 下午3:08:07 </span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPS2UTC</span> </span>&#123;</div><div class="line"></div><div class="line">	 <span class="keyword">private</span> java.util.Date date;  </div><div class="line">	 <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] monthday = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</div><div class="line">	 <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> TIME_DAY_MS = <span class="number">3600</span>*<span class="number">24</span>*<span class="number">1000</span>;</div><div class="line">	 </div><div class="line">	 </div><div class="line">	 <span class="comment">/*</span></div><div class="line"><span class="comment">	  * @week gps周</span></div><div class="line"><span class="comment">	  * @tow  gps周内秒（单位毫秒）</span></div><div class="line"><span class="comment">	  * @leaps 闰秒数</span></div><div class="line"><span class="comment">	  */</span></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GPS2UTC</span><span class="params">(<span class="keyword">int</span> week, <span class="keyword">int</span> tow, <span class="keyword">int</span> leaps)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> totalday;</div><div class="line">		<span class="keyword">int</span> year = <span class="number">1980</span>;</div><div class="line">		<span class="keyword">int</span> month;</div><div class="line">		<span class="keyword">int</span> day;</div><div class="line"></div><div class="line">		totalday = week * <span class="number">7</span>;</div><div class="line">		totalday += <span class="number">5</span>;</div><div class="line"></div><div class="line">		<span class="comment">// 如果需要减去闰秒</span></div><div class="line">		<span class="keyword">if</span> (leaps != <span class="number">0</span> &amp;&amp; week &gt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (tow &lt; leaps * <span class="number">1000</span>) &#123;</div><div class="line">				totalday--;</div><div class="line">				tow = TIME_DAY_MS - leaps * <span class="number">1000</span> + tow;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				tow = tow - leaps * <span class="number">1000</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (totalday &gt;= <span class="number">366</span>) &#123;</div><div class="line">			totalday -= <span class="number">365</span>;</div><div class="line">			<span class="keyword">if</span> (isLeapYear(year)) &#123;</div><div class="line">				totalday -= <span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">			year++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(isLeapYear(year)) &#123;</div><div class="line">			monthday[<span class="number">2</span>] = <span class="number">29</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			monthday[<span class="number">2</span>] = <span class="number">28</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (month = <span class="number">1</span>; month &lt;= <span class="number">12</span>; month++) &#123;</div><div class="line">			<span class="keyword">if</span> (totalday &lt; monthday[month]) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			totalday -= monthday[month];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		day = totalday;</div><div class="line">		day++;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (tow &gt; TIME_DAY_MS) &#123;</div><div class="line">			tow -= TIME_DAY_MS;</div><div class="line">			day++;</div><div class="line">			<span class="keyword">if</span> (day &gt; monthday[month]) &#123;</div><div class="line">				day = <span class="number">1</span>;</div><div class="line">				month++;</div><div class="line">				<span class="keyword">if</span> (month &gt; <span class="number">12</span>) &#123;</div><div class="line">					month = <span class="number">1</span>;</div><div class="line">					year++;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		tow /= <span class="number">10</span>;</div><div class="line">		<span class="comment">//int msecond = tow % 100;</span></div><div class="line">		tow /= <span class="number">100</span>;</div><div class="line">		<span class="keyword">int</span> second = tow % <span class="number">60</span>;</div><div class="line">		tow /= <span class="number">60</span>;</div><div class="line">		<span class="keyword">int</span> minute = tow % <span class="number">60</span>;</div><div class="line">		<span class="keyword">int</span> hour = tow / <span class="number">60</span>;</div><div class="line">		<span class="comment">//转成Utc时候 北京时间UTC+8:00</span></div><div class="line">		year -= <span class="number">1900</span>;</div><div class="line">		month -= <span class="number">1</span>;</div><div class="line">		hour += <span class="number">8</span>;</div><div class="line">		date = <span class="keyword">new</span> Date(year, month,day,hour,minute,second);</div><div class="line">	 &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 判断闰年</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> year</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> == <span class="number">0</span>)) </div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> date;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实可以把时区参数放到函数中，<br>为什么要减去1900年，这要说到java中<code>new Date</code>这个方法的定义，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> date, <span class="keyword">int</span> hrs, <span class="keyword">int</span> min, <span class="keyword">int</span> sec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> y = year + <span class="number">1900</span>;</div><div class="line">        <span class="comment">// month is 0-based. So we have to normalize month to support Long.MAX_VALUE.</span></div><div class="line">        <span class="keyword">if</span> (month &gt;= <span class="number">12</span>) &#123;</div><div class="line">            y += month / <span class="number">12</span>;</div><div class="line">            month %= <span class="number">12</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month &lt; <span class="number">0</span>) &#123;</div><div class="line">            y += CalendarUtils.floorDivide(month, <span class="number">12</span>);</div><div class="line">            month = CalendarUtils.mod(month, <span class="number">12</span>);</div><div class="line">        &#125;</div><div class="line">        BaseCalendar cal = getCalendarSystem(y);</div><div class="line">        cdate = (BaseCalendar.Date) cal.newCalendarDate(TimeZone.getDefaultRef());</div><div class="line">        cdate.setNormalizedDate(y, month + <span class="number">1</span>, date).setTimeOfDay(hrs, min, sec, <span class="number">0</span>);</div><div class="line">        getTimeImpl();</div><div class="line">        cdate = <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>看出来年是按照1900基数来算的。</p>
<p>通过上面的算法可以将gps时间转换成北京时间 </p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WIN10家庭版安装Doby 4]]></title>
      <url>/doby4-install.html</url>
      <content type="html"><![CDATA[<p>笔记本电脑的音效确实好差劲啊，无聊还是准备安装了一个杜比装X，效果还是不错的，<code>家庭版</code>安装过程中，跟以前<code>专业版</code>有所不同。<a id="more"></a></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a rel="external nofollow" target="_blank" href="http://pan.baidu.com/s/1cdIQpo">http://pan.baidu.com/s/1cdIQpo</a></p>
<p>密码 <code>k8sa</code></p>
<p>下载好解压，</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>进入解压的文件夹中直接执行安装程序<code>.exe文件</code>，记住不要修改软件的安装的路径，让软件自行解压到<code>C:\DRIVERS\WIN\DOLBY</code>，最后记住取消<code>勾勾</code>再点finish。我们会在C盘的安装目录里看到如下的文件:    <img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171003132434.png" alt="image"></li>
<li>WIN10电脑有个蛋疼的驱动自动更新，它会自动下载和更新我们电脑上的相关驱动，我们需要取消这个功能，步骤：</li>
</ul>
<blockquote>
<p>控制面板\所有控制面板项\系统\高级系统设置\硬件\设备安装设置<br>选择否<br>保存设置</p>
</blockquote>
<p>通过上面的设置，系统不会自动更新我们的驱动了，</p>
<ul>
<li>现在需要重启，注意不是一般的重启，我们需要禁用驱动程序强制签名，为什么会这样，我想应该是微软系统还没收录这类的驱动程序，（ps:以前玩腾讯游戏也是，WIN10已更新把腾讯驱动给屏蔽了，全挂了）<br>回归正题，按住<code>shirt键</code>，再去点击计算机<code>重启</code>按钮，进入<code>疑难解答</code>这一项，再点<code>启动设置</code>，电脑重启后，会让我们选择一个列表的东西，我们直接按键盘 <code>7键</code> 禁用驱动程序强制签名 的选项。</li>
<li>然后，进入我们第一步安装问价的路径 <code>C:\DRIVERS\WIN\DOLBY</code> 64位系统进入 <code>X64</code>文件夹中运行安装 <code>DTCP</code><br><img src="http://ov62kaxkk.bkt.clouddn.com/6bba7eed2e738bd4cf4228eaa38b87d6267ff99d.jpg" alt="image"><br><img src="http://ov62kaxkk.bkt.clouddn.com/fbe31a738bd4b31cfa5f0e6085d6277f9f2ff89d%5B1%5D.jpg" alt="image"></li>
</ul>
<p>安装完成后，可以看到电脑右下角有杜比的图标，放音乐有频谱，表明杜比接管声卡驱动成功了。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171003134123.png" alt="image"></p>
<p>贴张音效图</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171003134455.png" alt="image"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ol>
<li>安装时候不需要卸载原来的声卡，安装时候不需要卸载原来的声卡，安装时候不需要卸载原来的声卡，重要的说三遍。</li>
<li>WIN10家庭版相比专业版没有<code>策略组</code>，不能去设置设置安装限制，但是还是能正常安装，我想不需要设置  （禁止安装未由其他策略设置描述的设备设置），所以专业版也可以使用这个方式安装。</li>
<li>台式电脑要注意了，杜比不支持前置声卡接口。</li>
<li>有厂商制定的声卡或者软件，可能有一些兼容问题，我的HP笔记本就是静音没有键盘灯提示了。</li>
<li>最后，渣渣笔记本的扬声器，随便淘宝买个50块以内的音响就完爆了，哈哈，提升硬件才是硬道理。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> doby </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[请告诉女儿：嫁人就嫁心机男]]></title>
      <url>/thinking-boy.html</url>
      <content type="html"><![CDATA[<p>本来是昨天听FM听到这篇文章的，文章非常好，虽然自己也没感情经历，突然感觉自己这么是个直男好吓人啊😭，就算是一段认识吧，分享下这个文章，也不转载了，（哭。<br><a id="more"></a></p>
<p>直接挂个链接吧。</p>
<p><strong>文章作者：</strong> 国馆</p>
<p><strong>原文链接：</strong> <a rel="external nofollow" target="_blank" href="https://www.douban.com/note/638049932/">https://www.douban.com/note/638049932/</a></p>
]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Travis CI 持续集成]]></title>
      <url>/TravisCI.html</url>
      <content type="html"><![CDATA[<h3 id="Travis-CI-持续集成"><a href="#Travis-CI-持续集成" class="headerlink" title="Travis CI 持续集成"></a>Travis CI 持续集成</h3><p>到这一步，你其实已经可以很简便的使用 <code>Hexo</code> 来写博客了，可人是一种永远不满足的动物。使用 Hexo 来写博客有一个问题就是，我只能在安装了 Hexo 的计算机上写东西，然后 hexo generate 再 hexo deploy 到托管服务器。如果我想在没有安装 Hexo 的电脑上写博客呢？如果我想随时随地修改，或者写一下博客呢？<br>当然一个简单办法就是把自己博客的源文件也托管到 Github，每次都把源文件 clone 下来，然后安装 Hexo，再构建发布就好了。可是这样做的话，始终不太优雅。那可以搞一个远程的服务器，把构建博客的事情交给服务器，每次要写博客的时候连接到服务器上去就行了。可既然我们把博客都托管到了 Github，为甚么博客的构建还需要服务呢？不行，这样还是不够优雅。如果有什么服务能够代替上述的那个服务器就好了，答案是确实有的——持续集成。<br><a id="more"></a></p>
<h4 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h4><blockquote>
<p><code>持续集成</code>（Continuous Integration）是一种软件开发实践。 在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。 每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。</p>
</blockquote>
<h4 id="什么是-Travis-CI"><a href="#什么是-Travis-CI" class="headerlink" title="什么是 Travis CI"></a>什么是 Travis CI</h4><blockquote>
<p><code>Travis CI</code> 是目前新兴的开源持续集成构建项目，它与 jenkins，GO 的很明显的特别在于采用 yaml 格式，同时它是在线的服务，不像 jenkins 需要你本地搭建服务器，简洁清新独树一帜。目前大多数的 Github 项目都已经移入到 Travis CI 的构建队列中，据说Travis CI 每天运行超过 4000 次完整构建。对于做开源项目或者 Github 的使用者，如果你的项目还没有加入 Travis CI 构建队列，那么我真的想对你说 OUT 了。</p>
</blockquote>
<h4 id="Travis-和-Hexo"><a href="#Travis-和-Hexo" class="headerlink" title="Travis 和 Hexo"></a>Travis 和 Hexo</h4><p>为什么我们要选择 Travis 呢，因为它和 Github 集成的程度非常高，对于 Github 上的开源项目，可以免费在 Travis 上构建（我们是不是该为免费的互联网精神干杯🍻），而非开源的私有项目想在 Travis 上构建价格还是非常感人的。<br>我先把在 Travis 上进行自动构建的思路说一下：<br><img src="http://7xin49.com1.z0.glb.clouddn.com/mac_qrsync/cbc37bcd05062212564fe2aaaee6631f.png-960.jpg" alt="Travis"></p>
<ul>
<li>我们在在 Github 的博客仓库里新建一个 <code>blog-source</code> 分支，然后把博客的源码托管到这个分支</li>
<li>每当我们在本地写好了博文之后，把修改 <code>push</code> 到该分支</li>
<li>Travis 上可以对这个项目的 <code>blog-source</code> 分支设置钩子，每当检测到 <code>push</code> 的时候就去仓库 <code>clone</code> 源代码</li>
<li>Travis 执行构建脚本</li>
<li>Travis 把构建结果通过 <code>push</code> 部署到 <code>master</code> 分支或者 Coding.net 的仓库里 </li>
</ul>
<p>在这样的自动化流程下，我们唯一需要做的事情就是 <code>push</code> 我们的博文到源代码分支，其他的事情交给 Travis，当然，这一流程是需要我们配置的。</p>
<h4 id="配置-Travis"><a href="#配置-Travis" class="headerlink" title="配置 Travis"></a>配置 Travis</h4><h5 id="注册-Travis"><a href="#注册-Travis" class="headerlink" title="注册 Travis"></a>注册 Travis</h5><p>Travis CI 不需要单独注册，直接使用 GitHub 账号登录就可以了。<br>上<a rel="external nofollow" target="_blank" href="https://travis-ci.org/">官网</a> 会发现有 Sign in with GitHub（使用GitHUb登录）和 Sign Up（注册），其实这俩做的事情都一样，就是用 GitHub 账号登录。登录后界面会显示你的 GitHub Repository，默认全部全部没有勾选，选择你的博客的 Repository 后完成第一步，如图：<br><img src="http://7xin49.com1.z0.glb.clouddn.com/mac_qrsync/c5c4ae39bc22681ccf481119befbe363.png-960.jpg" alt="image"><br>如果你没有看到自己的项目，请点击右上角的 <code>Sync with Github</code>。</p>
<h4 id="安装-Travis-CML"><a href="#安装-Travis-CML" class="headerlink" title="安装 Travis CML"></a>安装 Travis CML</h4><p>在进行下面的步骤之前，我们需要先安装 Travis 的 CML，因为后面的部署需要我们加密的自己的 SSH 私钥和 Github、Coding.net 通信。安装过程请看 <a rel="external nofollow" target="_blank" href="https://github.com/travis-ci/travis.rb#installation">Travis CML Installation</a>：<br>首先必须有 <a rel="external nofollow" target="_blank" href="http://www.ruby-lang.org/en/downloads/">Ruby 1.9.3</a> 以上，检查了版本之后，安装 Travis，检查版本即可： </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ruby -v</div><div class="line">gem install travis -v 1.8.4 --no-rdoc --no-ri</div><div class="line">travis version</div></pre></td></tr></table></figure>
<p>如上，如果出现 1.8.2 这样的版本信息，则说明 Travis CI Command Line Client 安装成功。之后进行登录，执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis login</div></pre></td></tr></table></figure></p>
<p>按照提示登录就好了。  </p>
<h4 id="配置-Travis-1"><a href="#配置-Travis-1" class="headerlink" title="配置 Travis"></a>配置 Travis</h4><p>在博客根目录下添加 Travis CI 所需要的配置文件 <code>.travis.yml</code>，配置文件内容和一些说明如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line">node_js: stable</div><div class="line"></div><div class="line"># assign build branches</div><div class="line">branches:</div><div class="line">  only:</div><div class="line">    - blog-source</div><div class="line"></div><div class="line"># cache this directory</div><div class="line">cache:</div><div class="line">  directories:</div><div class="line">    - node_modules</div><div class="line"></div><div class="line"># S: Build Lifecycle</div><div class="line">before_install:</div><div class="line">  - openssl aes-256-cbc -K $encrypted_a0b7f0848317_key -iv $encrypted_a0b7f0848317_iv -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class="line">  - chmod 600 ~/.ssh/id_rsa</div><div class="line">  - eval $(ssh-agent)</div><div class="line">  - ssh-add ~/.ssh/id_rsa</div><div class="line">  - cp .travis/ssh_config ~/.ssh/config</div><div class="line">  - npm install -g hexo-cli # 安装 hexo</div><div class="line">  - git clone -b mod https://github.com/quentin-chen/hexo-theme-even.git themes/even</div><div class="line"></div><div class="line">install:</div><div class="line">  - npm install # 安装 package.json 中的插件</div><div class="line"></div><div class="line">script:</div><div class="line">  - hexo generate</div><div class="line"></div><div class="line">after_success:</div><div class="line">  - git config --global user.name &quot;Quentin_Chen&quot;</div><div class="line">  - git config --global user.email &quot;quentin.chen@foxmail.com&quot;</div><div class="line">  - sed -i&apos;&apos; &quot;/^ *repo/s~github\.com~$&#123;githubToken&#125;@github.com~&quot; _config.yml</div><div class="line">  - hexo deploy</div><div class="line"># E: Build LifeCycle</div></pre></td></tr></table></figure>
<p>我逐步来讲解一下每一个配置项的意思。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">language: node_js</div><div class="line">node_js: stable</div><div class="line"></div><div class="line"># assign build branches</div><div class="line">branches:</div><div class="line">  only:</div><div class="line">    - blog-source</div><div class="line"></div><div class="line"># cache this directory</div><div class="line">cache:</div><div class="line">  directories:</div><div class="line">    - node_modules</div></pre></td></tr></table></figure></p>
<p>这里指定了构建的环境是 Node.js，版本是当前稳定版本。设置的 <code>WebHook</code> 钩子只检测 <code>blog-source</code> 分支的 <code>push</code> 变动。另外我们把 <code>node_modules</code> 文件夹放入缓存，这样可以大大节约每次构建的时间（2min -&gt; 30s）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">before_install:</div><div class="line">  - openssl aes-256-cbc -K &lt;you_key&gt; -iv &lt;your_iv&gt; -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class="line">  - chmod 600 ~/.ssh/id_rsa</div><div class="line">  - eval $(ssh-agent)</div><div class="line">  - ssh-add ~/.ssh/id_rsa</div><div class="line">  - cp .travis/ssh_config ~/.ssh/config</div><div class="line">  - npm install -g hexo-cli # 安装 hexo</div><div class="line">  - git clone &lt;theme_repo&gt; themes/&lt;theme&gt;</div></pre></td></tr></table></figure>
<p>其实每次 Travis 构建的时候，相当于创建了一个干净的虚拟机，除了 Git 等必须的工具，甚至连 Node.js 的环境都是现安装的。所以我们在构建自己的博客之前，需要做一些环境的准备。<br>其中 2-6 行是用来配置 SSH 私钥的，这样才能让 Github 和 Coding.net 知道你的身份。这一部分我们后面再说。<br>第 7 行是在 Travis 中安装 Hexo 环境，第 8 行是安装主题。</p>
<blockquote>
<p>关于主题这里，如果你对自己的主题做了修改（包括配置文件），那么应该把自己修改过的主题托管到 Github，这里填的 <code>&lt;theme_repo&gt;</code> 应是你自己地址。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">install:</div><div class="line">  - npm install # 安装 package.json 中的插件</div><div class="line"></div><div class="line">script:</div><div class="line">  - hexo generate</div><div class="line"></div><div class="line">after_success:</div><div class="line">  - git config --global user.name &quot;&lt;You Name&gt;&quot;</div><div class="line">  - git config --global user.email &quot;&lt;email&gt;&quot;</div><div class="line">  - hexo deploy</div></pre></td></tr></table></figure>
<p>这一部分，就是在 Travis 上模拟部署过程。因为要使用 Git，所以要提前配置好 Committer 的信息。<br>生成私钥加密文件 </p>
<blockquote>
<p>什么是私钥？<br>私钥就是密钥对（密钥对指一对公钥和私钥），我们在使用 Github 的时候，首先需要在 Github 上配置公钥，这是最基础的。那么，存在我们本地的私钥就是你的个人身份标示，如果你的项目 git 地址配置的是 git@github.com:username/projectname.git（相对的还有 <a href="https://github.com/username/projectname.git），" target="_blank" rel="external">https://github.com/username/projectname.git），</a> 当你在对 Repository 在一些操作（比如 push 等），则需要私钥进行身份验证了（这是自动验证的，如果是使用 https 的配置，则需要提供用户名和密码）。<br>我们在 Travis CI 上自动部署代码，就牵扯到了 push 操作，那么就需要提供私钥了。</p>
<p>为什么生成私钥加密文件？</p>
</blockquote>
<p>将私钥直接放在项目里，那么人人都能看到。私钥的泄露将会发生一系列的问题，比如有坏人拿你的私钥直接操作你的 git 项目，你能干啥他也能干啥（原理上面讲了），这咋整？我们需要对私钥进行加密。<br>Travis 提供了加密文件的支持，什么意思呢？我们可以对文件（这里指私钥）在本地进行加密，然后把加密过后的文件放在项目里，那么别人就无法获取里面的真实内容。然后我们在让 Travis 执行脚本的时候，在读取加密文件之前对文件进行解密（使用的解密密码提前在 Travis 上配置好了），这样就可以达到不将文件内容暴露，并且让 Travis 获取到真实内容的目的了，大概的时序图如下：<br><img src="http://7xin49.com1.z0.glb.clouddn.com/mac_qrsync/8801dc034d298600bfc9b7124a0f42cd.png-960.jpg" alt="image"><br>开始吧，我们首先把自己的在博客的根目录下建立 .travis 文件夹来存放相关的资料：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir .travis &amp;&amp; <span class="built_in">cd</span> .travis</div></pre></td></tr></table></figure></p>
<p>把本地的私钥复制一份过来，用 Travis 加密，然后删除（切记加密完了一定要删除原始密钥！！！）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp ~/.ssh/id_rsa .</div><div class="line">travis encrypt-file id_rsa</div><div class="line">rm id_rsa</div></pre></td></tr></table></figure></p>
<p>现在 ls 命令查看一下 <code>.travis</code> 目录应该只有 <code>id_rsa.enc</code> 这一个文件才对。然后我们再在当前目录下新建一个 <code>ssh_config</code> 用来配置 Travis 上的 SSH Client。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host *</div><div class="line">  User git</div><div class="line">  StrictHostKeyChecking no</div><div class="line">  IdentityFile ~/.ssh/id_rsa</div><div class="line">  IdentitiesOnly yes</div></pre></td></tr></table></figure>
<p>现在，我们在 Travis 网站，博客项目的设置（项目右上角）里可以看到两个用于解密私钥的环境变量：  <img src="http://7xin49.com1.z0.glb.clouddn.com/mac_qrsync/c180cfd5996f2b3c1d43f9017a11b7c9.png-960.jpg" alt="image"></p>
<p>把这两个环境变量名复制到上面的 <code>.travis.yaml</code> 文件里替换相应部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">before_install:</div><div class="line">  - openssl aes-256-cbc -K &lt;you_key&gt; -iv &lt;your_iv&gt; -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div></pre></td></tr></table></figure></p>
<p>这样，全部的配置就完成了。</p>
<blockquote>
<p>Tips： Github 还支持 Application Token 的方式来认证身份，比使用 SSH 私钥要更简便，但考虑到 Coding.net 并不支持，我还是选择普适的方法。有兴趣的同学可以自己研究一下，就当做课后作业吧:D。</p>
</blockquote>
<h4 id="完成工作流"><a href="#完成工作流" class="headerlink" title="完成工作流"></a>完成工作流</h4><p>在进行工作流之前我们来检查一下我们现在工作目录和所有必须的东西：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .travis*</div><div class="line">│   ├── id_rsa.enc</div><div class="line">│   └── ssh_config</div><div class="line">├── _config.yml*</div><div class="line">├── db.json*</div><div class="line">├── node_modules</div><div class="line">├── package.json*</div><div class="line">├── scaffolds*</div><div class="line">├── <span class="built_in">source</span>*</div><div class="line">│   ├── CNAME*</div><div class="line">│   ├── _posts</div><div class="line">│   ├── about</div><div class="line">│   ├── categories</div><div class="line">│   ├── img</div><div class="line">│   ├── media</div><div class="line">│   └── tags</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<p>我用星号标记的文件和文件夹都是十分重要的，确保 Git 覆盖了这些文件和目录，然后我们把目录 <code>push</code> 到 <code>github/blog-source</code> 仓库分支。Travis WebHook 立马就会检测到 <code>push</code>，然后开始构建了：<br><img src="http://7xin49.com1.z0.glb.clouddn.com/mac_qrsync/e0f11bcfb411c5b73bdcac015ee87b3d.png-960.jpg" alt="image"></p>
<p>上图是一次成功的构建，我们可以点开 <code>Job log</code> 看一下构建过程的 Log 文件，特别是构建没有成功的话，我们更要仔细阅读，找准问题，对症下药。<br>构建成功以后再去刷新你的网页，是不是已经是最新的了呢？</p>
<p>以上是<strong>利用 <code>Travis</code> 实现全自动部署</strong></p>
<p><strong>文章作者写的非常详细，我就完全复制转载过来了，非常感谢。</strong></p>
<p><strong>原文作者: Kun Chen</strong></p>
<p><strong>原文链接：<a rel="external nofollow" target="_blank" href="http://kchen.cc/2016/11/12/hexo-instructions/">http://kchen.cc/2016/11/12/hexo-instructions/</a> </strong></p>
<p><strong>侵删</strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Travis CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随便写点]]></title>
      <url>/to-self.html</url>
      <content type="html"><![CDATA[<p>想起曾今为了买电脑，每天都要去看下评测，总是感觉那是个莫大的荣誉，可是现在，都不愿意摸电脑了，哈哈，朋友圈、空间这些东西不再玩了，牢骚也不再去分享了。感觉人都要变老了，没那么大精力去玩了。</p>
<p>看看镜子里的自己，可能没感觉，还是这么的年轻，突然拿起以前刚入大学的照片，真是一个天上，一个地下，现在人也变黑了，感觉脸上的棱角也要抹平了。世界的一切都没有变，只是我变了，变老了，生命从来都不等人，朋友们现在都开始展示自己的高调生活了，手机、车子还有房子了，现在自己虽然说刚毕业，义务所有，一切还需要自己打拼。我也想成为了不起的人，但是你想成为的人，也会失去大把周围的美丽的风景。</p>
<p>可能从小到大，我都是个很闷的人吧，可能还很小气，不想跟别人分享任何东西吧，却往往忽视了这个世界上关心我的人了。对的，不管什么什么时候，都不能忘记曾经对自己好的人，即使只是一餐饭，还是一声关心问候，甚至只是一句玩笑话。应该留点时间给老爸老妈了，他们的头发都开始白了。现在在武汉工作，尽可能的近一点，方便一点吧，多点时间回家吧。  </p>
<p>我想，自己已经早已经过了那个年少的年纪了，不能再不顾后果的做一件事情，即使是自己多么喜爱，多么不想放弃的一件事，一个东西，还是一个人。<strong>最美好的时光，莫过于再一个人的年少，无知者无畏。“花有重开日，人无再少年。”</strong>   </p>
<p>虽然想成熟了，但是自己也没经历过什么大事，心里还是那个满心忐忑的少年吧，嗯，其实我也没变什么，还是那么简单：去做自己喜欢做的事情，去爱自己想爱的人。</p>
<p>年轻可能是现在我剩下最好的礼物可，不能浪费了，前面的时光我放弃了很多的东西，如今追回来虽然好难，但是我是不会轻易言弃的。不管在经历着什么，都要记得每一天，认认真真的，不要去放弃了。</p>
<p>我这个人的圈子很小，没什么朋友，很闷，也很慢热，，遇到苦难了，想坚持，也想放弃，不想逗留。曾经也想改变性格，但是实在是很无力，反而让自己很难受，反正这是上天给予我的礼物，现在我的工作和生活也不必在乎这个性格的弊端，我已经接受了。</p>
<p>说过<strong>生活要晶莹剔透柔软善良，想对待第一次自己喜欢的人儿一样去对待它。没有好坏，没有歧视，只用想去付出，然后得到。</strong></p>
<p>我总是这么的心急，只要一切都来得及。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《苦橙》-- 歌词]]></title>
      <url>/melangolo.html</url>
      <content type="html"><![CDATA[<p>以前听的一首很美的歌，欣赏下歌词。<a id="more"></a></p>
<blockquote class="blockquote-center"><h2 id="苦橙"><a href="#苦橙" class="headerlink" title="苦橙"></a>苦橙</h2><h5 id="林力尧"><a href="#林力尧" class="headerlink" title="林力尧"></a>林力尧</h5><p>越沉默 越用心包裹<br>忽略 越多难过 容易更乐活<br>可终究 郁结如核的感受<br>还是被自己品尝出浅薄<br>不甘被冷落<br>心甘情愿被你利用<br>榨尽真心<br>难怪换被丢弃的理由<br>其实我也知道我<br>并不算成熟<br>所以更渴望能有<br>风雨的承受<br>无奈连光都照不够<br>也没有人来收获<br>只能自己结果<br>和坠地的疼痛<br>其实我也知道我<br>是有些懦弱<br>表里不一的坚强<br>难道也有错<br>我只是不愿意<br>一直妥协昧心到腐朽<br>成色不足的苦橙<br>难道注定就<br>不如那些罐头<br>讨喜地被拥有</p>
<p>越肺腑 越失心袒露<br>他们 都多事故 而我多冲动<br>学不会 深加工过的笑容<br>就留给他们<br>礼貌地对我<br>你也别内疚<br>反正我被笑过很多<br>卖相不好<br>又怎么能怪人不识货<br>其实我也知道我<br>并不算成熟<br>所以更渴望能有<br>风雨的承受<br>无奈连光都照不够<br>也没有人来收获<br>只能自己结果<br>和坠地的疼痛<br>其实我也知道我<br>是有些懦弱<br>表里不一的坚强<br>难道也有错<br>我只是不愿意<br>一直妥协昧心到腐朽<br>成色不足的苦橙<br>难道注定就<br>不如那些罐头<br>讨喜地被拥有<br>你别内疚<br>反正现在我已想通<br>卖相不好<br>也许才有真心等候</p>
</blockquote>]]></content>
      
        <categories>
            
            <category> 那些很美的句子 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌词 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《浮生》-- 歌词]]></title>
      <url>/floating-life.html</url>
      <content type="html"><![CDATA[<p>今天听到这首歌，第一次听到它，我感觉无穷的想念都涌出来了，说真的，我哭了。<a id="more"></a></p>
<blockquote class="blockquote-center"><h2 id="浮生"><a href="#浮生" class="headerlink" title="浮生"></a>浮生</h2><h5 id="刘莱斯"><a href="#刘莱斯" class="headerlink" title="刘莱斯"></a>刘莱斯</h5><p>无人与我把酒分<br>无人告我夜已深<br>无人问我粥可暖<br>无人与我立黄昏<br>他真的很喜欢你 像风走了八千里<br>他真的很喜欢你 像阵雨下到了南极<br>他真的很想念你 像珊瑚沉在海底<br>他真的很喜欢你 不问归期不远万里<br>他真的很喜欢你 像盲人看一出哑剧<br>他真的很喜欢你 像第一首诗不尽人意<br>他真的很喜欢你 像太阳自转无论朝夕<br>他真的很喜欢你 千言万语乐此不疲</p>
<p>他真的很喜欢你 像春雨下得淅淅沥沥<br>他真的很喜欢你 像夏日聒噪的蝉鸣<br>他真的很想念你 像秋叶落得悄无声息<br>他真的很喜欢你 想冬天的雪沁在心里<br>他真的很喜欢你 像狗本性难移<br>他真的很喜欢你 所以他可以一直没脸没皮<br>他真的很想念你 无时不刻不在想你<br>他真的很喜欢你 所以他把你捧在手心<br>他真的很喜欢你 所以固执地排比比喻<br>他真的很喜欢你 虽然他的感情实在细腻<br>他真的很想念你 真的无时不刻不再想你<br>他真的很喜欢你 不想浪费时间的一点一滴<br>他真的 很喜欢你<br>他真的 很喜欢你<br>他真的 很想念你<br>他真的 很喜欢你 很喜欢很喜欢你<br>有人与我把酒分<br>有人告我夜已深<br>有人问我粥可暖<br>有人与我立黄昏<br>有人待我诚且真<br>有人忧我细无声<br>有人知我冷与暖<br>有人伴我度余生</p>
</blockquote>]]></content>
      
        <categories>
            
            <category> 那些很美的句子 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 歌词 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不眠]]></title>
      <url>/never-sleeping.html</url>
      <content type="html"><![CDATA[<p>一直在想起你，<br>反反复复告诉自己不要打扰你了，<br>其实我总是这么的固执，<br>一次次骗自己，<br>但还是没能停下颤抖的手，<br>向你发送了一个憨笑的表情。  </p>
<p>每次发送一条消息，<br>有时候要想半天，<br>怎么能去撩动你的心，<br>虽然大多数的时候没能得到回应，<br>但每次发完我得内心，<br>总是还是很期待的，<br>不知道这种感觉是从什么时候开始的，<br>是多年前的高中，<br>还是现在，  </p>
<p>我想，<br>不期待太多的回应，<br>但愿一切安好吧，<br>我想，<br>我还是太懦弱了，<br>虽然想追回你，<br>照顾你，<br>但我真不知道该用什么来追回你，<br>可能我这个人真有点烂了，<br>没付出过什么，<br>也没做过什么刻骨铭心的事情，<br>只有等待，<br>等待就等于没有结果。</p>
<p>一个又一个夜晚吧，<br>一次又一次的念，<br>我的生活就是这样的吧，<br>做自己想做的事，<br>买想买的东西，<br>去和喜欢的人聊聊天，<br>很快乐，<br>虽然很打扰，<br>但是抱歉，<br>我很自私。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gzip stdin not in gzip format的错误]]></title>
      <url>/gzip-error.html</url>
      <content type="html"><![CDATA[<p>出现这个错误，觉得很奇怪，网上全部都说是去掉文件后缀<code>.gz</code>，要不就是使用<code>-xvf</code>，不要加上参数<code>z</code>。但是这种方法不能解决我的错误。</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@localhost opt]<span class="comment">#  tar -xvf redis-3.2.4.tar.gz</span></div><div class="line"></div><div class="line">gzip: stdin: not <span class="keyword">in</span> gzip format</div><div class="line">tar: Child returned status 1</div><div class="line">tar: Error is not recoverable: exiting now</div><div class="line">[root@localhost opt]<span class="comment"># file redis-3.2.4.tar.gz </span></div><div class="line">redis-3.2.4.tar.gz: HTML document, UTF-8 Unicode text</div></pre></td></tr></table></figure>
<p>语　　法：<code>file [-beLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...]</code></p>
<p><strong>可以看出来，我们下载下来的文件并不是我们想要的，弄了半天，它只是一个<code>html</code>页面，气死人是吧。</strong></p>
<p>补充说明：通过file指令，我们得以辨识该文件的类型。</p>
<p>参　　数：<br>　<code>-b</code> 　列出辨识结果时，不显示文件名称。<br>　<code>-c</code>　 详细显示指令执行过程，便于排错或分析程序执行的情形。<br>　<code>-f</code>     &lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称呢感，让file依序辨识这些文件，格式为每列一个文件名称。<br>　<code>-L</code> 　直接显示符号连接所指向的文件的类别。<br>　<code>-m</code>    &lt;魔法数字文件&gt; 　指定魔法数字文件。<br>　<code>-v</code> 　显示版本信息。<br>　<code>-z</code>　 尝试去解读压缩文件的内容。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redies安装]]></title>
      <url>/redis.html</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>直接去官网下载最新版的，前面使用<code>wget</code>下载半天下载下来的全是错误文件，浪费了大把时间，最重要的是浪费心情。<a id="more"></a></p>
<p>Redis官网(redis.io)</p>
<h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># tar xzf redis-4.0.2.tar.gz</span></div></pre></td></tr></table></figure>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>进入解压的文件中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> redis-4.0.2</div></pre></td></tr></table></figure>
<p>编译<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line"><span class="built_in">cd</span> src</div><div class="line">make install PREFIX=/usr/<span class="built_in">local</span>/redis</div></pre></td></tr></table></figure></p>
<h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>新建文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/<span class="built_in">local</span>/redis/etc</div></pre></td></tr></table></figure></p>
<p>移动config文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ./redis.conf /usr/<span class="built_in">local</span>/redis/etc/</div></pre></td></tr></table></figure>
<h3 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server</div></pre></td></tr></table></figure>
<p>前台运行中</p>
<p>想要后台运行修改配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /usr/<span class="built_in">local</span>/redis/etc/redis.conf</div></pre></td></tr></table></figure></p>
<p>将<code>daemonize</code>的值改为<code>yes</code></p>
<p>后台运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis.conf</div></pre></td></tr></table></figure></p>
<p>查看端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># netstat -tunpl | grep 6379                    </span></div><div class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      5769/./redis-server</div></pre></td></tr></table></figure></p>
<p>启动成功。  </p>
<p>客户端登陆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]<span class="comment"># /usr/local/redis/bin/redis-cli </span></div><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> foo bar</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get foo</div><div class="line"><span class="string">"bar"</span></div></pre></td></tr></table></figure></p>
<p>关闭服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli shutdown</div></pre></td></tr></table></figure></p>
<p>redis开机自启  </p>
<p><code>vim /etc/rc.local</code><br>底部添加<br>　<code>/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis-conf</code></p>
<h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">redis-benchmark：redis性能测试工具</div><div class="line"></div><div class="line">　　redis-check-aof：检查aof日志的工具</div><div class="line"></div><div class="line">　　redis-check-dump：检查rdb日志的工具</div><div class="line"></div><div class="line">　　redis-cli：连接用的客户端</div><div class="line"></div><div class="line">　　redis-server：redis服务进程</div></pre></td></tr></table></figure>
<h3 id="剩下就是配置"><a href="#剩下就是配置" class="headerlink" title="剩下就是配置"></a>剩下就是配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">daemonize：如需要在后台运行，把该项的值改为yes</div><div class="line"></div><div class="line">　　pdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址</div><div class="line"></div><div class="line">　　<span class="built_in">bind</span>：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</div><div class="line"></div><div class="line">　　port：监听端口，默认为6379</div><div class="line"></div><div class="line">　　timeout：设置客户端连接时的超时时间，单位为秒</div><div class="line"></div><div class="line">　　loglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</div><div class="line"></div><div class="line">　　logfile：配置<span class="built_in">log</span>文件地址，默认使用标准输出，即打印在命令行终端的端口上</div><div class="line"></div><div class="line">　　database：设置数据库的个数，默认使用的数据库是0</div><div class="line"></div><div class="line">　　save：设置redis进行数据库镜像的频率</div><div class="line"></div><div class="line">　　rdbcompression：在进行镜像备份时，是否进行压缩</div><div class="line"></div><div class="line">　　dbfilename：镜像备份文件的文件名</div><div class="line"></div><div class="line">　　dir：数据库镜像备份的文件放置的路径</div><div class="line"></div><div class="line">　　slaveof：设置该数据库为其他数据库的从数据库</div><div class="line"></div><div class="line">　　masterauth：当主数据库连接需要密码验证时，在这里设定</div><div class="line"></div><div class="line">　　requirepass：设置客户端连接后进行任何其他指定前需要使用的密码</div><div class="line"></div><div class="line">　　maxclients：限制同时连接的客户端数量</div><div class="line"></div><div class="line">　　maxmemory：设置redis能够使用的最大内存</div><div class="line"></div><div class="line">　　appendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态</div><div class="line"></div><div class="line">　　appendfsync：设置appendonly.aof文件进行同步的频率</div><div class="line"></div><div class="line">　　vm_enabled：是否开启虚拟内存支持</div><div class="line"></div><div class="line">　　vm_swap_file：设置虚拟内存的交换文件的路径</div><div class="line"></div><div class="line">　　vm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</div><div class="line"></div><div class="line">　　vm_page_size：设置虚拟内存页的大小</div><div class="line"></div><div class="line">　　vm_pages：设置交换文件的总的page数量</div><div class="line"></div><div class="line">　　vm_max_thrrads：设置vm IO同时使用的线程数量</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于SEO]]></title>
      <url>/seo.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><code>SEO</code>是由英文<code>Search Engine Optimization</code>缩写而来， 中文意译为“搜索引擎优化”！SEO是指通过对网站进行站内优化和修复(网站Web结构调整、网站内容建设、网站代码优化和编码等)和站外优化，从而提高网站的网站关键词排名以及公司产品的曝光度。通过搜索引擎查找信息是当今网民们寻找网上信息和资源的主要手段。(来自百度百科)</p>
</blockquote>
<a id="more"></a>
<h3 id="关于谷歌站长平台Google-Search-Console"><a href="#关于谷歌站长平台Google-Search-Console" class="headerlink" title="关于谷歌站长平台Google Search Console"></a>关于谷歌站长平台Google Search Console</h3><p>在国内使用谷歌大家都懂的，这里就说下谷歌收录我们的网站</p>
<p>登陆谷歌站长平台，验证我们的网站的所有权，推荐使用html验证，方便。</p>
<p>然后提交我们的sitemap.xml站点地图，谷歌爬虫就会自动去抓取我们的网站了。</p>
<p>网站提交到谷歌大约一到两天就会被收录，速度是相当快的。</p>
<h3 id="关于百度站长平台"><a href="#关于百度站长平台" class="headerlink" title="关于百度站长平台"></a>关于百度站长平台</h3><p>在国内的网站，离开了百度，就可以回去玩泥巴了。</p>
<p>所以，在国内的网站优先做好百度这边的相关优化，相对于谷歌，百度这边的东西稍微复杂点，需要花点时间研究下。</p>
<h4 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h4><p>百度上分为两种链接提交方式，当然你可以都是用，或者使用其中一种。<br><img src="http://ov62kaxkk.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170924215007.png" alt="image"></p>
<h5 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h5><p>自动提交又分三种方式，一样的你也可以都使用。</p>
<h6 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h6><p><img src="http://ov62kaxkk.bkt.clouddn.com/3333.png" alt="image"><br>调用百度给我们生成的接口，在我们推送网页到服务器的时候，可以自动提交我们的网站到百度站长平台。（推荐）</p>
<h6 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</div><div class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</div><div class="line">    s.parentNode.insertBefore(bp, s);</div><div class="line">&#125;)();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>在我们需要推送的网页上加上这个js脚本，每次打开这个网页，都会自动将网页推送给百度。</p>
<h6 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h6><p>提交我们的sitemap.xml，百度爬虫可以自动抓取我们的网站。</p>
<h5 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h5><p>故名思意，把我们的网页都填上去，手动提交。相对上面的自动提交，就显得比较麻烦。</p>
<h4 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h4><p>百度上的说明：</p>
<blockquote>
<p>使用说明<br>1、robots.txt可以告诉百度您网站的哪些页面可以被抓取，哪些页面不可以被抓取。<br>2、您可以通过Robots工具来创建、校验、更新您的robots.txt文件，或查看您网站robots.txt文件在百度生效的情况。<br>3、Robots工具目前支持48k的文件内容检测，请保证您的robots.txt文件不要过大，目录最长不超过250个字符。 </p>
</blockquote>
<p>很容易理解，不知道怎么生成，可以去网站百度robots有自动生成的站长工具。</p>
<h3 id="优化网站"><a href="#优化网站" class="headerlink" title="优化网站"></a>优化网站</h3><p>按道理说目录结构越简单，爬虫越容易抓取。</p>
<p>网页尾缀改成.html</p>
<p>国内网站不要挂在Github Page上面，百度爬虫抓取不到。</p>
<p>给非友情链接的出站链接添加 “nofollow” 标签，<br>爬虫会从你网站跑出去，再也回不来了，加上这个标签，爬虫不回去爬取这个链接，便签避免不必要的PR输出。</p>
<p>网站关键字keywords</p>
<p>网站简介 description</p>
<p>网站 title</p>
<blockquote>
<p>关键字出现在title标题里是有利于seo优化的，前提是你的目标关键词已经确定好。如果确定好的话，尽可能让它们在title标题尽量靠前，同时标题总字数注意控制在80个字符以内，切勿堆砌关键字。title的标点符号：关键词分割符号英文半角逗号，_ | ;品牌与关键词分割符号 -</p>
</blockquote>
<p>周末了，休息了。这个国庆要加班，难受。。。</p>
<p>update20171002</p>
<p>哈哈 <code>今日头条销售威胁</code> 这个新闻看了下，</p>
<blockquote>
<p>9月30日消息，近日某锁具商家老板表示，遭到今日头条销售威胁，如果继续在百度投放广告，而不在今日头条投放广告，将让自己团队的人一起点击直到商家百度余额为负。<br>据该商家老板的录音，近日，他接到今日头条销售电话，“你们百度这边还有多少余额啊？我看看要不要再点一下。你这边真的不考虑一下其他平台吗？”<br>在老板表示不考虑其他平台后，该销售称刚才已经让团队每个人都点一下了，大概一千个人吧，可能让该商家百度的余额等一会是负的。“所以说没事呀，不是挺好的嘛，你做（百度）嘛！你做！我们点嘛！做，一直做得你做到什么时候我们点到什么时候。”<br>随后，在威胁商家后，该销售向推荐今日头条，不过并未多加介绍，直接向商家表示，现在把微信加一下，把我的账号发给你，然后你打一下款就好了。</p>
</blockquote>
<p>如果在以前，对这个事件可能感觉到不可思议，但是，目前，<code>百度凤巢</code> 推广后，导致这个国内互联网竞价有点变化，以前都是看谁出的钱多，谁往上，现在还要看质量，网页排版，体验有很大影响。所以现在要竞价更高，而且还是在背后计算，才能出结果。</p>
<p>据说莆田系医院的广告，点一次，需要付1000以上，可怕，大家为了<code>正义</code>keyi 多点点，当然每天每个IP只生效一次，就是那种带金色V的。<br><img src="https://i.loli.net/2017/10/09/59db8508b75aa.png" alt="img"></p>
<p>update20171009</p>
<p>关于博客长时间没更新后，导致收录量降低的问题</p>
<p>总结就是博客质量不行咯，扎心了/。<br>当然坚持更新下，估计还是会回来的，真是心累，百度这种算法要累死人。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SEO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高四位，低四位]]></title>
      <url>/byte.html</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天做业务的时候，遇到个问题，做协议的消息处理中，有个档位类型，分<code>高四位</code>是一种档位，<code>低四位</code>是例外的一种档位，当时看到需求一阵懵，百度了下，才了解了下，才清楚。<br><a id="more"></a></p>
<p>其实这个就是4个位加上四个位，刚好一个字节，就是一个byte，例如<code>00011000</code>，我们需要把它拆开。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: GearsType </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>: 档位类型 </span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月23日 下午2:16:23 </span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">enum</span> GearsType &#123;</div><div class="line">	<span class="comment">//空挡</span></div><div class="line">	G00((<span class="keyword">byte</span>)<span class="number">0</span>, <span class="string">"空档"</span>, <span class="keyword">true</span>),</div><div class="line">	<span class="comment">//高4位档</span></div><div class="line">	G01((<span class="keyword">byte</span>)<span class="number">1</span>, <span class="string">"倒车档"</span>, <span class="keyword">true</span>), G02((<span class="keyword">byte</span>)<span class="number">2</span>, <span class="string">"低速档"</span>, <span class="keyword">true</span>), G03((<span class="keyword">byte</span>)<span class="number">4</span>, <span class="string">"中速档"</span>, <span class="keyword">true</span>), G04((<span class="keyword">byte</span>)<span class="number">8</span>, <span class="string">"高速挡"</span>, <span class="keyword">true</span>), </div><div class="line">	<span class="comment">//低4位档</span></div><div class="line">	G05((<span class="keyword">byte</span>)<span class="number">1</span>, <span class="string">"1档"</span>, <span class="keyword">false</span>), G06((<span class="keyword">byte</span>)<span class="number">2</span>, <span class="string">"2档"</span>, <span class="keyword">false</span>), G07((<span class="keyword">byte</span>)<span class="number">4</span>, <span class="string">"3档"</span>, <span class="keyword">false</span>), G08((<span class="keyword">byte</span>)<span class="number">8</span>, <span class="string">"4档"</span>, <span class="keyword">false</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Byte name;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> String value;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Boolean flag;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> name</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> value</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> flag</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">GearsType</span><span class="params">(Byte name, String value, Boolean flag)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">		<span class="keyword">this</span>.flag = flag;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 获取档位</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> string</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String string)</span> </span>&#123;</div><div class="line">		Byte index = Byte.parseByte(string);</div><div class="line">		<span class="keyword">if</span> (index == G00.name) &#123;</div><div class="line">			<span class="keyword">return</span> G00.value;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">byte</span> high = (<span class="keyword">byte</span>) ((index &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>);<span class="comment">// 高四位</span></div><div class="line">		<span class="keyword">byte</span> low = (<span class="keyword">byte</span>) (index &amp; <span class="number">0x0f</span>);<span class="comment">// 低四位</span></div><div class="line">		String highResult = <span class="keyword">null</span>;</div><div class="line">		String lowResult = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span> (GearsType g : GearsType.values()) &#123;</div><div class="line">			<span class="comment">// 高四位</span></div><div class="line">			<span class="keyword">if</span> (g.flag &amp;&amp; g.name == high &amp;&amp; highResult == <span class="keyword">null</span>) &#123;</div><div class="line">				highResult = g.value;</div><div class="line">				<span class="comment">// 低四位</span></div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!g.flag &amp;&amp; g.name == low &amp;&amp; lowResult == <span class="keyword">null</span>) &#123;</div><div class="line">				lowResult = g.value;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> highResult == <span class="keyword">null</span> || lowResult == <span class="keyword">null</span> ? <span class="keyword">null</span> : highResult + <span class="string">"/"</span> + lowResult;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p><code>0xf0</code> 是 8位 ：<code>1111 0000</code><br>使用位与操作符<code>&amp;</code>，再将它右移4位，就可以得到高四位了，同理可以得到低四位。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[20170917]]></title>
      <url>/20170917.html</url>
      <content type="html"><![CDATA[<p>今天是周日，作为个程序员，就不要在这个好日子出去浪了，安心，最该就是要注意养好身体，哈哈，因为上班确实有点累。</p>
<p>但是，但是了，个人生活也不能太糟蹋了，都说程序员的生活就像只无头的苍蝇，邋遢的很，这句话，说点就有点不对了，我今天就要来个大扫除了，毕竟，这个狗窝我还得住好长一段日子。</p>
<p>一大早做个早餐吃下，就把被褥，都扔进洗衣机了，接下来搞卫生了，突然发现门上有只壁虎，但是，它已经憋成一坨了。。难受，很明显，它被门真的夹坏了。只能小心清理下它的身体，祈祷不要怪我啊啊啊，我不是有意的。</p>
<p>只能说经历这个就遭报应了啊，拿起简单划个快递箱子半天划不开，结果弄完，发现手上一滩血，bbb，受伤了，手上两道口子，刚才没发觉，剪刀什么时候这么快，完全没知觉。。。</p>
<p>现在都感觉后怕了。。明天还能去上班吗？</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven错误 Plugin execution not covered by lifecycle configuration org.codehaus.mo...]]></title>
      <url>/maven-error-one.html</url>
      <content type="html"><![CDATA[<p>导<code>geoserver</code>源码时发现，我的<code>maven</code>项目<code>pom.xml</code>有几个都报错了，一时没解决记录下。<a id="more"></a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>eclipse  - 4.61</li>
<li>maven 3.3.9</li>
<li>项目 geoserver 源码 2.11.2 </li>
</ul>
<h3 id="出现错误"><a href="#出现错误" class="headerlink" title="出现错误"></a>出现错误</h3><p>正常import源码maven项目报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Multiple annotations found at this line:</div><div class="line">- maven-enforcer-plugin ...</div><div class="line">- Plugin execution not covered by lifecycle configuration: org.codehaus.mojo:aspectj-maven-plugin:1.3.1:compile (execution: </div><div class="line"> default, phase: compile)</div></pre></td></tr></table></figure></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">                  ....</div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><plugins> 标签外再套一个 <code>&lt;pluginManagement&gt;</code> 标签  </plugins></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MQTT在JAVA中使用]]></title>
      <url>/java-mqtt.html</url>
      <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>由于项目中需求，多个客户机终端不断发送位置给服务机，服务机根据消息，准确判断信息，并返回响应，回复该客户机。</p>
</blockquote>
<p>在这里我们的服务机，不但要订阅所有客户机的主题，还要根据客户机消息做出相应的响应，服务机同时充当客户机使用，客户机也推送主题消息，充当服务器。<br><a id="more"></a> </p>
<blockquote>
<p>关键问题：</p>
<ol>
<li>服务器怎么区分各个客户机</li>
<li>主题配置方面的问题，不可能每个机器配个主题</li>
<li>通信方面，选择哪种消息级别</li>
</ol>
</blockquote>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="使用maven项目，刚好在仓库导包了，可以使用（推荐）"><a href="#使用maven项目，刚好在仓库导包了，可以使用（推荐）" class="headerlink" title="使用maven项目，刚好在仓库导包了，可以使用（推荐）"></a>使用maven项目，刚好在仓库导包了，可以使用（推荐）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.paho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.paho.client.mqttv3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="仓库没有包，直接去网上下，可以直接导包到Lib中"><a href="#仓库没有包，直接去网上下，可以直接导包到Lib中" class="headerlink" title="仓库没有包，直接去网上下，可以直接导包到Lib中"></a>仓库没有包，直接去网上下，可以直接导包到Lib中</h4><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.mqtt.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttClient;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: ServerMQTT </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>:  服务器接收多个客户端的主题，同时要像客户端反馈</span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月12日 下午12:52:01 </span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMQTT</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 连接参数</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_STRING = <span class="string">"tcp://192.168.19.200:8001"</span>; <span class="comment">//host</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> CLEAN_START = <span class="keyword">true</span>;  <span class="comment">//是否清空session，false保留</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_ALIVE = <span class="number">30</span>;<span class="comment">// 低耗网络，但是又需要及时获取数据，心跳30*1.5s</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_TIME_OUT = <span class="number">10</span>; <span class="comment">//连接超时</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CLIENT_ID = <span class="string">"master"</span>;<span class="comment">// 客户端标识</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QOS_VALUES = &#123; <span class="number">0</span> &#125;;<span class="comment">// 对应主题的消息级别</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] TOPICS = &#123; <span class="string">"agri/#"</span>&#125;; <span class="comment">//匹配agri/下所有的主题</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String userName = <span class="string">"agri"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String passWord = <span class="string">"admin@123"</span>;</div><div class="line">	<span class="keyword">private</span> MqttConnectOptions options;</div><div class="line">	<span class="keyword">private</span> MqttClient mqttClient;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 构造函数</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> MqttException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServerMQTT</span><span class="params">()</span> <span class="keyword">throws</span> MqttException </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 发送消息</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> topic 主题</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> message 消息</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> qos 消息级别&#123;0,1,2&#125;</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> retained 是否是实时发送的消息(false=实时，true=服务器上保留的消息)</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String message, <span class="keyword">int</span> qos, <span class="keyword">boolean</span> retained)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//断开重连</span></div><div class="line">			<span class="keyword">if</span> (mqttClient == <span class="keyword">null</span> || !mqttClient.isConnected()) &#123;</div><div class="line">				connect();</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 发布消息</span></div><div class="line">			mqttClient.publish(topic, message.getBytes(), qos, retained);</div><div class="line">		&#125; <span class="keyword">catch</span> (MqttException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 重新连接服务</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			mqttClient = <span class="keyword">new</span> MqttClient(CONNECTION_STRING, CLIENT_ID, <span class="keyword">new</span> MemoryPersistence());</div><div class="line">			<span class="comment">// MQTT的连接设置</span></div><div class="line">			options = <span class="keyword">new</span> MqttConnectOptions();</div><div class="line">			<span class="comment">// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接</span></div><div class="line">			options.setCleanSession(CLEAN_START);</div><div class="line">			<span class="comment">// 设置连接的用户名</span></div><div class="line">			options.setUserName(userName);</div><div class="line">			<span class="comment">// 设置连接的密码</span></div><div class="line">			options.setPassword(passWord.toCharArray());</div><div class="line">			<span class="comment">// 设置超时时间 单位为秒</span></div><div class="line">			options.setConnectionTimeout(KEEP_TIME_OUT);</div><div class="line">			<span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔1.5*30秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></div><div class="line">			options.setKeepAliveInterval(KEEP_ALIVE); </div><div class="line">			<span class="comment">// 设置回调</span></div><div class="line">			mqttClient.setCallback(<span class="keyword">new</span> PushCallback());</div><div class="line"></div><div class="line">			mqttClient.connect(options);</div><div class="line">			mqttClient.subscribe( TOPICS , QOS_VALUES);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 启动入口</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> MqttException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</div><div class="line">		ServerMQTT server = <span class="keyword">new</span> ServerMQTT();</div><div class="line">		server.connect();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="客户机"><a href="#客户机" class="headerlink" title="客户机"></a>客户机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.mqtt.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttClient;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttSecurityException;</div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMQTT</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 连接参数</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_STRING = <span class="string">"tcp://192.168.19.200:8001"</span>; <span class="comment">// host</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> CLEAN_START = <span class="keyword">true</span>; <span class="comment">// 是否清空session，false保留</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_ALIVE = <span class="number">30</span>;<span class="comment">// 低耗网络，但是又需要及时获取数据，心跳30*1.5s</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_TIME_OUT = <span class="number">10</span>; <span class="comment">// 连接超时</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CLIENT_ID = <span class="string">"client1"</span>;<span class="comment">// 客户端标识</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QOS_VALUES = &#123; <span class="number">0</span> &#125;;<span class="comment">// 对应主题的消息级别</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PUBLISH_TOPIC = <span class="string">"agri/index1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] RECEIVE_TOPIC = &#123;<span class="string">"agri/index1/back"</span>&#125;;</div><div class="line">	<span class="keyword">private</span> MqttClient client;</div><div class="line">	<span class="keyword">private</span> MqttConnectOptions options;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String userName = <span class="string">"agri"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String passWord = <span class="string">"admin@123"</span>;</div><div class="line">	<span class="keyword">private</span> ScheduledExecutorService scheduler;</div><div class="line"></div><div class="line">	<span class="comment">// 重新连接</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReconnect</span><span class="params">()</span> </span>&#123;</div><div class="line">		scheduler = Executors.newSingleThreadScheduledExecutor();</div><div class="line">		scheduler.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">if</span> (!client.isConnected()) &#123;</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						client.connect(options);</div><div class="line">					&#125; <span class="keyword">catch</span> (MqttSecurityException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125; <span class="keyword">catch</span> (MqttException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="number">0</span> * <span class="number">1000</span>, <span class="number">10</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 发送消息</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> topic</span></div><div class="line"><span class="comment">	 *            主题</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></div><div class="line"><span class="comment">	 *            消息</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> qos</span></div><div class="line"><span class="comment">	 *            消息级别&#123;0,1,2&#125;</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> retained</span></div><div class="line"><span class="comment">	 *            是否是实时发送的消息(false=实时，true=服务器上保留的最后消息)</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String message, <span class="keyword">int</span> qos, <span class="keyword">boolean</span> retained)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (client == <span class="keyword">null</span> || !client.isConnected()) &#123;</div><div class="line">				connect();</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 发布消息</span></div><div class="line">			client.publish(topic, message.getBytes(), qos, retained);</div><div class="line">		&#125; <span class="keyword">catch</span> (MqttException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 重新连接服务</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			client = <span class="keyword">new</span> MqttClient(CONNECTION_STRING, CLIENT_ID, <span class="keyword">new</span> MemoryPersistence());</div><div class="line">			<span class="comment">// MQTT的连接设置</span></div><div class="line">			options = <span class="keyword">new</span> MqttConnectOptions();</div><div class="line">			<span class="comment">// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接</span></div><div class="line">			options.setCleanSession(CLEAN_START);</div><div class="line">			<span class="comment">// 设置连接的用户名</span></div><div class="line">			options.setUserName(userName);</div><div class="line">			<span class="comment">// 设置连接的密码</span></div><div class="line">			options.setPassword(passWord.toCharArray());</div><div class="line">			<span class="comment">// 设置超时时间 单位为秒</span></div><div class="line">			options.setConnectionTimeout(KEEP_TIME_OUT);</div><div class="line">			<span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔1.5*30秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></div><div class="line">			options.setKeepAliveInterval(KEEP_ALIVE);</div><div class="line">			<span class="comment">// 设置回调</span></div><div class="line">			client.setCallback(<span class="keyword">new</span> PushCallback());</div><div class="line"></div><div class="line">			client.connect(options);</div><div class="line">			client.subscribe(RECEIVE_TOPIC, QOS_VALUES);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO 每秒一次向服务端发送消息</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				sendMessage(PUBLISH_TOPIC, <span class="string">"hello,topic"</span> + i, <span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line">				i++;</div><div class="line">				Thread.sleep(<span class="number">1000</span>);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</div><div class="line">		ClientMQTT client = <span class="keyword">new</span> ClientMQTT();</div><div class="line">		Thread thread = <span class="keyword">new</span> Thread(client, <span class="string">"th1"</span>);</div><div class="line">		thread.start();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试的时候就是把客户机复制了几个，主题和clientid改下，clientid不能一样，不然不能登陆。</p>
<h3 id="回调类"><a href="#回调类" class="headerlink" title="回调类"></a>回调类</h3><p>发送完消息，Service需要在这里处理，着我们先做的事情啦。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.devframe.mqtt.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;  </div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttCallback;  </div><div class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttMessage;  </div><div class="line">  </div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: PushCallback</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span>: 发布消息的回调类</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> *               必须实现MqttCallback的接口并实现对应的相关接口方法CallBack 类将实现 MqttCallBack。</span></div><div class="line"><span class="comment"> *               每个客户机标识都需要一个回调实例。在此示例中，构造函数传递客户机标识以另存为实例数据。</span></div><div class="line"><span class="comment"> *               在回调中，将它用来标识已经启动了该回调的哪个实例。 必须在回调类中实现三个方法：</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> *               public void messageArrived(MqttTopic topic, MqttMessage</span></div><div class="line"><span class="comment"> *               message)接收已经预订的发布。</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> *               public void connectionLost(Throwable cause)在断开连接时调用。</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> *               public void deliveryComplete(MqttDeliveryToken token))</span></div><div class="line"><span class="comment"> *               接收到已经发布的QoS 0、 QoS 1 或 QoS 2 消息的传递令牌时调用。 由 MqttClient.connect</span></div><div class="line"><span class="comment"> *               激活此回调。</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年9月12日 上午11:30:44</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushCallback</span> <span class="keyword">implements</span> <span class="title">MqttCallback</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable cause)</span> </span>&#123;  </div><div class="line">        <span class="comment">// TODO 连接丢失后，一般在这里面进行重连  </span></div><div class="line">        System.out.println(<span class="string">"连接断开，可以做重连"</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"deliveryComplete---------"</span> + token.isComplete());  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        <span class="comment">// TODO subscribe后得到的消息会执行到这里面，后续工作将在这里进行  </span></div><div class="line">        System.out.println(<span class="string">"接收消息主题 : "</span> + topic);  </div><div class="line">        System.out.println(<span class="string">"接收消息Qos : "</span> + message.getQos());  </div><div class="line">        System.out.println(<span class="string">"接收消息内容 : "</span> + <span class="keyword">new</span> String(message.getPayload()));  </div><div class="line">    &#125; </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>使用前缀通配符的方式加上特殊码区分各个机器的主题。</li>
<li>根据不同业务的需求，需要合理的选择不同级别的消息。</li>
<li><p>实际使用中一般把发消息的参数 <code>retained</code> 设为 <code>false</code> ，这个参数的说明是:<br>设为true之后把消息保存到本地，每一次去订阅该主题的subscriber都会收到，每次订阅的时候都会收到，导致很多重复多余的消息。</p>
<p>如果在使用的过程中不小心将它设置成true，怎么去清除这个存着的消息了，mqtt本身没这个功能；<br><strong>解决办法：向该topic重新publish数据，RETAIN=TRUE，<code>Payload为空</code>。</strong></p>
</li>
</ol>
<p>所以，刚开始做这个都得时候就是设置成true，包括上面的测试代码，还没改过来，业务代码已经全部改好了。不然没次去连接mqtt的时候，都会订阅到一大片消息，电脑跑到卡得不行，哈哈。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> MQTT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mosquitto用户名密码配置]]></title>
      <url>/mqtt-user.html</url>
      <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>由于需要把<code>mqtt</code>部署到外网上面去，所以需要关闭<code>匿名登陆</code>，采取用户<code>认证模式</code>，而且还可能需要把主题加密。</p>
<a id="more"></a>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>配置参数在<code>/etc/mosquitto/mosquitto.conf</code>中，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">allow_anonymous 允许匿名登陆</div><div class="line">password_file 账号密码文件</div><div class="line">acl_file 访问控制列表</div></pre></td></tr></table></figure>
<p>配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@localhost mosquitto]<span class="comment"># vim mosquitto.conf           </span></div><div class="line"><span class="comment"># Place your local configuration in /etc/mosquitto/conf.d/</span></div><div class="line"></div><div class="line">pid_file /var/run/mosquitto.pid</div><div class="line"></div><div class="line">persistence <span class="literal">true</span></div><div class="line">persistence_location /var/lib/mosquitto/</div><div class="line"></div><div class="line"><span class="comment">#log_dest file /var/log/mosquitto/mosquitto.log</span></div><div class="line"></div><div class="line">include_dir /etc/mosquitto/conf.d</div><div class="line">allow_anonymous <span class="literal">false</span></div><div class="line">password_file /etc/mosquitto/pwfile</div><div class="line">acl_file /etc/mosquitto/aclfile</div><div class="line">port 8001</div></pre></td></tr></table></figure></p>
<h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost mosquitto]<span class="comment"># cat pwfile                   </span></div><div class="line">agri:<span class="variable">$6</span><span class="variable">$NprvJLB</span>/CkEomWGy<span class="variable">$gNj5Mr6Wf</span>+2Xz16P6dIZYD/ladZZtyKQMJ/tdpy7WLepj5akpPB+hF8zolrNd5IacbsAxXDWX1vS5I9Pj4fnCA==</div></pre></td></tr></table></figure>
<p>添加用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mosquitto_passwd -c /etc/mosquitto/pwfile wuwii</div></pre></td></tr></table></figure></p>
<p>设置好密码</p>
<h4 id="添加Topic和用户的关系"><a href="#添加Topic和用户的关系" class="headerlink" title="添加Topic和用户的关系"></a>添加Topic和用户的关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/mosquitto/aclfile</span></div><div class="line"><span class="comment"># This affects access control for clients with no username.</span></div><div class="line"><span class="comment">#topic read $SYS/#</span></div><div class="line"></div><div class="line"><span class="comment"># This only affects clients with username "roger".</span></div><div class="line"><span class="comment">#user roger</span></div><div class="line"><span class="comment">#topic foo/bar</span></div><div class="line"><span class="comment">#user zhang</span></div><div class="line">user zhang</div><div class="line">topic <span class="built_in">read</span> mtopic/<span class="comment">#</span></div><div class="line"></div><div class="line">user zhang</div><div class="line">topic write mtopic/<span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># This affects all clients.</span></div><div class="line"><span class="comment"># pattern write $SYS/broker/connection/%c/state</span></div></pre></td></tr></table></figure>
<h4 id="重启测试"><a href="#重启测试" class="headerlink" title="重启测试"></a>重启测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost mosquitto]<span class="comment"># /etc/init.d/mosquitto restart</span></div><div class="line">Restarting mosquitto (via systemctl):                      [  确定  ]</div></pre></td></tr></table></figure>
<p>ps:添加用户的时候会出现<code>覆盖</code>的问题，再看。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> MQTT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 下安装mosquitto]]></title>
      <url>/install-mosquitto.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><code>MQTT</code>（Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个<code>即时通讯协议</code>，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和制动器（比如通过Twitter让房屋联网）的通信协议。</p>
</blockquote>
<a id="more"></a>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<p><code>MQTT协议</code>是为大量计算能力有限，且工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：<br>1、使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合；<br>2、对负载内容屏蔽的消息传输；<br>3、使用 TCP/IP 提供网络连接；<br>4、有三种消息发布服务质量：<br>“至多一次”，消息发布完全依赖底层 TCP/IP   网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。<br>“至少一次”，确保消息到达，但消息重复可能会发生。<br>“只有一次”，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。<br>5、小型传输，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量；<br>6、使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制；</p>
</blockquote>
<h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>在<code>/etc/yum.repos.d/</code>目录中新建一个<code>mosquitto.repo</code>文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[home_oojah_mqtt]</div><div class="line"></div><div class="line">name=mqtt (CentOS_CentOS-7)</div><div class="line"></div><div class="line"><span class="built_in">type</span>=rpm-md</div><div class="line"></div><div class="line">baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/</div><div class="line"></div><div class="line">gpgcheck=1</div><div class="line"></div><div class="line">gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7//repodata/repomd.xml.key</div><div class="line"></div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<p>执行 <code>yum search all mosquitto</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum search all mosquitto</span></div><div class="line">已加载插件：fastestmirror</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line"> * epel: mirrors.ustc.edu.cn</div><div class="line">============================================================================================================= 匹配：mosquitto ==============================================================================================================</div><div class="line">mosquitto-clients.x86_64 : Mosquitto <span class="built_in">command</span> line publish/subscribe clients</div><div class="line">mosquitto-debuginfo.x86_64 : Debug information <span class="keyword">for</span> package mosquitto</div><div class="line">mosquitto-devel.x86_64 : Development files <span class="keyword">for</span> mosquitto</div><div class="line">mosquitto.x86_64 : An Open Source MQTT v3.1/v3.1.1 Broker</div><div class="line">libmosquitto-devel.x86_64 : MQTT C client library development files</div><div class="line">libmosquitto1.x86_64 : MQTT C client library</div><div class="line">libmosquittopp-devel.x86_64 : MQTT C++ client library development files</div><div class="line">libmosquittopp1.x86_64 : MQTT C++ client library</div></pre></td></tr></table></figure></p>
<h4 id="安装mosquitto客户端"><a href="#安装mosquitto客户端" class="headerlink" title="安装mosquitto客户端"></a>安装mosquitto客户端</h4><p>执行 <code>yum install -y mosquitto-clients.x86_64</code>  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum install -y mosquitto-clients.x86_64</span></div></pre></td></tr></table></figure>
<h4 id="安装mosquitto服务"><a href="#安装mosquitto服务" class="headerlink" title="安装mosquitto服务"></a>安装mosquitto服务</h4><p>执行命令 <code>yum install mosquitto.x86_64</code>  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum -y install mosquitto.x86_64</span></div></pre></td></tr></table></figure>
<h4 id="修改mosquitto-conf文件"><a href="#修改mosquitto-conf文件" class="headerlink" title="修改mosquitto.conf文件"></a>修改mosquitto.conf文件</h4><p>文件在<code>/etc/mosquitto/mosquitto.conf</code><br>下面是可以选择的参数 在 <code>/etc/mosquitto/mosquitto.conf.example</code> 中 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># =================================================================</span></div><div class="line">  <span class="comment"># General configuration</span></div><div class="line">  <span class="comment"># =================================================================</span></div><div class="line">  <span class="comment"># 客户端心跳的间隔时间</span></div><div class="line">  <span class="comment">#retry_interval 20</span></div><div class="line">  <span class="comment"># 系统状态的刷新时间</span></div><div class="line">  <span class="comment">#sys_interval 10</span></div><div class="line">  <span class="comment"># 系统资源的回收时间，0表示尽快处理</span></div><div class="line">  <span class="comment">#store_clean_interval 10</span></div><div class="line">  <span class="comment"># 服务进程的PID</span></div><div class="line"> <span class="comment">#pid_file /var/run/mosquitto.pid</span></div><div class="line"> <span class="comment"># 服务进程的系统用户</span></div><div class="line"> <span class="comment">#user mosquitto</span></div><div class="line"> <span class="comment"># 客户端心跳消息的最大并发数</span></div><div class="line"> <span class="comment">#max_inflight_messages 10</span></div><div class="line"> <span class="comment"># 客户端心跳消息缓存队列</span></div><div class="line"> <span class="comment">#max_queued_messages 100</span></div><div class="line"> <span class="comment"># 用于设置客户端长连接的过期时间，默认永不过期</span></div><div class="line"> <span class="comment">#persistent_client_expiration</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># Default listener</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># 服务绑定的IP地址</span></div><div class="line"><span class="comment">#bind_address</span></div><div class="line"><span class="comment"># 服务绑定的端口号</span></div><div class="line"><span class="comment">#port 1883</span></div><div class="line"><span class="comment"># 允许的最大连接数，-1表示没有限制</span></div><div class="line"><span class="comment">#max_connections -1</span></div><div class="line"><span class="comment"># cafile：CA证书文件</span></div><div class="line"><span class="comment"># capath：CA证书目录</span></div><div class="line"><span class="comment"># certfile：PEM证书文件</span></div><div class="line"><span class="comment"># keyfile：PEM密钥文件</span></div><div class="line"><span class="comment">#cafile</span></div><div class="line"><span class="comment">#capath</span></div><div class="line"><span class="comment">#certfile</span></div><div class="line"><span class="comment">#keyfile</span></div><div class="line"><span class="comment"># 必须提供证书以保证数据安全性</span></div><div class="line"><span class="comment">#require_certificate false</span></div><div class="line"><span class="comment"># 若require_certificate值为true，use_identity_as_username也必须为true</span></div><div class="line"><span class="comment">#use_identity_as_username false</span></div><div class="line"><span class="comment"># 启用PSK（Pre-shared-key）支持</span></div><div class="line"><span class="comment">#psk_hint</span></div><div class="line"><span class="comment"># SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</span></div><div class="line"><span class="comment"># as the output of that command.</span></div><div class="line"><span class="comment">#ciphers</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># Persistence</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># 消息自动保存的间隔时间</span></div><div class="line"><span class="comment">#autosave_interval 1800</span></div><div class="line"><span class="comment"># 消息自动保存功能的开关</span></div><div class="line"><span class="comment">#autosave_on_changes false</span></div><div class="line"><span class="comment"># 持久化功能的开关</span></div><div class="line">persistence <span class="literal">true</span></div><div class="line"><span class="comment"># 持久化DB文件</span></div><div class="line"><span class="comment">#persistence_file mosquitto.db</span></div><div class="line"><span class="comment"># 持久化DB文件目录</span></div><div class="line"><span class="comment">#persistence_location /var/lib/mosquitto/</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># Logging</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># 4种日志模式：stdout、stderr、syslog、topic</span></div><div class="line"><span class="comment"># none 则表示不记日志，此配置可以提升些许性能</span></div><div class="line">log_dest none</div><div class="line"><span class="comment"># 选择日志的级别（可设置多项）</span></div><div class="line"><span class="comment">#log_type error</span></div><div class="line"><span class="comment">#log_type warning</span></div><div class="line"><span class="comment">#log_type notice</span></div><div class="line"><span class="comment">#log_type information</span></div><div class="line"><span class="comment"># 是否记录客户端连接信息</span></div><div class="line"><span class="comment">#connection_messages true</span></div><div class="line"><span class="comment"># 是否记录日志时间</span></div><div class="line"><span class="comment">#log_timestamp true</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># Security</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># 客户端ID的前缀限制，可用于保证安全性</span></div><div class="line"><span class="comment">#clientid_prefixes</span></div><div class="line"><span class="comment"># 允许匿名用户</span></div><div class="line"><span class="comment">#allow_anonymous true</span></div><div class="line"><span class="comment"># 用户/密码文件，默认格式：username:password</span></div><div class="line"><span class="comment">#password_file</span></div><div class="line"><span class="comment"># PSK格式密码文件，默认格式：identity:key</span></div><div class="line"><span class="comment">#psk_file</span></div><div class="line"><span class="comment"># pattern write sensor/%u/data</span></div><div class="line"><span class="comment"># ACL权限配置，常用语法如下：</span></div><div class="line"><span class="comment"># 用户限制：user &lt;username&gt;</span></div><div class="line"><span class="comment"># 话题限制：topic [read|write] &lt;topic&gt;</span></div><div class="line"><span class="comment"># 正则限制：pattern write sensor/%u/data</span></div><div class="line"><span class="comment">#acl_file</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># Bridges</span></div><div class="line"><span class="comment"># =================================================================</span></div><div class="line"><span class="comment"># 允许服务之间使用“桥接”模式（可用于分布式部署）</span></div><div class="line"><span class="comment">#connection &lt;name&gt;</span></div><div class="line"><span class="comment">#address &lt;host&gt;[:&lt;port&gt;]</span></div><div class="line"><span class="comment">#topic &lt;topic&gt; [[[out | in | both] qos-level] local-prefix remote-prefix]</span></div><div class="line"><span class="comment"># 设置桥接的客户端ID</span></div><div class="line"><span class="comment">#clientid</span></div><div class="line">  <span class="comment"># 桥接断开时，是否清除远程服务器中的消息</span></div><div class="line">  <span class="comment">#cleansession false</span></div><div class="line">  <span class="comment"># 是否发布桥接的状态信息</span></div><div class="line">  <span class="comment">#notifications true</span></div><div class="line">  <span class="comment"># 设置桥接模式下，消息将会发布到的话题地址</span></div><div class="line">  <span class="comment"># $SYS/broker/connection/&lt;clientid&gt;/state</span></div><div class="line">  <span class="comment">#notification_topic</span></div><div class="line">  <span class="comment"># 设置桥接的keepalive数值</span></div><div class="line">  <span class="comment">#keepalive_interval 60</span></div><div class="line">  <span class="comment"># 桥接模式，目前有三种：automatic、lazy、once</span></div><div class="line">  <span class="comment">#start_type automatic</span></div><div class="line">  <span class="comment"># 桥接模式automatic的超时时间</span></div><div class="line">  <span class="comment">#restart_timeout 30</span></div><div class="line">  <span class="comment"># 桥接模式lazy的超时时间</span></div><div class="line">  <span class="comment">#idle_timeout 60</span></div><div class="line">  <span class="comment"># 桥接客户端的用户名</span></div><div class="line">  <span class="comment">#username</span></div><div class="line">  <span class="comment"># 桥接客户端的密码</span></div><div class="line">  <span class="comment">#password</span></div><div class="line">  <span class="comment"># bridge_cafile：桥接客户端的CA证书文件</span></div><div class="line">  <span class="comment"># bridge_capath：桥接客户端的CA证书目录</span></div><div class="line">  <span class="comment"># bridge_certfile：桥接客户端的PEM证书文件</span></div><div class="line">  <span class="comment"># bridge_keyfile：桥接客户端的PEM密钥文件</span></div><div class="line">  <span class="comment">#bridge_cafile</span></div><div class="line">  <span class="comment">#bridge_capath</span></div><div class="line">  <span class="comment">#bridge_certfile</span></div><div class="line">  <span class="comment">#bridge_keyfile</span></div><div class="line">  <span class="comment"># 自己的配置可以放到以下目录中</span></div><div class="line">  include_dir /etc/mosquitto/conf.d</div></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mosquitto -c /etc/mosquitto/mosquitto.conf -d</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost mosquitto]<span class="comment"># /etc/init.d/mosquitto start</span></div><div class="line">Restarting mosquitto (via systemctl):                      [  确定  ]</div></pre></td></tr></table></figure>
<p>重启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost mosquitto]<span class="comment"># /etc/init.d/mosquitto restart</span></div><div class="line">Restarting mosquitto (via systemctl):                      [  确定  ]</div></pre></td></tr></table></figure></p>
<p>主要还是根据需求来配置好用户和加密，用的时候需要了解mqtt协议。 </p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> MQTT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[心]]></title>
      <url>/heart00.html</url>
      <content type="html"><![CDATA[<p>不知道现在你过得到底怎么样，看到你的签名又换了“心比长相好，懂比爱重要”。</p>
<a id="more"></a>
<p>当一个假文艺青年、一个又对你敏感的人看到这句话的时候。我想你可能经历了这段失败的感情真的伤得很深吧。</p>
<p>想照顾你的人很多吧，真的本该消失的人不该再来出现了，我也迷茫了，感觉这段时间忘的东西好快，过的没感觉，没心没肺了。</p>
<p>但是姑娘，最懂你的是自己啊，自己想什么就勇敢做吧，不要记挂在别人身上，也不用太在意别人感受，即使再大的事情还是需要自己来抗，如果听到身边的人一句安慰就溃不成军的话，那还有什么意义了。希望你能坚强，冲动和任性的事情也要少做呀！</p>
<p>但是姑娘不要自我怀疑，不要慌张，你很优秀，一定会嫁给爱情的。越是着急，就越容易受伤。除了爸妈，不必在乎催促你的人，大多数的他们的知识随口问问而已，他们只关心你结没结婚，谈没谈恋爱，真的不必放在心上。</p>
<p>希望你能努力生活，丰富自己，愿生活有诗，有梦，有远方，还有一个懂你、爱你的可心人。</p>
<p>愿大家都越变越好。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Geotools做个最简单叠加分析]]></title>
      <url>/geotools-over-analyze.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近需要利用<code>Geotools</code>开发一些业务需求，今天刚开始搞。本来说是跟跟最新版的<code>geoserver</code>中的geotools一个版本，我的geoserver版本如下<br><img src="http://ov62kaxkk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170907172642.png" alt="image">  <a id="more"></a><br><code>geotools</code>版本是<code>17.2</code><br>就屁颠的去项目的pom.xml配置了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">geotools.version</span>&gt;</span>17.2<span class="tag">&lt;/<span class="name">geotools.version</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Provides support for PostGIS. Note the different groupId --&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.geotools.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gt-jdbc-postgis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;geotools.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.geotools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gt-cql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;geotools.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.geotools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gt-opengis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;geotools.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="出了点×"><a href="#出了点×" class="headerlink" title="出了点×"></a>出了点×</h3><p>结果，一直报错这几个包下不下来，我使用的是国内的阿里云镜像。刚开始我还以为是阿里云仓库没这几个包，换成了国外的节点，结果也下不了。网上去看了下最新的17.2全有，不知道为什么突然下不了。弄了好半天，坑死了有木有啊。<br>后来想到我不是做了<code>geoserver</code>的开发了吗？也是maven项目，知道geoserver使用的geotools开发的，那它的jar包是从哪里来的。<br>打开geoserver 源码一看，结果一看人家用的是 <code>18-SNAPSHOT</code><br>做事还是冒失了点，我应该去仓库看下我的版本号，最后搞得一头包。<br>好了，解决了包得问题直接干活敲代码，很简单  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.geotools.data.DataStore;</div><div class="line"><span class="keyword">import</span> org.geotools.data.DataStoreFinder;</div><div class="line"><span class="keyword">import</span> org.geotools.data.postgis.PostgisNGDataStoreFactory;</div><div class="line"><span class="keyword">import</span> org.geotools.data.simple.SimpleFeatureCollection;</div><div class="line"><span class="keyword">import</span> org.geotools.data.simple.SimpleFeatureSource;</div><div class="line"><span class="keyword">import</span> org.geotools.feature.FeatureIterator;</div><div class="line"><span class="keyword">import</span> org.geotools.filter.text.cql2.CQL;</div><div class="line"><span class="keyword">import</span> org.geotools.filter.text.cql2.CQLException;</div><div class="line"><span class="keyword">import</span> org.geotools.geometry.jts.JTSFactoryFinder;</div><div class="line"><span class="keyword">import</span> org.opengis.feature.simple.SimpleFeature;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.opengis.filter.Filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.Geometry;</div><div class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.GeometryFactory;</div><div class="line"><span class="keyword">import</span> com.vividsolutions.jts.io.ParseException;</div><div class="line"><span class="keyword">import</span> com.vividsolutions.jts.io.WKTReader;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/** </span></div><div class="line"><span class="comment">* <span class="doctag">@ClassName</span>: GeotoolsUtils </span></div><div class="line"><span class="comment">* <span class="doctag">@Description</span>:  Geotools tools solution</span></div><div class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></div><div class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月7日 下午3:15:53 </span></div><div class="line"><span class="comment">*  </span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeotoolsUtils</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DataStore pgDatastore;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 连接数据库</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> dbtype  postgresql</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> host 主机</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> port 端口</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> database 数据库</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> userName </span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> password</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">conn</span><span class="params">(String dbtype, String host, String port,  </span></span></div><div class="line"><span class="function"><span class="params">            String database, String userName, String password)</span> </span>&#123;  </div><div class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        params.put(PostgisNGDataStoreFactory.DBTYPE.key, dbtype);  </div><div class="line">        params.put(PostgisNGDataStoreFactory.HOST.key, host);  </div><div class="line">        params.put(PostgisNGDataStoreFactory.PORT.key, <span class="keyword">new</span> Integer(port));  </div><div class="line">        params.put(PostgisNGDataStoreFactory.DATABASE.key, database);  </div><div class="line">        params.put(PostgisNGDataStoreFactory.SCHEMA.key, <span class="string">"public"</span>);  </div><div class="line">        params.put(PostgisNGDataStoreFactory.USER.key, userName);  </div><div class="line">        params.put(PostgisNGDataStoreFactory.PASSWD.key, password); </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            pgDatastore = DataStoreFinder.getDataStore(params);  </div><div class="line">            <span class="keyword">if</span> (pgDatastore != <span class="keyword">null</span>) &#123;  </div><div class="line">                System.out.println(<span class="string">"系统连接到位于："</span> + host + <span class="string">"的空间数据库"</span> + database  </div><div class="line">                        + <span class="string">"成功！"</span>);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                System.out.println(<span class="string">"系统连接到位于："</span> + host + <span class="string">"的空间数据库"</span> + database  </div><div class="line">                        + <span class="string">"失败！请检查相关参数"</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">            System.out.println(<span class="string">"系统连接到位于："</span> + host + <span class="string">"的空间数据库"</span> + database  </div><div class="line">                    + <span class="string">"失败！请检查相关参数"</span>);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 条件查询</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> filterStr sql条件</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> layerName 图层名</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;SimpleFeature&gt; <span class="title">queryMethod</span><span class="params">(String filterStr,  </span></span></div><div class="line"><span class="function"><span class="params">            String layerName)</span> <span class="keyword">throws</span> IOException </span>&#123;  </div><div class="line">        SimpleFeatureSource featureSource =pgDatastore.getFeatureSource(layerName);   </div><div class="line">        ArrayList&lt;SimpleFeature&gt; featureList = <span class="keyword">new</span> ArrayList&lt;SimpleFeature&gt;();  </div><div class="line">        <span class="keyword">if</span>(featureSource==<span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">return</span> featureList;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            SimpleFeatureCollection result = <span class="keyword">null</span>;</div><div class="line">        	<span class="keyword">if</span> (!StringUtils.isEmpty(filterStr)) &#123;</div><div class="line">        		 Filter filter;  </div><div class="line">                 <span class="comment">// filterStr : convert 'SQL' into 'CQL'</span></div><div class="line">                 filter = CQL.toFilter(filterStr);  </div><div class="line">                 result = featureSource.getFeatures(filter);  </div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				result = featureSource.getFeatures();</div><div class="line">			&#125;</div><div class="line">            FeatureIterator&lt;SimpleFeature&gt; itertor = result.features(); </div><div class="line">            <span class="keyword">while</span> (itertor.hasNext()) &#123;  </div><div class="line">                SimpleFeature feature = itertor.next();  </div><div class="line">                featureList.add(feature);  </div><div class="line">            &#125;  </div><div class="line">            itertor.close();  </div><div class="line">            <span class="keyword">return</span> featureList;  </div><div class="line">        &#125;  <span class="keyword">catch</span> (IOException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">catch</span> (CQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 判断一个点在一个面里</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> polygon</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsPonit</span><span class="params">(Geometry point, Geometry polygon)</span> </span>&#123;</div><div class="line">    	<span class="keyword">return</span> polygon.contains(point);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查询地块，判断一个点是否在面里（可能多个面）</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> filterStr 查询条件</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> layerName 图层名</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> point 点位置</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">MultitudeContainsPonit</span><span class="params">(String filterStr, String layerName, Geometry point)</span> </span>&#123;</div><div class="line">		<span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">		List&lt;Geometry&gt; listGeometry = getGeometryByCondition(filterStr, layerName);</div><div class="line">		<span class="keyword">for</span> (Geometry geometry : listGeometry) &#123;</div><div class="line">			result = containsPonit(point, geometry);</div><div class="line">			<span class="keyword">if</span> (result) &#123;</div><div class="line">				<span class="keyword">return</span> result;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据条件查询该图层中的geometry</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> filterStr 查询条件</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> layerName 图层名字</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Geometry&gt; <span class="title">getGeometryByCondition</span><span class="params">(String filterStr, String layerName)</span> </span>&#123;</div><div class="line">    	List&lt;Geometry&gt; result = <span class="keyword">new</span> ArrayList&lt;Geometry&gt;();</div><div class="line">    	ArrayList&lt;SimpleFeature&gt; list = <span class="keyword">null</span>;</div><div class="line">    	<span class="keyword">try</span> &#123;</div><div class="line">			list = queryMethod(filterStr, layerName);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">    	<span class="keyword">for</span> (SimpleFeature feature : list) &#123;</div><div class="line">    		Geometry geo = (Geometry) feature.getDefaultGeometry();</div><div class="line">    		result.add(geo);</div><div class="line">		&#125;</div><div class="line">    	<span class="keyword">return</span> result;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p> 简单测试下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</div><div class="line">		conn(<span class="string">"postgis"</span>, <span class="string">"192.168.19.200"</span>, <span class="string">"5432"</span>, <span class="string">"agrigisdb"</span>, <span class="string">"postgres"</span>, <span class="string">"postgres"</span>);</div><div class="line">		<span class="comment">//String wktPoly = "MultiPOLYGON (((30 10, 40 40, 20 40, 10 20, 30 10)))"; //wkt格式  </span></div><div class="line">		 String wktPoint = <span class="string">"POINT (50 50)"</span>;    </div><div class="line">		WKTReader reader = <span class="keyword">new</span> WKTReader(JTSFactoryFinder.getGeometryFactory());  </div><div class="line">		        GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory(<span class="keyword">null</span>);  </div><div class="line">		Geometry point = reader.read(wktPoint);  </div><div class="line">		<span class="comment">//Geometry poly = reader.read(wktPoly); </span></div><div class="line">		<span class="keyword">if</span> (MultitudeContainsPonit(<span class="string">"\"mc\"='武汉市'"</span>, <span class="string">"xzqxian"</span>, point)) &#123;</div><div class="line">			System.out.println(<span class="string">"叠加了"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			System.out.println(<span class="string">"没叠加了"</span>);</div><div class="line">		&#125;</div><div class="line">		pgDatastore.dispose();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>还是太心急，被个小问题差点Over了，我都准备最蠢的办法，直接下包，蠢哭了，我已经下下来了，80+M。<br>记录下。加油。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Geotools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于难产孕妇跳楼事件]]></title>
      <url>/yunfu-event.html</url>
      <content type="html"><![CDATA[<p>看到新闻，难产孕妇跳楼身亡，真的很难想象，这个产妇经历了什么，才选择了这么个结果，一尸两命。</p>
<p>可能传统的文化，在大多数人眼里，顺产对孩子比较好吧。</p>
<p>整个事情我可能不是很了解，但是这是这个家庭的悲剧，也是社会的一个反射。一个女人，怀孕了都不能决定自己的命运，是在多么绝望的情况下，才跳下楼。</p>
<p>反思就不多说，每个人都清楚。</p>
<p>记录，改变就是最好的。</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[叫魂]]></title>
      <url>/jiao-hun-awakening.html</url>
      <content type="html"><![CDATA[<p>最近人的心很杂乱，总是回忆起以前的种种，加上今天是<code>中元节</code>，想起了以前的一件事，正式说法应该是<code>叫魂</code>。<a id="more"></a>  </p>
<p>大约十三四岁的时候，严冬，我记得冷得厉害，我生了一场重病，高烧39度，吊针了一周都没退下去，而且人还难受得厉害了。有时候还会呻吟。老人们都见的世道多，说我有可能见鬼了，弄不好小命都可能保不住了。很无奈，母亲带我去村里的一个老奶奶家里。当时我很奇怪，把我带到一个黑漆漆的屋子里，开了灯，被吓到，就是跟看恐怖片一样，满墙都是各种奇怪的字画、条幅。很快，老奶奶一算，说是我被鬼吓的，掉了魂，是被村里的池塘里淹死的小孩下的（那个池塘就在上学的路上，确实淹死过小孩），后来问我有没有在池塘边摔倒过，这个倒是记得太清楚了。随后，她烧起纸钱，让我去烧香、磕头，最后是喝水拌下纸钱留下的灰，晚上还得去池塘边烧纸。如此，第二天病真的基本好了。不过，却给我留下别的后遗症了，有时候会想，这世间真的有鬼神吗？</p>
<p>我也不知道这些奇奇怪怪的事情应该怎么解释，但是那位老奶奶确实帮助不少人治好了疑难杂症，不乏一些从城里专门过来拜访的人。但，我只知道这个应该是祖祖辈辈传下来的，也只要那些稀奇古怪的人在这些特殊的场合才会有人使用的吧。</p>
<p>虽然事情过了很长时间，但是我也从没忘记这些事情，后来在网上查到，说这个事情是–<code>叫魂</code>。</p>
<p>还说到这些人都要<code>受耻</code>，因为他们泄露了大秘密，需要忏悔，所有对别人的好，都要降罪到自己身上。</p>
<p>多年前，那位老奶奶也去世了，听说各地来的人很多。听我妈说，信佛的人不能跟他们走太近。</p>
<p>往事如风，生活中处处充满了不一样的故事，虽然这个事情没人能够解释它，但是它却是确确实实存在的啊。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 奇异 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[枚举的封装设计]]></title>
      <url>/enumeration-package-design.html</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>enum</code> 的全称为 <code>enumeration</code>， 是 <code>JDK 1.5</code>  中引入的新特性，存放在 <code>java.lang</code> 包中。虽然功能少，但是实际开发中还是非常方便的。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MenuType &#123;</div><div class="line"><span class="comment">// 注意：枚举成员命名，请使用英文大写形式  </span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 目录</span></div><div class="line"><span class="comment">     */</span></div><div class="line">	CATALOG(<span class="number">0</span>),</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 菜单</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    MENU(<span class="number">1</span>),</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 按钮</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    BUTTON(<span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="comment">// 私有的构造方法</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MenuType</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">enum</span> Operation &#123;</div><div class="line">        GETCAPABILITIES &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        DESCRIBEFEATURETYPE &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        GETFEATURE&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; ,</div><div class="line">        LOCKFEATURE&#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; ,</div><div class="line">        TRANSACTION_INSERT &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        TRANSACTION_UPDATE &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">8</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        TRANSACTION_DELETE &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">16</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;, </div><div class="line">        TRANSACTION_REPLACE &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">32</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    	System.out.println(Operation.TRANSACTION_INSERT.getCode());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分享：李开复：我的爱情故事]]></title>
      <url>/kaifu-love-story.html</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>最好的爱情，并不是终日互相对视，而是共同眺望远方，相伴而行。他们眺望着的，始终是同一个方向。</strong> </p>
</blockquote>
<a id="more"></a> 
<p><a rel="external nofollow" target="_blank" href="http://weibo.com/ttarticle/p/show?id=2309404145816167164260">李开复：我的爱情故事</a></p>
]]></content>
      
        <categories>
            
            <category> 分享 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 李开复 </tag>
            
            <tag> 感情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于npm install hexo出错]]></title>
      <url>/hexo_install_error.html</url>
      <content type="html"><![CDATA[<h3 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h3><blockquote>
<p>最近跳槽换公司后，又要重新在公司电脑上搭个hexo blog环境，从github上拷贝下自己的源码后，执行<strong>npm install hexo</strong> 突然报错了。  </p>
</blockquote>
<a id="more"></a>  
<blockquote>
<p>node -v8.4.0x64</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PS D:\zhangkai\WorkSpace\Git\hexo&gt; npm install hexo</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.3 install D:\zhangkai\WorkSpace\Git\hexo\node_modules\dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line"></div><div class="line">npm ERR! path D:\zhangkai\WorkSpace\Git\hexo\node_modules\fsevents\node_modules</div><div class="line">npm ERR! code EPERM</div><div class="line">npm ERR! errno -4048</div><div class="line">npm ERR! syscall scandir</div><div class="line">npm ERR! Error: EPERM: operation not permitted, scandir <span class="string">'D:\zhangkai\WorkSpace\Git\hexo\node_mod</span></div><div class="line"><span class="string">es'</span></div><div class="line">npm ERR!  &#123; Error: EPERM: operation not permitted, scandir <span class="string">'D:\zhangkai\WorkSpace\Git\hexo\node_</span></div><div class="line"><span class="string">dules'</span></div><div class="line">npm ERR!   stack: <span class="string">'Error: EPERM: operation not permitted, scandir \'</span>D:\\zhangkai\\WorkSpace\\Git</div><div class="line">events\\node_modules\<span class="string">''</span>,</div><div class="line">npm ERR!   errno: -4048,</div><div class="line">npm ERR!   code: <span class="string">'EPERM'</span>,</div><div class="line">npm ERR!   syscall: <span class="string">'scandir'</span>,</div><div class="line">npm ERR!   path: <span class="string">'D:\\zhangkai\\WorkSpace\\Git\\hexo\\node_modules\\fsevents\\node_modules'</span> &#125;</div><div class="line">npm ERR!</div><div class="line">npm ERR! Please try running this <span class="built_in">command</span> again as root/Administrator.</div><div class="line"></div><div class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</div><div class="line">npm ERR!     C:\Users\server\AppData\Roaming\npm-cache\_logs\2017-08-31T02_56_34_677Z-debug.log</div></pre></td></tr></table></figure>
<ul>
<li>看上面的问题就是path有问题，去电脑找这个目录找啊找，完全没有，坑爹啊。由于我目前完全不懂node.js和npm只好问候百度大爷。</li>
<li>找到问题<img src="http://ov62kaxkk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170831111112.png" alt="图片"></li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>查看当前的npm版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS D:\zhangkai\WorkSpace\Git\hexo&gt; npm -v</div><div class="line">5.3.0</div></pre></td></tr></table></figure></p>
<p>更新到最新版，使用taobao镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PS D:\zhangkai\WorkSpace\Git\hexo&gt; npm install -g cnpm --registry=http://registry.npm.taobao.org</div><div class="line">C:\Users\server\AppData\Roaming\npm\cnpm -&gt; C:\Users\server\AppData\Roaming\npm\node_modules\cnpm\bin\cnpm</div><div class="line">+ cnpm@5.1.1</div><div class="line">added 643 packages <span class="keyword">in</span> 84.276s</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果想更新到指定版本，运行指令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -g install npm@2.9.1</div></pre></td></tr></table></figure>
<p>重新查看npm版本号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS D:\zhangkai\WorkSpace\Git\hexo&gt; npm -v</div><div class="line">5.3.0</div></pre></td></tr></table></figure></p>
<blockquote>
<p>ps:版本完全没变化，心凉了，还是试试吧。<br>重新执行，成功解决</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PS D:\zhangkai\WorkSpace\Git\hexo&gt; npm install hexo</div><div class="line"></div><div class="line">&gt; dtrace-provider@0.8.5 install D:\zhangkai\WorkSpace\Git\hexo\node_modules\dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line"></div><div class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.2 (node_modules\fsevents):</div><div class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@1.1.2: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any</span></div><div class="line"><span class="string">"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"win32"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</div><div class="line"></div><div class="line">+ hexo@3.3.8</div><div class="line">added 122 packages and updated 9 packages <span class="keyword">in</span> 40.962s</div></pre></td></tr></table></figure>
<blockquote>
<p>ps:虽然版本号没变，但是起码解决了问题，ok，又可以愉快玩耍了（警告什么的都不是事）。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下如何修改用户默认目录]]></title>
      <url>/linux_user_default_path.html</url>
      <content type="html"><![CDATA[<h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><blockquote>
<p>在<code>ftp</code>服务器中，ftp登陆的用户只能在自己的文件夹下活动，现在我需要改这个用户的所属文件位置。 </p>
</blockquote>
<a id="more"></a>  
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li><p>使用root用户，执行命令</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></div><div class="line">root:x:0:0:root:/root:/bin/bash</div><div class="line">bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</div><div class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</div><div class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</div><div class="line">sync:x:5:0:sync:/sbin:/bin/sync</div><div class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</div><div class="line">halt:x:7:0:halt:/sbin:/sbin/halt</div><div class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</div><div class="line">operator:x:11:0:operator:/root:/sbin/nologin</div><div class="line">games:x:12:100:games:/usr/games:/sbin/nologin</div><div class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</div><div class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</div><div class="line">systemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin</div><div class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</div><div class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</div><div class="line">polkitd:x:998:996:User <span class="keyword">for</span> polkitd:/:/sbin/nologin</div><div class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</div><div class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</div><div class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</div><div class="line">kaim:x:1000:1000:kaim:/home/kaim:/bin/bash</div><div class="line">user1:x:1001:1001::/home/user1:/bin/bash</div><div class="line">rpc:x:32:32:Rpcbind Daemon:/var/lib/rpcbind:/sbin/nologin</div><div class="line">rpcuser:x:29:29:RPC Service User:/var/lib/nfs:/sbin/nologin</div><div class="line">nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin</div><div class="line">test2:x:1002:50::/opt/test_ftp:/sbin/nologin</div><div class="line">test1:x:1003:50::/opt/test_ftp:/sbin/nologin</div><div class="line">test3:x:1004:50::/opt/test_ftp:/sbin/nologin</div><div class="line">test4:x:1005:50::/opt/test_ftp:/sbin/nologin</div><div class="line">test5:x:1006:50::/opt/test5_ftp:/sbin/nologin</div></pre></td></tr></table></figure>
</li>
<li><p>直接修改目录名保存就可以，记得分配权限。</p>
</li>
</ul>
<hr>
<h3 id="附：添加，修改用户参数"><a href="#附：添加，修改用户参数" class="headerlink" title="附：添加，修改用户参数"></a>附：添加，修改用户参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/adduser -d /opt/test_ftp -g ftp -s /sbin/nologin test2</div><div class="line">上面的命令是添加一个 名称为 test2的用户。</div><div class="line"></div><div class="line">命令解析：使用命令(adduser)添加test2用户,不能登录系统(-s /sbin/nologin),自己的文件夹在(-d /opt/test_ftp)),属于组ftp(-g ftp).</div><div class="line"></div><div class="line">usermod -s /sbin/nologin <span class="built_in">test</span> //限定用户<span class="built_in">test</span>不能telnet</div><div class="line">usermod -s /sbin/bash <span class="built_in">test</span> //用户<span class="built_in">test</span>恢复正常</div><div class="line">usermod -d /<span class="built_in">test</span> <span class="built_in">test</span> //更改用户<span class="built_in">test</span>的主目录为/<span class="built_in">test</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux上搭建ftp服务器]]></title>
      <url>/vsftpd.html</url>
      <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote>
<p><code>vsftpd</code> 是“very secure FTP daemon”的缩写，安全性是它的一个最大的特点。vsftpd 是一个 UNIX 类操作系统上运行的服务器的名字，它可以运行在诸如 Linux、BSD、Solaris、 HP-UNIX等系统上面，是一个完全免费的、开放源代码的ftp服务器软件，支持很多其他的 FTP 服务器所不支持的特征。比如：非常高的安全性需求、带宽限制、良好的可伸缩性、可创建虚拟用户、支持IPv6、速率高等。</p>
<p><code>vsftpd</code>是一款在<code>Linux</code>发行版中最受推崇的<code>FTP</code>服务器程序。特点是小巧轻快，安全易用。（来自百度百科）</p>
</blockquote>
<a id="more"></a>  
<h3 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h3><h4 id="检测是否已经安装vsftpd。"><a href="#检测是否已经安装vsftpd。" class="headerlink" title="检测是否已经安装vsftpd。"></a>检测是否已经安装vsftpd。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># rpm -qa | grep vsftpd</span></div><div class="line">[root@localhost ~]<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>什么都不显示就没有安装</p>
<h4 id="安装vsftpd-1"><a href="#安装vsftpd-1" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h4><h5 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># yum -y install vsftpd</span></div></pre></td></tr></table></figure>
<h5 id="使用rpm安装"><a href="#使用rpm安装" class="headerlink" title="使用rpm安装"></a>使用rpm安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># rpm -ivh vsftpd-3.0.2-21.el7.x86_64.rpm</span></div></pre></td></tr></table></figure>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># service vsftpd start</span></div><div class="line">Redirecting to /bin/systemctl start  vsftpd.service</div></pre></td></tr></table></figure>
<h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># service vsftpd status</span></div><div class="line">Redirecting to /bin/systemctl status  vsftpd.service</div><div class="line">● vsftpd.service - Vsftpd ftp daemon</div><div class="line">   Loaded: loaded (/usr/lib/systemd/system/vsftpd.service; disabled; vendor preset: disabled)</div><div class="line">   Active: active (running) since 三 2017-08-30 15:28:18 CST; 15min ago</div><div class="line">  Process: 4295 ExecStart=/usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf (code=exited, status=0/SUCCESS)</div><div class="line"> Main PID: 4296 (vsftpd)</div><div class="line">   CGroup: /system.slice/vsftpd.service</div><div class="line">           └─4296 /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf</div><div class="line"></div><div class="line">8月 30 15:28:18 localhost.localdomain systemd[1]: Starting Vsftpd ftp daemon...</div><div class="line">8月 30 15:28:18 localhost.localdomain systemd[1]: Started Vsftpd ftp daemon.</div><div class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</div></pre></td></tr></table></figure>
<p> Active: active (running)  启动状态，可以使用</p>
<h4 id="现在我们就可以匿名访问了"><a href="#现在我们就可以匿名访问了" class="headerlink" title="现在我们就可以匿名访问了"></a>现在我们就可以匿名访问了</h4><h3 id="vsftpd添加用户"><a href="#vsftpd添加用户" class="headerlink" title="vsftpd添加用户"></a>vsftpd添加用户</h3><h4 id="vsftpd添加用户-1"><a href="#vsftpd添加用户-1" class="headerlink" title="vsftpd添加用户"></a>vsftpd添加用户</h4><p>FTP用户一般是不能登录系统的,只能进入FTP服务器自己的目录中,这是为了安全.这样的用户就叫做虚拟用户了.实际上并不是真正的虚拟用户,只是不能登录SHELL了而已,没能力登录系统.</p>
<p>添加用户命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/adduser -d /opt/test_ftp -g ftp -s /sbin/nologin test2</div></pre></td></tr></table></figure></p>
<p>上面的命令是添加一个 名称为 test2的用户。</p>
<p>命令解析：使用命令(adduser)添加test2用户,不能登录系统(-s /sbin/nologin),自己的文件夹在(-d /opt/test_ftp)),属于组ftp(-g ftp).</p>
<p>为该用户设置密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># passwd test2</span></div></pre></td></tr></table></figure></p>
<p>现在重启服务我们就可以使用test2直接访问我们的 /opttest_ftp目录了<br><img src="http://ov62kaxkk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170830155115.png" alt="ftp1"></p>
<h4 id="给用户权限上传下载，修改"><a href="#给用户权限上传下载，修改" class="headerlink" title="给用户权限上传下载，修改"></a>给用户权限上传下载，修改</h4><p>虽然用户能够进行查看，但是还没有权限上传、下载和修改</p>
<h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost <span class="built_in">local</span>]<span class="comment"># chmod 755 /opt/test_ftp</span></div></pre></td></tr></table></figure>
<h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>一般创建一个ftp 用户，作为管理员只希望它只能访问其自己的所属目录的，是不会让他选择其他目录的。</p>
<p>####设置ftp用户的权限</p>
<p>在安装好ftp时，在 /etc/vsftpd目录下可以看到vsftpd的配置文件vsftpd.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">[root@localhost vsftpd]<span class="comment"># vim vsftpd.conf       </span></div><div class="line"><span class="comment"># Example config file /etc/vsftpd/vsftpd.conf</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The default compiled in settings are fairly paranoid. This sample file</span></div><div class="line"><span class="comment"># loosens things up a bit, to make the ftp daemon more usable.</span></div><div class="line"><span class="comment"># Please see vsftpd.conf.5 for all compiled in defaults.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></div><div class="line"><span class="comment"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's</span></div><div class="line"><span class="comment"># capabilities.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Allow anonymous FTP? (Beware - allowed by default if you comment this out).</span></div><div class="line">anonymous_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Uncomment this to allow local users to log in.</span></div><div class="line"><span class="comment"># When SELinux is enforcing check for SE bool ftp_home_dir</span></div><div class="line">local_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Uncomment this to enable any form of FTP write command.</span></div><div class="line">write_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Default umask for local users is 077. You may wish to change this to 022,</span></div><div class="line"><span class="comment"># if your users expect that (022 is used by most other ftpd's)</span></div><div class="line">local_umask=022</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></div><div class="line"><span class="comment"># has an effect if the above global write enable is activated. Also, you will</span></div><div class="line"><span class="comment"># obviously need to create a directory writable by the FTP user.</span></div><div class="line"><span class="comment"># When SELinux is enforcing check for SE bool allow_ftpd_anon_write, allow_ftpd_full_access</span></div><div class="line">anon_upload_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Uncomment this if you want the anonymous FTP user to be able to create</span></div><div class="line"><span class="comment"># new directories.</span></div><div class="line">anon_mkdir_write_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Activate directory messages - messages given to remote users when they</span></div><div class="line"><span class="comment"># go into a certain directory.</span></div><div class="line">dirmessage_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Activate logging of uploads/downloads.</span></div><div class="line">xferlog_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></div><div class="line">connect_from_port_20=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you want, you can arrange for uploaded anonymous files to be owned by</span></div><div class="line"><span class="comment"># a different user. Note! Using "root" for uploaded files is not</span></div><div class="line"><span class="comment"># recommended!</span></div><div class="line"><span class="comment">#chown_uploads=YES</span></div><div class="line"><span class="comment">#chown_username=whoever</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may override where the log file goes if you like. The default is shown</span></div><div class="line"><span class="comment"># below.</span></div><div class="line"><span class="comment">#xferlog_file=/var/log/xferlog</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># If you want, you can have your log file in standard ftpd xferlog format.</span></div><div class="line"><span class="comment"># Note that the default log file location is /var/log/xferlog in this case.</span></div><div class="line">xferlog_std_format=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may change the default value for timing out an idle session.</span></div><div class="line">idle_session_timeout=600</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may change the default value for timing out a data connection.</span></div><div class="line">data_connection_timeout=120</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># It is recommended that you define on your system a unique user which the</span></div><div class="line"><span class="comment"># ftp server can use as a totally isolated and unprivileged user.</span></div><div class="line"><span class="comment">#nopriv_user=ftpsecure</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></div><div class="line"><span class="comment"># recommended for security (the code is non-trivial). Not enabling it,</span></div><div class="line"><span class="comment"># however, may confuse older FTP clients.</span></div><div class="line"><span class="comment">#async_abor_enable=YES</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># By default the server will pretend to allow ASCII mode but in fact ignore</span></div><div class="line"><span class="comment"># the request. Turn on the below options to have the server actually do ASCII</span></div><div class="line"><span class="comment"># mangling on files when in ASCII mode.</span></div><div class="line"><span class="comment"># Beware that on some FTP servers, ASCII support allows a denial of service</span></div><div class="line"><span class="comment"># attack (DoS) via the command "SIZE /big/file" in ASCII mode. vsftpd</span></div><div class="line"><span class="comment"># predicted this attack and has always been safe, reporting the size of the</span></div><div class="line"><span class="comment"># raw file.</span></div><div class="line"><span class="comment"># ASCII mangling is a horrible feature of the protocol.</span></div><div class="line">ascii_upload_enable=YES</div><div class="line">ascii_download_enable=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may fully customise the login banner string:</span></div><div class="line">ftpd_banner=Welcome to blah FTP service.</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></div><div class="line"><span class="comment"># useful for combatting certain DoS attacks.</span></div><div class="line"><span class="comment">#deny_email_enable=YES</span></div><div class="line"><span class="comment"># (default follows)</span></div><div class="line"><span class="comment">#banned_email_file=/etc/vsftpd/banned_emails</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may specify an explicit list of local users to chroot() to their home</span></div><div class="line"><span class="comment"># directory. If chroot_local_user is YES, then this list becomes a list of</span></div><div class="line"><span class="comment"># users to NOT chroot().</span></div><div class="line"><span class="comment"># (Warning! chroot'ing can be very dangerous. If using chroot, make sure that</span></div><div class="line"><span class="comment"># the user does not have write access to the top level directory within the</span></div><div class="line"><span class="comment"># chroot)</span></div><div class="line">chroot_local_user=YES</div><div class="line">chroot_list_enable=YES</div><div class="line"><span class="comment"># (default follows)</span></div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line"><span class="comment"># vsftpd：500 OOPS: vsftpd: refusing to run with writable root inside chroot ()错误的解决方法</span></div><div class="line">allow_writeable_chroot=YES </div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># You may activate the "-R" option to the builtin ls. This is disabled by</span></div><div class="line"><span class="comment"># default to avoid remote users being able to cause excessive I/O on large</span></div><div class="line"><span class="comment"># sites. However, some broken FTP clients such as "ncftp" and "mirror" assume</span></div><div class="line"><span class="comment"># the presence of the "-R" option, so there is a strong case for enabling it.</span></div><div class="line"><span class="comment">#ls_recurse_enable=YES</span></div><div class="line"><span class="comment">#</span></div><div class="line">  When <span class="string">"listen"</span> directive is enabled, vsftpd runs <span class="keyword">in</span> standalone mode and</div><div class="line">▽ listens on IPv4 sockets. This directive cannot be used <span class="keyword">in</span> conjunction</div><div class="line"><span class="comment"># with the listen_ipv6 directive.</span></div><div class="line">listen=YES</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This directive enables listening on IPv6 sockets. By default, listening</span></div><div class="line"><span class="comment"># on the IPv6 "any" address (::) will accept connections from both IPv6</span></div><div class="line"><span class="comment"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></div><div class="line"><span class="comment"># sockets. If you want that (perhaps because you want to listen on specific</span></div><div class="line"><span class="comment"># addresses) then you must run two copies of vsftpd with two configuration</span></div><div class="line"><span class="comment"># files.</span></div><div class="line"><span class="comment"># Make sure, that one of the listen options is commented !!</span></div><div class="line"><span class="comment"># listen_ipv6=YES</span></div><div class="line"></div><div class="line">pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">tcp_wrappers=YES</div><div class="line">anon_other_write_enable=YES</div><div class="line"><span class="comment">#anon_root=/opt/test_ftp</span></div><div class="line"><span class="comment">#guest_enable=YES</span></div><div class="line"><span class="comment">#guest_username=test2</span></div><div class="line">virtual_use_local_privs=YES</div></pre></td></tr></table></figure></p>
<h4 id="用户访问权限及路径限制："><a href="#用户访问权限及路径限制：" class="headerlink" title="用户访问权限及路径限制："></a>用户访问权限及路径限制：</h4><p> 如果 userlist_deny=NO：只允许<code>userlist_file</code>文件中的用户可访问ftp；如果 <code>userlist_deny=YES</code>：<code>userlist_file</code>文件中列举的用户不能通过ftp访问系统。<code>userlist_enable</code>是该功能的开关。我们的系统配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">userlist_enable=YES</div><div class="line">userlist_deny=NO</div><div class="line">userlist_file=/etc/vsftpd/user_list</div></pre></td></tr></table></figure></p>
<p>把需要登录的用户加入到<code>/etc/vsftpd/user_list</code>文件中，一个用户一行。<br>如果我们不需要把登陆的用户限制在主目录下需要一下配置：<br>进入主配置文件中<code>chroot_list_enable=YES</code><br>创建用户文件<code>/etc/vsftpd/chroot_list</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/vsftpd/chroot_list</div></pre></td></tr></table></figure></p>
<p>将不需要限制的用户添加进去，我们只有一个test2，一行一个用户名<br>ps: 这些用户将能访问全部有权限的文件。</p>
<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost vsftpd]<span class="comment"># getsebool -a|grep ftp</span></div><div class="line">ftpd_anon_write --&gt; off</div><div class="line">ftpd_connect_all_unreserved --&gt; off</div><div class="line">  pd_connect_db --&gt; off</div><div class="line">▽tpd_full_access --&gt; off</div><div class="line">ftpd_use_cifs --&gt; off</div><div class="line">ftpd_use_fusefs --&gt; off</div><div class="line">ftpd_use_nfs --&gt; off</div><div class="line">ftpd_use_passive_mode --&gt; off</div><div class="line">httpd_can_connect_ftp --&gt; off</div><div class="line">httpd_enable_ftp_server --&gt; off</div><div class="line">tftp_anon_write --&gt; off</div><div class="line">tftp_home_dir --&gt; off</div></pre></td></tr></table></figure>
<h5 id="开启-anon-write-和full-access"><a href="#开启-anon-write-和full-access" class="headerlink" title="开启 anon_write 和full_access"></a>开启 anon_write 和full_access</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost vsftpd]<span class="comment"># setsebool allow_ftpd_anon_write  1</span></div><div class="line">[root@localhost vsftpd]<span class="comment"># setsebool allow_ftpd_full_access 1</span></div></pre></td></tr></table></figure>
<h4 id="重启ftp服务"><a href="#重启ftp服务" class="headerlink" title="重启ftp服务"></a>重启ftp服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost vsftpd]<span class="comment"># service vsftpd restart</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="http://ov62kaxkk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170830160616.png" alt="ftp2"></p>
<p>注：测试连接软件是<code>FileZilla</code>，windows访问 ftp://[ip]</p>
<h3 id="update-20170901-使用FileZilla创建中文文件夹Linux乱码"><a href="#update-20170901-使用FileZilla创建中文文件夹Linux乱码" class="headerlink" title="update 20170901 使用FileZilla创建中文文件夹Linux乱码"></a>update 20170901 使用FileZilla创建中文文件夹Linux乱码</h3><p>首先出现这个问题的原因是WINDOWS采用的是<code>GBK</code>编码方式，而Linux采用的是<code>UTF-8</code><br>首先设置好FileZilla的编码方式为<code>zh_CN</code><br>在将 <code>/etc/locale.conf</code> 中的<code>LANG</code>修改为<code>&quot;zh_CN.UTF-8&quot;</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/locale.conf </span></div><div class="line">LANG=<span class="string">"zh_CN.UTF-8"</span></div></pre></td></tr></table></figure></p>
<p>这个修改可以有效解决windows客户端使用ftp协议上传中文文件到Linux乱码的问题。<br><strong>其实最根本的解决方法是客户端上传的文件经过ftp软件能与服务器统一编码方式</strong>，具体百度吧c#、java的都有。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> ftp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 静态IP设置]]></title>
      <url>/setting_static_ip.html</url>
      <content type="html"><![CDATA[<p><strong>最近使用<code>linux</code>做服务器共享，需要设置<code>静态IP</code>，整理了一下。</strong>  <a id="more"></a>  </p>
<h3 id="获取网卡信息"><a href="#获取网卡信息" class="headerlink" title="获取网卡信息"></a>获取网卡信息</h3><h4 id="在root用户下，输入命令ifconfig"><a href="#在root用户下，输入命令ifconfig" class="headerlink" title="在root用户下，输入命令ifconfig"></a>在root用户下，输入命令ifconfig</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># ifconfig</span></div><div class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.19.128  netmask 255.255.255.0  broadcast 192.168.19.255</div><div class="line">        inet6 fe80::2938:ef28:162e:9ffd  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 00:0c:29:93:06:e9  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 77  bytes 7911 (7.7 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 67  bytes 11943 (11.6 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line"></div><div class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class="line">        inet 127.0.0.1  netmask 255.0.0.0</div><div class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class="line">        loop  txqueuelen 1  (Local Loopback)</div><div class="line">        RX packets 127  bytes 9199 (8.9 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 127  bytes 9199 (8.9 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure>
<h3 id="更改配置信息"><a href="#更改配置信息" class="headerlink" title="更改配置信息"></a>更改配置信息</h3><h4 id="从上面可以看到我的网卡号是ens33"><a href="#从上面可以看到我的网卡号是ens33" class="headerlink" title="从上面可以看到我的网卡号是ens33"></a>从上面可以看到我的网卡号是ens33</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span></div><div class="line">TYPE=<span class="string">"Ethernet"</span></div><div class="line">BOOTPROTO=<span class="string">"static"</span></div><div class="line">IPADDR=192.168.19.128</div><div class="line">NETMASK=255.255.255.0</div><div class="line">GATEWAY=192.168.19.1</div><div class="line">DEFROUTE=<span class="string">"yes"</span></div><div class="line">PEERDNS=<span class="string">"yes"</span></div><div class="line">PEERROUTES=<span class="string">"yes"</span></div><div class="line">IPV4_FAILURE_FATAL=<span class="string">"no"</span></div><div class="line">IPV6INIT=<span class="string">"yes"</span></div><div class="line">IPV6_AUTOCONF=<span class="string">"yes"</span></div><div class="line">IPV6_DEFROUTE=<span class="string">"yes"</span></div><div class="line">IPV6_PEERDNS=<span class="string">"yes"</span></div><div class="line">IPV6_PEERROUTES=<span class="string">"yes"</span></div><div class="line">IPV6_FAILURE_FATAL=<span class="string">"no"</span></div><div class="line">IPV6_ADDR_GEN_MODE=<span class="string">"stable-privacy"</span></div><div class="line">NAME=<span class="string">"ens33"</span></div><div class="line">UUID=<span class="string">"f9e34fd2-c12f-4d4c-ad93-37d0b9cc43ce"</span></div><div class="line">DEVICE=<span class="string">"ens33"</span></div><div class="line">ONBOOT=<span class="string">"yes"</span></div></pre></td></tr></table></figure>
<ul>
<li><code>BOOTPROTO</code>代表的是获取ip方式（“dhcp”＝动态获取／“static”＝设置静态ip）</li>
<li><code>IPADDR</code>代表静态ip地址 （地址就用之前ifconfig获取的inet 192.168.19.128）</li>
<li><code>NETMASK</code>代表子网掩码（地址就用之前ifconfig获取的netmask 255.255.255.0）</li>
<li><code>GATEWAY</code>代表网关（由于你的ip是192.168.58网段的，所以使用192.168.19.1，注意：你是ip地址前三位是什么网段就在后面加个1就行了）</li>
<li><code>DNS1</code>就是dns了（需要你知道你的网络的dns，一般在路由器管理后台有配置，可以不设置dns）<h3 id="最后重启下网络服务"><a href="#最后重启下网络服务" class="headerlink" title="最后重启下网络服务"></a>最后重启下网络服务</h3>注意，fail是有问题的配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># service network restart  </span></div><div class="line">Restarting network (via systemctl):                        [  OK  ]</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SAMBA共享]]></title>
      <url>/samba.html</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><code>Samba</code>是在<code>Linux</code>和<code>UNIX</code>系统上实现<code>SMB协议</code>的一个免费软件，由服务器及客户端程序构成。<code>SMB</code>（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。</p>
</blockquote>
<a id="more"></a>
<p>SMB协议是客户机/服务器型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。通过设置<code>NetBIOS over TCP/IP</code>使得Samba不但能与局域网络主机分享资源，还能与全世界的电脑分享资源。  </p>
<h3 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h3><ul>
<li>可以先检查下是否已经安装：<code>rpm -qa | grep samba</code><br>这里使用yum安装，可以不用担心一些依赖包的问题：<code>yum install samba</code>  </li>
<li>创建共享文件夹，这里就是<code>mkdir -m 777 /home/user1/share</code>  </li>
<li>修改<code>/etc/samba/smb.conf</code>，这里面的参数就比较多，主要是<br><code>workgroup = WORKGROUP</code>（这个就是windows工作组模式，还有一种是域模式，可以不改使用<code>MYGROUP</code>）<br><code>hosts allow = 192.168.19.207</code>（可以放问的IP地址，这里写的时windows地址，一般不填写）<br>然后在文件的结尾加上<br>[public]（共享名，就是windows访问时会显示的名称）<br>comment = Public Stuff（注释）<br>path = /home/user1/share（共享名）<br>public = yes（公开）<br>writable = yes（可写）<br>当然这里只是些基础的参数，还有其他的参数根据情况设置，比如会出现乱码，还要指定编码格式。  </li>
<li>重启smb服务：<code>service smb restart</code>、   <code>service smb status</code>  查看状态  </li>
<li>创建samba客户：<code>smbpasswd -a   user1</code>,回车后会提示输入密码。这个就是将来远程主机登录时需要的密码，这里的<code>user1</code>帐号必须是系统已经有的<br>帐号，没有的话会报错，然后新输的密码就是远程登录密码，这样做的好处就是自己的密码和远程登录的密码分开。  </li>
<li>windows下连接，启动运行，输入<code>\\192.168.19.185</code>,输入smb帐号密码就可以了  </li>
</ul>
<p>由于暂时还不会防火墙和SELINUX配置，而下面有些方法中的操作会受到他们的限制，因此先关闭这俩。<br>关闭防火墙的命令：<code>service iptables stop</code><br>关闭SELINUX命令：<code>setenforce 0</code>  </p>
<p>window下关闭网络共享连接  cmd &gt;&gt;<br><code>net use * /del /y</code></p>
<p>如果访问的是当前用户下的文件，不需要配置</p>
<p>如果访问的不是当前用户下的文件或者文件夹，需要配置<code>/etc/samba/smb.conf</code>，加入：  [Share] 为在共享中显示的文件夹名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[Share]</div><div class="line"></div><div class="line">comment = Shared Folder with username and password</div><div class="line"></div><div class="line">path = /data</div><div class="line"></div><div class="line">public = yes</div><div class="line"></div><div class="line">writable = yes</div><div class="line"></div><div class="line">valid users = user1</div><div class="line"></div><div class="line">available = yes</div><div class="line"></div><div class="line">browseable = yes</div></pre></td></tr></table></figure></p>
<p>启动 samba 服务<br><code>systemctl start smb.service</code>  </p>
<h3 id="测试服务"><a href="#测试服务" class="headerlink" title="测试服务"></a>测试服务</h3><p>我使用的是windows客户端连接，输入Ip <code>\\192.168.19.185</code><br>我使用的是user1账户</p>
<p><img src="http://ov62kaxkk.bkt.clouddn.com/TIM%E6%88%AA%E5%9B%BE20170905093409.png" alt="samba"></p>
<p><strong>账户有权限可以正常进入到文件中</strong>  </p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven使用tomcat7-maven-plugin插件run时出现错误： A child container failed during start]]></title>
      <url>/maven-plugins-error.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>eclipse上使用<code>maven</code>项目总是会爆各种奇怪的错误，看不懂哇看不懂。<br>这次又出现<code>A child container failed during start</code>…</p>
</blockquote>
<a id="more"></a>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul>
<li>maven - 3.3.9</li>
<li>jdk1.8.0_144</li>
<li>eclipse - 4.6</li>
<li>os - win10-1703</li>
</ul>
<h3 id="出现错误："><a href="#出现错误：" class="headerlink" title="出现错误："></a>出现错误：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">严重: A child container failed during start</div><div class="line">java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]</div><div class="line">	at java.util.concurrent.FutureTask.report(FutureTask.java:122)</div><div class="line">	at java.util.concurrent.FutureTask.get(FutureTask.java:192)</div><div class="line">	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1123)</div><div class="line">	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:800)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">	at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1559)</div><div class="line">	at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1549)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line">Caused by: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost].StandardContext[]]</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)</div><div class="line">	... 6 more</div><div class="line">Caused by: java.lang.ClassCastException: org.springframework.web.SpringServletContainerInitializer cannot be cast to javax.servlet.ServletContainerInitializer</div><div class="line">	at org.apache.catalina.startup.ContextConfig.getServletContainerInitializer(ContextConfig.java:1661)</div><div class="line">	at org.apache.catalina.startup.ContextConfig.processServletContainerInitializers(ContextConfig.java:1569)</div><div class="line">	at org.apache.catalina.startup.ContextConfig.webConfig(ContextConfig.java:1277)</div><div class="line">	at org.apache.catalina.startup.ContextConfig.configureStart(ContextConfig.java:878)</div><div class="line">	at org.apache.catalina.startup.ContextConfig.lifecycleEvent(ContextConfig.java:369)</div><div class="line">	at org.apache.catalina.util.LifecycleSupport.fireLifecycleEvent(LifecycleSupport.java:119)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:90)</div><div class="line">	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5179)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">	... 6 more</div><div class="line"></div><div class="line">八月 24, 2017 5:26:11 下午 org.apache.catalina.core.ContainerBase startInternal</div><div class="line">严重: A child container failed during start</div><div class="line">java.util.concurrent.ExecutionException: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost]]</div><div class="line">	at java.util.concurrent.FutureTask.report(FutureTask.java:122)</div><div class="line">	at java.util.concurrent.FutureTask.get(FutureTask.java:192)</div><div class="line">	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1123)</div><div class="line">	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:302)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:443)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:732)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:335)</div><div class="line">	at org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.startContainer(AbstractRunMojo.java:1091)</div><div class="line">	at org.apache.tomcat.maven.plugin.tomcat7.run.AbstractRunMojo.execute(AbstractRunMojo.java:512)</div><div class="line">	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)</div><div class="line">	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)</div><div class="line">	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)</div><div class="line">	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)</div><div class="line">	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)</div><div class="line">	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)</div><div class="line">	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)</div><div class="line">	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)</div><div class="line">	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)</div><div class="line">	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)</div><div class="line">	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)</div><div class="line">	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)</div><div class="line">	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)</div><div class="line">	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)</div><div class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)</div><div class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)</div><div class="line">	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)</div><div class="line">Caused by: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Tomcat].StandardHost[localhost]]</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:154)</div><div class="line">	at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1559)</div><div class="line">	at org.apache.catalina.core.ContainerBase<span class="variable">$StartChild</span>.call(ContainerBase.java:1549)</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line">Caused by: org.apache.catalina.LifecycleException: A child container failed during start</div><div class="line">	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:1131)</div><div class="line">	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:800)</div><div class="line">	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)</div><div class="line">	... 6 more</div></pre></td></tr></table></figure>
<h3 id="尝试解决的方法："><a href="#尝试解决的方法：" class="headerlink" title="尝试解决的方法："></a>尝试解决的方法：</h3><ul>
<li>更换maven 至最新版本   - 结果：无效</li>
<li>网上搜索都说web版本太高 2.5 ,2.4都没效果</li>
<li>注意问题所在<code>org.springframework.web.SpringServletContainerInitializer cannot be cast to javax.servlet.ServletContainerInitializer</code> 这句话上，根本上就是jar包有问题。首先在项目排除这个<code>javax.servlet-api</code>包，可以运行成功;</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 加上这句，作用域改成编译时使用，而打包时不使用 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>但是也有可能<code>jdk</code>的问题，有人说是Jdk中毒了，我看到这个回答感觉自己中毒了 doge.jpg。</strong></p>
<p>感觉使用<code>idea</code>怎么没出错，嗯~，就是坑你，没商量~。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于辞职]]></title>
      <url>/first-quit-job.html</url>
      <content type="html"><![CDATA[<p>今天总算是把工作交接完了，又要开始一段新的职业生涯了。</p>
<a id="more"></a>
<p>记得是去年11月25号入职金拓维，当时面试我的还记得是友爱的周总，在金拓维很长的实习生活中，公司氛围很好，哈哈，第一位项目经理是光哥，当然，我现在跳槽也是来到光哥手下干事的，又回来了。</p>
<p>来公司认识第一位员工应该是我们的秦~，现在是我的室友，比我早来一天。</p>
<p>后来一位大学同学也来了，感觉这个世界真的小，工作的时候还有大学同学一起，还是很知足的，是不是。</p>
<p>后来还有饶~~，等等一些同事，真的庆幸遇到这些兄弟们，让工作历程，变得不再孤单。</p>
<p>即使目前跳槽了，也还在附近，仍然一起的。That`s ok! </p>
<p>具体跳槽原因，可能是我这个人不太安分吧，在这个公司刚签合同一个多月，就跑了，我也很窘迫的，鼓起勇气去辞职的，经理也谈了一堆道理，balabala,省略。。。</p>
<p>去了初创公司，可能会很累，但是为了梦想，总得向前迈出一小步。虽然最近发生的事情有点多，人也有点沉沦，但是不失本心，我想只会越来越好的。</p>
<p>也希望大家都能越来越好！</p>
<p>真的很晚了，今晚又要失眠了。</p>
<p>对自己说声，晚安！</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 辞职 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中位运算符]]></title>
      <url>/JAVA_Bitwise_Operators.html</url>
      <content type="html"><![CDATA[<p>1、 今天在读<code>ConcurrentHashMap</code>的源码中突然发现一段很好玩的代码，大概理解它的意思。不多说上代码：<a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns a power of two table size for the given desired capacity.</span></div><div class="line"><span class="comment"> * See Hackers Delight, sec 3.2</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = c - <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> <em>在 ConcurrentHashMap 源码的第688~700  line</em></p>
<ol>
<li>疑问<ol>
<li>见过<code>&gt;&gt;</code>、<code>&lt;&lt;</code>的位运算符，但没见过<code>&gt;&gt;&gt;</code>估计意思差不多；</li>
<li><code>|=</code>运算符，目测是或；</li>
</ol>
</li>
<li><p>不知道写段代码测试吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"15的二进制数是   "</span>+ Integer.toBinaryString(<span class="number">15</span>));</div><div class="line">		System.out.println(<span class="string">"-15的二进制数是   "</span>+ Integer.toBinaryString(-<span class="number">15</span>));</div><div class="line">		System.out.println(<span class="string">"15 &gt;&gt; 2 的运算结果是    "</span> + (<span class="number">15</span> &gt;&gt; <span class="number">2</span>));</div><div class="line">		System.out.println(<span class="string">"15 &lt;&lt; 2 的运算结果是    "</span> + (<span class="number">15</span> &lt;&lt; <span class="number">2</span>));</div><div class="line">		System.out.println(<span class="string">"15 &gt;&gt;&gt; 2 的运算结果是    "</span> + (<span class="number">15</span> &gt;&gt;&gt; <span class="number">2</span>));</div><div class="line">		<span class="comment">//遗憾的是没有&lt;&lt;&lt;运算符,我的jdk是jdk1.8.0_144</span></div><div class="line">		<span class="comment">//System.out.println(15 &lt;&lt;&lt; 2);</span></div><div class="line">		System.out.println(<span class="string">"-15 &gt;&gt; 2 的运算结果是    "</span> + (-<span class="number">15</span> &gt;&gt; <span class="number">2</span>));</div><div class="line">		System.out.println(<span class="string">"-15 &lt;&lt; 2 的运算结果是    "</span> + (-<span class="number">15</span> &lt;&lt; <span class="number">2</span>));</div><div class="line">		System.out.println(<span class="string">"-15 &gt;&gt;&gt; 2 的运算结果是    "</span> + (-<span class="number">15</span> &gt;&gt;&gt; <span class="number">2</span>));</div><div class="line">		<span class="keyword">int</span> index = <span class="number">8</span>;</div><div class="line">		System.out.println(index + <span class="string">" | 15 &gt;&gt;&gt; 2的运算结果是   "</span> + (index | <span class="number">15</span> &gt;&gt;&gt; <span class="number">2</span>));</div><div class="line">		System.out.println(index + <span class="string">" |= 15 &gt;&gt;&gt; 2 的运算结果是    "</span> + (index |= <span class="number">15</span> &gt;&gt;&gt; <span class="number">2</span>));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">15的二进制数是   1111</div><div class="line">-15的二进制数是   11111111111111111111111111110001</div><div class="line">15 &gt;&gt; 2 的运算结果是    3</div><div class="line">15 &lt;&lt; 2 的运算结果是    60</div><div class="line">15 &gt;&gt;&gt; 2 的运算结果是    3</div><div class="line">-15 &gt;&gt; 2 的运算结果是    -4</div><div class="line">-15 &lt;&lt; 2 的运算结果是    -60</div><div class="line">-15 &gt;&gt;&gt; 2 的运算结果是    1073741820</div><div class="line">8 | 3的运算结果是   11</div><div class="line">8 |= 15 &gt;&gt;&gt; 2 的运算结果是    11</div></pre></td></tr></table></figure>
</li>
<li><p>分析</p>
<ol>
<li><code>15 &gt;&gt; 2</code><br>15 的 二 进 制 表 示 00000000 00000000 00000000 00001111  正数补码反码都一样<br>得 -15的补码表示 11111111 11111111 11111111 11110001<br>将 15右移2位 00000000 00000000 00000000 00000011 得3  </li>
<li><code>-15 &gt;&gt; 2</code><br>将-15右移2位 11111111 11111111 11111111 11111100<br>在高位补1<br>保留符号位，然后按位取反<br>10000000 00000000 00000000 00000011<br>然后加1，即为所求数的原码：<br>10000000 00000000 00000000 00000100<br>所以 -15&gt;&gt;2 右移两位结果是 -4</li>
<li><code>&gt;&gt;&gt;</code> 符号结果是无符号规则右移  主要区别是在负数上面<br>-15的二进制表示 11111111 11111111 11111111 11110001<br>将-15右移2位， 在高位补0， 00111111 11111111 11111111 11111100<br>所得结果 1073741820  </li>
<li>从上面的结果可以看出 8|=15就是 8|15 就是或运算符，唯一的区别的就是temp = temp | temp1 等于 temp |= temp1，重新复习下与或非运算符：<ol>
<li><code>与运算</code>符用符号“&amp;”表示，其使用规律如下：<br>两个操作数中位都为1，结果才为1，否则结果为0，</li>
<li><code>或运算</code>符用符号“|”表示，其运算规律如下：<br>两个位只要有一个为1，那么结果就是1，否则就为0， </li>
<li><code>非运算</code>符用符号“~”表示，其运算规律如下：<br>如果位为0，结果是1，如果位为1，结果是0， </li>
<li><code>异或运算</code>是用符号“^”表示的，其运算规律是：<br>两个操作数的位中，相同则结果为0，不同则结果为1。</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[提升生活质量的日常方法]]></title>
      <url>/improve-lives-quality.html</url>
      <content type="html"><![CDATA[<h3 id="提升生活质量的日常方法"><a href="#提升生活质量的日常方法" class="headerlink" title="提升生活质量的日常方法"></a>提升生活质量的日常方法</h3><p>大方面那些什么学习、坚定梦想、诚恳、谦虚，进入大的圈子等等太大，在此记录下生活细节需要提升的。<br><img src="http://ov62kaxkk.bkt.clouddn.com/1ad5ad6eddc451dae80256afb6fd5266d11632f9.jpg" alt="image"></p>
<a id="more"></a>
<h5 id="每天整理桌子"><a href="#每天整理桌子" class="headerlink" title="每天整理桌子"></a>每天整理桌子</h5><p>// 坚持啊，桌子每次都乱 ，</p>
<h5 id="至少每周要彻底打扫次卫生"><a href="#至少每周要彻底打扫次卫生" class="headerlink" title="至少每周要彻底打扫次卫生"></a>至少每周要彻底打扫次卫生</h5><p>// 反正我要赤脚  </p>
<h5 id="床单、被子每个月最好洗一次，晒一次"><a href="#床单、被子每个月最好洗一次，晒一次" class="headerlink" title="床单、被子每个月最好洗一次，晒一次"></a>床单、被子每个月最好洗一次，晒一次</h5><p>// 作为个工科男，最不爱做的卫生就是这个了 恍惚恍惚  (逃:<br>//1708 没办到  </p>
<h5 id="理发，一个月一次"><a href="#理发，一个月一次" class="headerlink" title="理发，一个月一次"></a>理发，一个月一次</h5><p>// 哈哈，我的头发生长旺盛，一般一个月</p>
<h5 id="坚持锻炼"><a href="#坚持锻炼" class="headerlink" title="坚持锻炼"></a>坚持锻炼</h5><p>// 好的身体才能做其他的事情，最最重要的。。。</p>
<h5 id="出门最好带个伞"><a href="#出门最好带个伞" class="headerlink" title="出门最好带个伞"></a>出门最好带个伞</h5><p>// 结果回来伞就没了 。。。</p>
<h5 id="多读点书，多学习"><a href="#多读点书，多学习" class="headerlink" title="多读点书，多学习"></a>多读点书，多学习</h5><p>// 虽然经常去图书馆，但是读书不是我的目的啊，超难。。。  但是不得不说读书是有好处的，这个没有终点，需要保持才行，像我们这种IT男，好难坚持做这个，忙的要死。。。</p>
<p>// 学习是必须的，加油。 gdvl</p>
<h5 id="唱歌"><a href="#唱歌" class="headerlink" title="唱歌"></a>唱歌</h5><p>// mmp，像我这种五音不全得是不是没救了  </p>
<p>// 没打游戏了，可以练习下，有大神走过来，可以教我啊啊啊，请加我，联系，万分感谢。。</p>
<h5 id="做菜"><a href="#做菜" class="headerlink" title="做菜"></a>做菜</h5><p>// 大部分时候被大厨室友承包了，</p>
<p>// 感觉男同袍做菜，貌似只看能不能吃，哈哈 ，逃，不要打我我</p>
<p>// 是的要做得好点才行，不然就一尘不变了，没意义。。</p>
<h5 id="少打游戏"><a href="#少打游戏" class="headerlink" title="少打游戏"></a>少打游戏</h5><p>// 戒了，戒了，不要跟我谈游戏了。。 </p>
<p>不然我会跟一直谈下去的。。。 </p>
<p>// 不知道以前那么多年，怎么这么大的瘾在打游戏上面，现在，失去的太多，不知道我还能不能追回来。。加油boy…</p>
<h5 id="关于洗碗机"><a href="#关于洗碗机" class="headerlink" title="关于洗碗机"></a>关于洗碗机</h5><p>// 好东西啊啊，可惜现在好贵 最便宜也要3000大洋，要赚钱了  </p>
<h5 id="每天一个苹果吧"><a href="#每天一个苹果吧" class="headerlink" title="每天一个苹果吧"></a>每天一个苹果吧</h5><p>// 今年牙齿上做了手术，估计好长段时间不能吃啊，口水.jpg，<br>// 说到苹果，是不要个削苹果的，到时候淘宝吧。</p>
<blockquote>
<p>欢迎有人给我提意见，万分感谢！！！</p>
</blockquote>
<p>(To Be Continue:  </p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fastDFS与java整合文件上传下载]]></title>
      <url>/fsds-java.html</url>
      <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li>下载<code>fastdfs-client-java</code>源码</li>
</ol>
<p><a rel="external nofollow" target="_blank" href="http://pan.baidu.com/s/1i5QQXcL">源码地址</a> 密码：<code>s3sw</code></p>
<ol>
<li><p>修改<code>pom.xml</code><br><strong>第一个plugins是必需要的，是maven用来编译的插件，第二个是maven打源码包的，可以不要。</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                      <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将 <code>fastdfs-client-java</code> 打包<br>直接项目右键，run as maven install<br>install成功后，fastdfs-client-java就成功的被安装到本地仓库了。</p>
</li>
</ol>
<hr>
<h3 id="编写工具类："><a href="#编写工具类：" class="headerlink" title="编写工具类："></a>编写工具类：</h3><ul>
<li>把<code>fdfs_client.conf</code>文件复制一份放到自己项目的resource下面;修改里面的<code>tracker.server</code>,其它的都不用动：  </li>
<li>在项目的<code>pom.xml</code>中添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.csource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>首先来实现文件上传，<code>fastdfs-client-java</code>的上传是通过传入一个byte[ ]来完成的，简单看一下源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> String[] upload_file(<span class="keyword">byte</span>[] file_buff, String file_ext_name, </div><div class="line">           NameValuePair[] meta_list) <span class="keyword">throws</span> IOException, MyException&#123;</div><div class="line">    <span class="keyword">final</span> String group_name = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.upload_file(group_name, file_buff, <span class="number">0</span>, file_buff.length, file_ext_name, meta_list);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FastDFSFile</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> FastDFS上传文件业务对象</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年7月18日</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSFile</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2637755431406080379L</span>;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 文件二进制</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] content;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 文件名称</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 文件长度</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> Long size;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">(<span class="keyword">byte</span>[] content, String name, Long size)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.size = size;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] getContent() &#123;</div><div class="line">		<span class="keyword">return</span> content;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(<span class="keyword">byte</span>[] content)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.content = content;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> size;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Long size)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.size = size;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSerialversionuid</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> serialVersionUID;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="编写FastDFS工具类"><a href="#编写FastDFS工具类" class="headerlink" title="编写FastDFS工具类"></a>编写FastDFS工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</div><div class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</div><div class="line"><span class="keyword">import</span> org.csource.fastdfs.ClientGlobal;</div><div class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient1;</div><div class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerClient;</div><div class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerServer;</div><div class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FastDFSUtils</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> FastDFS工具类</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年7月18日</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSUtils</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * </span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4462272673174266738L</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> TrackerClient trackerClient;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TrackerServer trackerServer;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> StorageClient1 storageClient1;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">        	<span class="comment">//clientGloble读配置文件</span></div><div class="line">        	ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"fdfs_client.conf"</span>);</div><div class="line">        	ClientGlobal.init(resource.getClassLoader().getResource(<span class="string">"fdfs_client.conf"</span>).getPath());</div><div class="line">			<span class="comment">//trackerclient</span></div><div class="line">        	trackerClient = <span class="keyword">new</span> TrackerClient();</div><div class="line">			trackerServer = trackerClient.getConnection();</div><div class="line">			<span class="comment">//storageclient</span></div><div class="line">			storageClient1 = <span class="keyword">new</span> StorageClient1(trackerServer,<span class="keyword">null</span>); </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * fastDFS文件上传</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> file 上传的文件 FastDFSFile</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span> String 返回文件的绝对路径</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFile</span><span class="params">(FastDFSFile file)</span></span>&#123;</div><div class="line">		String path = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//文件扩展名</span></div><div class="line">			String ext = FilenameUtils.getExtension(file.getName());</div><div class="line">			<span class="comment">//mata list是表文件的描述</span></div><div class="line">			NameValuePair[] mata_list = <span class="keyword">new</span> NameValuePair[<span class="number">3</span>];</div><div class="line">			mata_list[<span class="number">0</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileName"</span>,file.getName());</div><div class="line">			mata_list[<span class="number">1</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileExt"</span>,ext);</div><div class="line">			mata_list[<span class="number">2</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileSize"</span>,String.valueOf(file.getSize()));</div><div class="line">			path = storageClient1.upload_file1(file.getContent(), ext, mata_list);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">return</span> path;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * fastDFS文件下载</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> groupName 组名</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> remoteFileName 文件名</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> specFileName 真实文件名</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span> ResponseEntity&lt;byte[]&gt;</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@org</span>.jetbrains.annotations.NotNull</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; downloadFile(String groupName, String remoteFileName, String specFileName)&#123;</div><div class="line">		<span class="keyword">byte</span>[] content = <span class="keyword">null</span>;</div><div class="line">	    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line">	    <span class="keyword">try</span> &#123;</div><div class="line">	        content = storageClient1.download_file(groupName, remoteFileName);</div><div class="line">	        headers.setContentDispositionFormData(<span class="string">"attachment"</span>,  <span class="keyword">new</span> String(specFileName.getBytes(<span class="string">"UTF-8"</span>),<span class="string">"iso-8859-1"</span>));</div><div class="line">	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</div><div class="line">	    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">	        e.printStackTrace();</div><div class="line">	    &#125;</div><div class="line">	    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(content, headers, HttpStatus.CREATED);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 根据fastDFS返回的path得到文件的组名</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> path fastDFS返回的path</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getGroupFormFilePath</span><span class="params">(String path)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> path.split(<span class="string">"/"</span>)[<span class="number">0</span>];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 * 根据fastDFS返回的path得到文件名</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> path fastDFS返回的path</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@NotNull</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileNameFormFilePath</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> path.substring(path.indexOf(<span class="string">"/"</span>)+<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="测试Controller"><a href="#测试Controller" class="headerlink" title="测试Controller"></a>测试Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.wuwii.utils.FastDFSFile;</div><div class="line"><span class="keyword">import</span> com.wuwii.utils.FastDFSUtils;</div><div class="line"><span class="keyword">import</span> com.wuwii.utils.PropertyUtil;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * FastFDS控制器</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/fastdfs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastFDSController</span> </span>&#123;</div><div class="line">	 <span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">upload</span> <span class="params">(MultipartFile file)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			FastDFSFile fastDFSFile = <span class="keyword">new</span> FastDFSFile(file.getBytes(), file.getOriginalFilename(), file.getSize());</div><div class="line">			String path = FastDFSUtils.uploadFile(fastDFSFile);</div><div class="line">			<span class="keyword">return</span> <span class="string">"redirect:"</span>+ PropertyUtil.get(<span class="string">"fastFDS_server"</span>) + path;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	 <span class="meta">@RequestMapping</span>(value = <span class="string">"/download"</span>)</div><div class="line">	 <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download (String path, String specFileName)&#123;</div><div class="line">		 String filename = FastDFSUtils.getFileNameFormFilePath(path);</div><div class="line">		 String group = FastDFSUtils.getGroupFormFilePath(path);</div><div class="line">		 <span class="keyword">return</span> FastDFSUtils.downloadFile(group, filename, specFileName);</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后附上读取配置文件的工具类PropertyUtil"><a href="#最后附上读取配置文件的工具类PropertyUtil" class="headerlink" title="最后附上读取配置文件的工具类PropertyUtil"></a>最后附上读取配置文件的工具类PropertyUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.wuwii.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@ClassName</span> PropertyUtil</span></div><div class="line"><span class="comment"> * <span class="doctag">@Description</span> 读取配置文件的内容（key，value）</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></div><div class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年7月18日</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties PROP = <span class="keyword">new</span> Properties();</div><div class="line"></div><div class="line">	<span class="comment">/** </span></div><div class="line"><span class="comment">	 * <span class="doctag">@Method</span>: get </span></div><div class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 读取配置文件的内容（key，value）</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">	 * <span class="doctag">@return</span> String</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> </span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (PROP.isEmpty()) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				InputStream in = PropertyUtil.class.getResourceAsStream(<span class="string">"/config.properties"</span>);</div><div class="line">				PROP.load(in);</div><div class="line">				in.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> PROP.getProperty(key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="上传"><a href="#上传" class="headerlink" title="上传!"></a>上传!</h4><p><img src="http://img.blog.csdn.net/20170917111957613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzU5MTUzODQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="猫咪"></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载就很简单了，因为直接获得到二进制流了，返回给客户端即可。<br>下载需要主要的是，要注意从FastDFS返回的文件名是这种随机码，因此我们需要在上传的时候将文件本身的名字存到数据库，再到下载的时候对文件头重新设置名字即可。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> fastDFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[念]]></title>
      <url>/fetter-tears.html</url>
      <content type="html"><![CDATA[<p>夜总是格外的静，月光就可以通过窗户观赏我这残酷的心情了。  </p>
<p>想想过去，我有好几年都没跟你见过面，即使是聊天也是随意的说说，心中确实有写隔阂，没有以前那么天真，忧伤了。现在节奏太快了现在做事都是太认真了，总是考虑会不会有结果，渐渐的失去了一些目标，一些梦想，一些人。</p>
<p>事情总是那么凑巧，这个时候室友都封闭开发去，需要一个人，偌大的房间留个我一个人享受，想可以慢慢的在这里疗伤了，是的，下班后，比往常安静了，没以前在一起讲段子的欢声，骂做的菜真难吃，米是不是又没有煮·····现在只剩下我每天做一个菜，煮一碗米，一个人在吃饭，夜真是寂静的无聊，只有这个残酷的月光能在一旁陪伴。</p>
<p>真的想，一个人静静的吃饭。得不到可能就是最好的结果，毕竟这么长时间都没有联系过的人，早就应该消失的人，为什么还要在她幸福的时刻出现。</p>
<p>难以启齿，大道理真的没几个人能说的清楚，但是我还是清楚心中所想，只是心底还是存在那么一些执念，不愿意放下罢了，估计今生也没那么容易放下吧。</p>
<p>但是，人总是要往前走的，也不能一直活在这个回忆里去放弃，要努力前行。有可能时间不会让我忘记，只是削弱它的程度，它的悲伤吧。</p>
<p>曾经看到你的签名，想要制造羁绊，就必须要承担流泪的风险，我不太清楚你心中所想，也不懂你，这么多年了没见，每个人都发生了无数的可能。这句话我看出来，你是真的想找到爱情，而且已经可能找到了对的人了，成了一段绚丽多彩的美丽故事。</p>
<p>我可能是个执着的傻瓜，总是伤害到人，最终也伤害到自己了；我也是追求完美的人，都只去接触身边符合自己的人。所以总是这个患得患失的状态。我想上面这句话来形容我最好的了，选择来到了这个世界，就应该住在这里，与它融合，影响它，不必去选择什么对与错。可能会很痛，可能会是错误的道路，但那样生活就会不一样的精彩，不是吗？我希望不在抗拒这个世界带来的美好，也不去害怕去开辟新的人生。</p>
<p>你是唯一，我会记得，也有可能遗忘，但不会消失，一直都在；用心去看，才能看得真切，你是幸福的。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建fastDFS单实例服务器]]></title>
      <url>/centos-fastDFS.html</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p><code>FastDFS</code>是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p>
</blockquote>
<a id="more"></a>  
<blockquote>
<p><code>FastDFS</code>为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<p><code>FastDFS</code>服务端有两个角色：跟踪器<code>tracker</code>和存储节点<code>storage</code>。跟踪器主要做调度工作，在访问上起负载均衡的作用。</p>
</blockquote>
<h2 id="安装并配置FastDFS"><a href="#安装并配置FastDFS" class="headerlink" title="安装并配置FastDFS"></a>安装并配置FastDFS</h2><h3 id="运行环境及相关软件"><a href="#运行环境及相关软件" class="headerlink" title="运行环境及相关软件"></a>运行环境及相关软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CentOS 7.0</div><div class="line">FastDFS_v5.08.tar.gz</div><div class="line">nginx-1.8.1.tar.gz</div><div class="line">fastdfs-nginx-module_v1.16.tar.gz</div><div class="line">libfastcommon</div></pre></td></tr></table></figure>
<h3 id="服务器规划"><a href="#服务器规划" class="headerlink" title="服务器规划"></a>服务器规划</h3><table>
<thead>
<tr>
<th>服务器名称</th>
<th>IP地址及端口</th>
<th>备注 </th>
</tr>
</thead>
<tbody>
<tr>
<td>fastdfs-tracker</td>
<td>192.168.114.128:22122</td>
<td>跟踪服务器/调度服务器</td>
</tr>
<tr>
<td>fastdfs-storage</td>
<td>192.168.114.128:23000</td>
<td>存储服务器 </td>
</tr>
</tbody>
</table>
<h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><h4 id="首先创建工具目录（非必须）"><a href="#首先创建工具目录（非必须）" class="headerlink" title="首先创建工具目录（非必须）"></a>首先创建工具目录（非必须）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># mkdir -p /home/oldcat/tools</span></div><div class="line">[root@fastdfs-storage ~]<span class="comment"># cd /home/oldcat/tools/</span></div></pre></td></tr></table></figure>
<p>首先安装一些必须的的工具：</p>
<ul>
<li>libevent库文件： <code>yum -y install libevent</code>；</li>
<li>系统没有安装make、vim等常用命令: <code>yum -y install gcc automake autoconf libtool make</code></li>
</ul>
<h4 id="下载并安装FastDFS依赖包libfastcommon"><a href="#下载并安装FastDFS依赖包libfastcommon" class="headerlink" title="下载并安装FastDFS依赖包libfastcommon"></a>下载并安装FastDFS依赖包libfastcommon</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage tools]<span class="comment"># wget https://codeload.github.com/happyfish100/libfastcommon/zip/master</span></div><div class="line">[root@fastdfs-storage tools]<span class="comment"># unzip master</span></div><div class="line">[root@fastdfs-storage tools]<span class="comment"># cd libfastcommon-master/</span></div><div class="line">[root@fastdfs-storage libfastcommon-master]<span class="comment"># ls</span></div><div class="line">HISTORY  INSTALL  libfastcommon.spec  make.sh  php-fastcommon  README  src</div><div class="line">[root@fastdfs-storage libfastcommon-master]<span class="comment"># ./make.sh</span></div><div class="line">[root@fastdfs-storage libfastcommon-master]<span class="comment"># ./make.sh install</span></div></pre></td></tr></table></figure>
<h4 id="下载并安装FastDFS"><a href="#下载并安装FastDFS" class="headerlink" title="下载并安装FastDFS"></a>下载并安装FastDFS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker tools]<span class="comment"># wget http://jaist.dl.sourceforge.net/project/fastdfs/FastDFS%20Server%20Source%20Code/FastDFS%20Server%20with%20PHP%20Extension%20Source%20Code%20V5.08/FastDFS_v5.08.tar.gz</span></div><div class="line">[root@fastdfs-tracker tools]<span class="comment"># tar xf FastDFS_v5.08.tar.gz</span></div><div class="line">[root@fastdfs-tracker tools]<span class="comment"># cd FastDFS</span></div><div class="line">[root@fastdfs-tracker FastDFS]<span class="comment"># ./make.sh &amp;&amp; ./make.sh install</span></div></pre></td></tr></table></figure>
<h4 id="采用默认方式安装后的文件及目录："><a href="#采用默认方式安装后的文件及目录：" class="headerlink" title="采用默认方式安装后的文件及目录："></a>采用默认方式安装后的文件及目录：</h4><h5 id="服务脚本："><a href="#服务脚本：" class="headerlink" title="服务脚本："></a>服务脚本：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># ll /etc/init.d/ |grep fdfs</span></div><div class="line">-rwxr-xr-x. 1 root root   918 4月  22 22:08 fdfs_storaged</div><div class="line">-rwxr-xr-x. 1 root root   920 4月  22 22:08 fdfs_trackerd</div></pre></td></tr></table></figure>
<h5 id="样例配置文件"><a href="#样例配置文件" class="headerlink" title="样例配置文件"></a>样例配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># ll /etc/fdfs/</span></div><div class="line">总用量 20</div><div class="line">-rw-r--r--. 1 root root 1461 4月  22 22:08 client.conf.sample</div><div class="line">-rw-r--r--. 1 root root 7927 4月  22 22:08 storage.conf.sample</div><div class="line">-rw-r--r--. 1 root root 7200 4月  22 22:08 tracker.conf.sample</div></pre></td></tr></table></figure>
<h5 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># ll /usr/bin|grep fdfs</span></div><div class="line">-rwxr-xr-x.   1 root root     252272 4月  22 22:08 fdfs_appender_test</div><div class="line">-rwxr-xr-x.   1 root root     252225 4月  22 22:08 fdfs_appender_test1</div><div class="line">-rwxr-xr-x.   1 root root     242449 4月  22 22:08 fdfs_append_file</div><div class="line">-rwxr-xr-x.   1 root root     242013 4月  22 22:08 fdfs_crc32</div><div class="line">-rwxr-xr-x.   1 root root     242508 4月  22 22:08 fdfs_delete_file</div><div class="line">-rwxr-xr-x.   1 root root     243627 4月  22 22:08 fdfs_download_file</div><div class="line">-rwxr-xr-x.   1 root root     243369 4月  22 22:08 fdfs_file_info</div><div class="line">-rwxr-xr-x.   1 root root     255657 4月  22 22:08 fdfs_monitor</div><div class="line">-rwxr-xr-x.   1 root root     863913 4月  22 22:08 fdfs_storaged</div><div class="line">-rwxr-xr-x.   1 root root     258712 4月  22 22:08 fdfs_test</div><div class="line">-rwxr-xr-x.   1 root root     257881 4月  22 22:08 fdfs_test1</div><div class="line">-rwxr-xr-x.   1 root root     365232 4月  22 22:08 fdfs_trackerd</div><div class="line">-rwxr-xr-x.   1 root root     243547 4月  22 22:08 fdfs_upload_appender</div><div class="line">-rwxr-xr-x.   1 root root     244453 4月  22 22:08 fdfs_upload_file</div></pre></td></tr></table></figure>
<h3 id="配置跟踪服务器（tracker-server）"><a href="#配置跟踪服务器（tracker-server）" class="headerlink" title="配置跟踪服务器（tracker server）"></a>配置跟踪服务器（tracker server）</h3><h4 id="拷贝tracker-server和client端样例配置文件并重命名"><a href="#拷贝tracker-server和client端样例配置文件并重命名" class="headerlink" title="拷贝tracker server和client端样例配置文件并重命名"></a>拷贝tracker server和client端样例配置文件并重命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span></div><div class="line">[root@fastdfs-storage ~]<span class="comment"># cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf</span></div></pre></td></tr></table></figure>
<h4 id="编辑tracker-server配置文件tracker-conf，需要修改内容如下："><a href="#编辑tracker-server配置文件tracker-conf，需要修改内容如下：" class="headerlink" title="编辑tracker server配置文件tracker.conf，需要修改内容如下："></a>编辑tracker server配置文件tracker.conf，需要修改内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">disabled=<span class="literal">false</span>（默认为<span class="literal">false</span>，表示是否无效）</div><div class="line">port=22122（默认为22122）</div><div class="line">base_path=/data/fastdfs/tracker</div></pre></td></tr></table></figure>
<h4 id="编辑client端的配置文件client-conf，需要修改内容如下"><a href="#编辑client端的配置文件client-conf，需要修改内容如下" class="headerlink" title="编辑client端的配置文件client.conf，需要修改内容如下"></a>编辑client端的配置文件client.conf，需要修改内容如下</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">base_path=/data/fastdfs/tracker</div><div class="line">tracker_server=172.18.10.232:22122</div></pre></td></tr></table></figure>
<h4 id="创建tracker-server数据目录"><a href="#创建tracker-server数据目录" class="headerlink" title="创建tracker server数据目录"></a>创建tracker server数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># mkdir -p /data/fastdfs/tracker</span></div></pre></td></tr></table></figure>
<h4 id="测试启动tracker-server，启动成功会自动在-data-fastdfs-tracker目录新建data和logs目录"><a href="#测试启动tracker-server，启动成功会自动在-data-fastdfs-tracker目录新建data和logs目录" class="headerlink" title="测试启动tracker server，启动成功会自动在/data/fastdfs/tracker目录新建data和logs目录"></a>测试启动tracker server，启动成功会自动在/data/fastdfs/tracker目录新建data和logs目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># cd /data/fastdfs/tracker/</span></div><div class="line">[root@fastdfs-tracker tracker]<span class="comment"># ls</span></div><div class="line">[root@fastdfs-tracker tracker]<span class="comment"># /etc/init.d/fdfs_trackerd start</span></div><div class="line">Starting FastDFS tracker server:</div><div class="line">[root@fastdfs-tracker tracker]<span class="comment"># ss -lntup|grep 22122</span></div><div class="line">tcp    LISTEN     0      128                    *:22122                 *:*      users:((<span class="string">"fdfs_trackerd"</span>,3785,5)) </div><div class="line">[root@fastdfs-tracker tracker]<span class="comment"># ls</span></div><div class="line">data  logs</div></pre></td></tr></table></figure>
<h4 id="关闭tracker-server-目前可以不使用"><a href="#关闭tracker-server-目前可以不使用" class="headerlink" title="关闭tracker server(目前可以不使用)"></a>关闭tracker server(目前可以不使用)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker tracker]<span class="comment"># /etc/init.d/fdfs_trackerd stop</span></div><div class="line">waiting <span class="keyword">for</span> pid [3785] <span class="built_in">exit</span> ...</div><div class="line">pid [3785] <span class="built_in">exit</span>.</div></pre></td></tr></table></figure>
<h3 id="配置存储服务器（storage-server）"><a href="#配置存储服务器（storage-server）" class="headerlink" title="配置存储服务器（storage server）"></a>配置存储服务器（storage server）</h3><h4 id="拷贝storage-server样例配置文件并重命名"><a href="#拷贝storage-server样例配置文件并重命名" class="headerlink" title="拷贝storage server样例配置文件并重命名"></a>拷贝storage server样例配置文件并重命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span></div></pre></td></tr></table></figure>
<h4 id="编辑storage-server配置文件storage-conf，需要修改内容如下："><a href="#编辑storage-server配置文件storage-conf，需要修改内容如下：" class="headerlink" title="编辑storage server配置文件storage.conf，需要修改内容如下："></a>编辑storage server配置文件storage.conf，需要修改内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">disabled=<span class="literal">false</span>（默认为<span class="literal">false</span>，表示是否无效）</div><div class="line">port=23000（默认为23000）</div><div class="line">base_path=/data/fastdfs/storage</div><div class="line">tracker_server=172.18.10.232:22122</div><div class="line">store_path0=/data/fastdfs/storage</div><div class="line">http.server_port=8888（默认为8888，nginx中配置的监听端口那之一致）</div></pre></td></tr></table></figure>
<h4 id="创建storage-server数据目录"><a href="#创建storage-server数据目录" class="headerlink" title="创建storage server数据目录"></a>创建storage server数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># mkdir -p /data/fastdfs/storage</span></div></pre></td></tr></table></figure>
<h4 id="测试启动storage-server，启动成功会自动在-data-fastdfs-tracker目录新建data和logs目录（启动storage-server的前提是tracker-server必须事先已启动）"><a href="#测试启动storage-server，启动成功会自动在-data-fastdfs-tracker目录新建data和logs目录（启动storage-server的前提是tracker-server必须事先已启动）" class="headerlink" title="测试启动storage server，启动成功会自动在/data/fastdfs/tracker目录新建data和logs目录（启动storage server的前提是tracker server必须事先已启动）"></a>测试启动storage server，启动成功会自动在/data/fastdfs/tracker目录新建data和logs目录（启动storage server的前提是tracker server必须事先已启动）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># cd /data/fastdfs/storage/</span></div><div class="line">[root@fastdfs-storage storage]<span class="comment"># ls</span></div><div class="line">[root@fastdfs-storage storage]<span class="comment"># /etc/init.d/fdfs_storaged start</span></div><div class="line">Starting FastDFS storage server:</div><div class="line">[root@fastdfs-storage storage]<span class="comment"># ss -lntup|grep 23000</span></div><div class="line">tcp    LISTEN     0      128                    *:23000                 *:*      users:((<span class="string">"fdfs_storaged"</span>,3786,5))</div><div class="line">[root@fastdfs-storage storage]<span class="comment"># ls</span></div><div class="line">data  logs</div></pre></td></tr></table></figure>
<h4 id="验证storage是否登记到tracker服务器"><a href="#验证storage是否登记到tracker服务器" class="headerlink" title="验证storage是否登记到tracker服务器~"></a>验证storage是否登记到tracker服务器~</h4><ul>
<li>使用/usr/bin/fdfs_monitor /etc/fdfs/storage.conf，运行fdfs_monitor查看storage服务器是否已经登记到tracker服务器。</li>
<li>如果出现ip_addr = <ip> Active, 则表明storage服务器已经登记到tracker服务器~</ip></li>
<li>Storage 1:<br>  id = 192.168.0.1<br>  ip_addr = 192.168.0.1  ==ACTIVE==</li>
</ul>
<h3 id="文件上传测试"><a href="#文件上传测试" class="headerlink" title="文件上传测试"></a>文件上传测试</h3><ul>
<li>执行如下上传命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-tracker ~]<span class="comment"># /usr/bin/fdfs_upload_file /etc/fdfs/client.conf /etc/fdfs/client.conf</span></div><div class="line">group1/M00/00/00/rBIK6VcaP0aARXXvAAHrUgHEviQ394.conf</div><div class="line">返回文件ID即说明文件已经上传成功</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="存储服务器（storage-server）安装并配置nginx"><a href="#存储服务器（storage-server）安装并配置nginx" class="headerlink" title="存储服务器（storage server）安装并配置nginx"></a>存储服务器（storage server）安装并配置nginx</h2><h3 id="下载并安装fastdfs-nginx-module模块"><a href="#下载并安装fastdfs-nginx-module模块" class="headerlink" title="下载并安装fastdfs-nginx-module模块"></a>下载并安装fastdfs-nginx-module模块</h3><blockquote>
<p><code>FastDFS</code>通过<code>Tracker</code>服务器,将文件放在<code>Storage</code>服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。假设Tracker服务器将文件上传到了192.168.4.125，上传成功后文件ID已经返回给客户端。此时FastDFS存储集群机制会将这个文件同步到同组存储192.168.4.126，在文件还没有复制完成的情况下，客户端如果用这个文件ID在192.168.4.126上取文件,就会出现文件无法访问的错误。而fastdfs-nginx-module可以重定向文件连接到源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage  tools]<span class="comment"># wget http://nchc.dl.sourceforge.net/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz</span></div><div class="line">[root@fastdfs-storage tools]<span class="comment"># tar xf fastdfs-nginx-module_v1.16.tar.gz </span></div><div class="line">[root@fastdfs-storage tools]<span class="comment"># cd fastdfs-nginx-module/src/</span></div><div class="line">[root@fastdfs-storage src]<span class="comment"># vim config</span></div><div class="line">编辑config文件，执行如下命令进行批量替换并保存退出</div><div class="line">:%s+/usr/<span class="built_in">local</span>/+/usr/+g</div></pre></td></tr></table></figure>
<h3 id="拷贝fastdfs-nginx-module模块中配置文件到-etc-fdfs目录中并编辑"><a href="#拷贝fastdfs-nginx-module模块中配置文件到-etc-fdfs目录中并编辑" class="headerlink" title="拷贝fastdfs-nginx-module模块中配置文件到/etc/fdfs目录中并编辑"></a>拷贝fastdfs-nginx-module模块中配置文件到/etc/fdfs目录中并编辑</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># cp /home/oldcat/tools/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span></div><div class="line">[root@fastdfs-storage ~]<span class="comment"># vim /etc/fdfs/mod_fastdfs.conf</span></div><div class="line">修改内容如下：</div><div class="line">connect_timeout=10</div><div class="line">base_path=/tmp（默认为/tmp）</div><div class="line">tracker_server=172.18.10.232:22122</div><div class="line">storage_server_port=23000（默认配置为23000）</div><div class="line">url_have_group_name = <span class="literal">true</span></div><div class="line">store_path0=/data/fastdfs/storage</div><div class="line">group_name=group1（默认配置为group1）</div></pre></td></tr></table></figure>
<h3 id="安装nginx依赖库（必须要检查）"><a href="#安装nginx依赖库（必须要检查）" class="headerlink" title="安装nginx依赖库（必须要检查）"></a>安装nginx依赖库（必须要检查）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage nginx-1.8.1]<span class="comment"># yum install -y pcre-devel zlib-devel</span></div></pre></td></tr></table></figure>
<h3 id="下载并安装nginx"><a href="#下载并安装nginx" class="headerlink" title="下载并安装nginx"></a>下载并安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage  tools]<span class="comment"># wget http://nginx.org/download/nginx-1.8.1.tar.gz</span></div><div class="line">[root@fastdfs-storage tools]<span class="comment"># tar xf nginx-1.8.1.tar.gz </span></div><div class="line">[root@fastdfs-storage tools]<span class="comment"># cd nginx-1.8.1</span></div><div class="line">[root@fastdfs-storage nginx-1.8.1]<span class="comment"># ./configure --prefix=/application/nginx/ --add-module=../fastdfs-nginx-module/src/</span></div><div class="line">[root@fastdfs-storage nginx-1.8.1]<span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>
<h3 id="拷贝FastDFS中的部分配置文件到-etc-fdfs目录中"><a href="#拷贝FastDFS中的部分配置文件到-etc-fdfs目录中" class="headerlink" title="拷贝FastDFS中的部分配置文件到/etc/fdfs目录中"></a>拷贝FastDFS中的部分配置文件到/etc/fdfs目录中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># cp /home/oldcat/tools/FastDFS/conf/http.conf /etc/fdfs/</span></div><div class="line">[root@fastdfs-storage ~]<span class="comment"># cp /home/oldcat/tools/FastDFS/conf/mime.types /etc/fdfs/</span></div></pre></td></tr></table></figure>
<h3 id="配置nginx，如下所示："><a href="#配置nginx，如下所示：" class="headerlink" title="配置nginx，如下所示："></a>配置nginx，如下所示：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># vim /application/nginx/conf/nginx.conf</span></div><div class="line">    user  root;    </div><div class="line">    worker_processes  1;</div><div class="line">    events &#123;</div><div class="line">       worker_connections  1024;</div><div class="line">    &#125;</div><div class="line">    http &#123;</div><div class="line">        include       mime.types;</div><div class="line">        default_type  application/octet-stream;</div><div class="line">        sendfile        on;</div><div class="line">        keepalive_timeout  65;</div><div class="line">        server &#123;</div><div class="line">            listen       8888;</div><div class="line">            server_name  localhost;</div><div class="line">            location / &#123;</div><div class="line">                root   html;</div><div class="line">                index  index.html index.htm;</div><div class="line">            &#125;</div><div class="line">            location ~/group[0-9]/M00 &#123;</div><div class="line">                root /data/fastdfs/storage/data/;</div><div class="line">                ngx_fastdfs_module;</div><div class="line">            &#125;</div><div class="line">            error_page   500 502 503 504  /50x.html;</div><div class="line">            location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>a、<code>user root</code>是解决下载操作时报404的问题<br>b、<code>8888</code>端口号与<code>/etc/fdfs/storage.conf</code>中的<code>http.server_port=8888</code>相对应<br>c、<code>storage</code>对应有多个group的情况下，访问路径带group名称，例如：<code>/group1/M00/00/00/**</code>，对应nginx配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location ~/group[0-9]/ &#123;</div><div class="line">       ngx_fastdfs_module;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建M00至storage存储目录的符号连接："><a href="#创建M00至storage存储目录的符号连接：" class="headerlink" title="创建M00至storage存储目录的符号连接："></a>创建M00至storage存储目录的符号连接：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -sv /data/fastdfs/storage/data  /data/fastdfs/storage/data/M00</div></pre></td></tr></table></figure>
<h3 id="拷贝nginx服务到-etc-init-d-目录下并启动"><a href="#拷贝nginx服务到-etc-init-d-目录下并启动" class="headerlink" title="拷贝nginx服务到/etc/init.d/目录下并启动"></a>拷贝nginx服务到/etc/init.d/目录下并启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@fastdfs-storage ~]<span class="comment"># cp /application/nginx/sbin/nginx /etc/init.d/</span></div><div class="line">[root@fastdfs-storage ~]<span class="comment"># /etc/init.d/nginx</span></div><div class="line">[root@fastdfs-storage ~]<span class="comment"># ss -lntup|grep 8888</span></div><div class="line">tcp    LISTEN     0      128                    *:8888                  *:*      users:((<span class="string">"nginx"</span>,7308,6),(<span class="string">"nginx"</span>,7309,6))</div></pre></td></tr></table></figure>
<hr>
<h2 id="防火墙端口设置"><a href="#防火墙端口设置" class="headerlink" title="防火墙端口设置"></a>防火墙端口设置</h2><h3 id="查看已开启的端口："><a href="#查看已开启的端口：" class="headerlink" title="查看已开启的端口："></a>查看已开启的端口：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.12.0]<span class="comment"># firewall-cmd --zone=public --list-ports</span></div><div class="line">20880/tcp 80/tcp 2181/tcp 23000/tcp 22122/tcp 9999/tcp</div><div class="line">[root@localhost nginx-1.12.0]<span class="comment">#</span></div></pre></td></tr></table></figure>
<h3 id="开放端口号命令：–permanent表示永久生效，不加的话，重启后不生效"><a href="#开放端口号命令：–permanent表示永久生效，不加的话，重启后不生效" class="headerlink" title="开放端口号命令：–permanent表示永久生效，不加的话，重启后不生效"></a>开放端口号命令：–permanent表示永久生效，不加的话，重启后不生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo firewall-cmd --zone=public --add-port=23000/tcp --permanent <span class="comment">#开户端口号</span></div><div class="line">sudo firewall-cmd --reload</div></pre></td></tr></table></figure>
<h3 id="CentOS7-防火墙相关命令："><a href="#CentOS7-防火墙相关命令：" class="headerlink" title="CentOS7 防火墙相关命令："></a>CentOS7 防火墙相关命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl <span class="built_in">enable</span> firewalld.service    <span class="comment">#开启防火墙</span></div><div class="line">systemctl stop firewalld.service     <span class="comment">#关闭防火墙(开机会仍会启动)</span></div><div class="line">systemctl <span class="built_in">disable</span> firewalld.service  <span class="comment">#禁用防火墙(开机后不再启动)</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="添加开机自启"><a href="#添加开机自启" class="headerlink" title="添加开机自启"></a>添加开机自启</h2><h3 id="首先检查-etc-rc-d-rc-local-是否有执行权限"><a href="#首先检查-etc-rc-d-rc-local-是否有执行权限" class="headerlink" title="首先检查 /etc/rc.d/rc.local  是否有执行权限"></a>首先检查 <code>/etc/rc.d/rc.local</code>  是否有执行权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ll /etc/rc.d/rc.local</div><div class="line">-rwxr--r-x. 1 root root 550 8月  18 10:58 /etc/rc.d/rc.local</div><div class="line">user 有x有执行权限，没有则执行</div><div class="line">chmod u+x /etc/rc.d/rc.local</div></pre></td></tr></table></figure>
<h3 id="在-etc-rc-d-rc-local-最底下加上服务器启动命令"><a href="#在-etc-rc-d-rc-local-最底下加上服务器启动命令" class="headerlink" title="在 /etc/rc.d/rc.local 最底下加上服务器启动命令"></a>在 <code>/etc/rc.d/rc.local</code> 最底下加上服务器启动命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/fdfs_trackerd start  </div><div class="line">/etc/init.d/fdfs_storaged start  </div><div class="line">/etc/init.d/nginx</div></pre></td></tr></table></figure>
<h3 id="查看服务启动"><a href="#查看服务启动" class="headerlink" title="查看服务启动"></a>查看服务启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># netstat -unltp|grep fdfs</span></div><div class="line">tcp        0      0 0.0.0.0:22122           0.0.0.0:*               LISTEN      1239/fdfs_trackerd  </div><div class="line">tcp        0      0 0.0.0.0:23000           0.0.0.0:*               LISTEN      1245/fdfs_storaged  </div><div class="line">[root@localhost ~]<span class="comment"># netstat -unltp|grep nginx</span></div><div class="line">tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      1278/nginx: master</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> fastDFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何通过Maven的Jetty插件运行Web工程]]></title>
      <url>/maven-jetty.html</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>Jetty</code> 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用Java语言编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行（stand-alone）的Java应用提供网络和web连接。</p>
</blockquote>
<a id="more"></a>
<p>在pom.xml文件的<build></build>标签中加入如下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.4.v20170414<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>5<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">webApp</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">webApp</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">"org.eclipse.jetty.server.nio.SelectChannelConnector"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>参数配置：</p>
<ol>
<li><code>configuration.scanIntervalSeconds</code> 配置表示新代码的扫描时间间隔（秒），值 <code>&lt;= 0</code> 表示不扫描。这里利用的是jetty 的定时重载代码的特性，做修改后不用重新启动项目，自动扫描出改动后会自动更新class文件的。</li>
<li><code>configuration.webApp.contextPath</code> 配置表示工程的虚拟目录名，如果配置为/，则届时访问路径为hostname:port/，如果配置为/jetty，则届时访问路径为hostname:port/jetty，有点相当于namespace的作用。</li>
</ol>
<p>用Maven Build启动，需在Goals栏中配置如下：<br> <code>jetty:run</code> 或者指定端口 <code>jetty:run -Djetty.port=80</code></p>
<p>直接在项目根目录下在命令行中用maven命令启动: <code>mvn jetty:run -Djetty.port=80</code></p>
<p>需要注意的是<strong>pom.xml文件中指定的端口优先级要比Goals中指定的端口的优先级要高</strong></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> jetty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何通过Maven的Tomcat插件运行Web工程]]></title>
      <url>/maven-tomcat.html</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>Tomcat</code> 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p>
</blockquote>
<p><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike60%2C5%2C5%2C60%2C20/sign=bf6d81464f90f60310bd9415587bd87e/b3b7d0a20cf431adfe004e4e4e36acaf2fdd98f2.jpg" alt="img"><br><a id="more"></a></p>
<p><code>maven</code>项目如何使用<code>Tomcat</code>插件运行项目，需要注意的是几个参数的设置，就可以灵活使用了。</p>
<ul>
<li>maven version - 3.3.9</li>
<li><p><code>pom.xml</code>的 <code>build -&gt; plugins</code> 标签下加上:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>最后是这样的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- 设置项目jdk --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java-version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java-version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- true:跳过测试 --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				    <span class="comment">&lt;!-- 访问应用的路径 '/xxx' 就是使用 http://[hosthome]:[port]/xxx --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">					<span class="comment">&lt;!-- 配置端口号 --&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>总结:</p>
<ol>
<li>maven build 启动方式 <code>tomcat7:run</code></li>
<li><code>maven-compiler-plugin</code> 插件能解决 <strong> Dynamic Web Module 3.0 requires Java 1.6 or newer</strong> update maven 项目后的java版本不对的问题。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于QQ空间的一点事]]></title>
      <url>/qzone.html</url>
      <content type="html"><![CDATA[<p>以前玩QQ空间也好多年了，不知道什么时候淡下去了，也许人是人在也没有当年的纯真了吧，顾及也太多了，有时候翻出以前发的那些又矫情又作的东西，想想就很好笑吧，但是没删；说是淡了没玩了，我想也不是，还是每天会上去刷刷的，只是没有那些感觉了，重要的东西，由于一点原因，已经没在那上面写了，但是如果我看到喜欢的说说，我还是会点赞，评论的。<br><a id="more"></a><br>关于一些点吧：</p>
<ol>
<li><p>首先就是匿名访问这一点吧，早期空间存在匿名访问的这一个功能的，还是免费的，后来开始需要黄钻使用的，就是可以预先设置的好友，当里有权限访问她的空间的时候，不会出现在访客记录中，当然也不会计入今日访客数中。还有一个功能稍微弱一点，是差距很大，就是删除本次记录，网不好，但是会计入访客数中，还有QQ订阅了QQ空间的时候，有时候会提示你谁近期什么时间访问过空间，头大，不知道什么玩意儿。当然网上有匿名访问的方法，一般就是这个网站好用。<a rel="external nofollow" target="_blank" href="http://www.qqxoo.com/">http://www.qqxoo.com/</a>，直接输入QQ就行了，需要好友权限的，根据教程查询自己的QQkey输入就行了，回答问题就输入答案就可以了；不要问我答案也不知道，权限也没有怎么办，只能说没办法。。毕竟空间诟病的地方就是权限复杂，最亮点的地方也是权限，折磨人。</p>
</li>
<li><p>外链音乐，上面的音乐都是要绿钻的，怎么才能使用免费的音乐了。添加网络背景音乐，可是网络上的链接经常失效，而且速度很慢，这个时候就需要网络的存储空间了，七牛云存储可以解决这个问题，把音乐上传上去，获取外链，复制到空间上，效果很好。</p>
</li>
<li>相册强大，但是不能做外链图床，可能做了反链了，经常加载不到，速度极差。</li>
<li>其实手机端不错的，电脑网页端，估计没人玩了吧。</li>
<li>属于我们老一辈人的记忆，就好好珍惜了，在互联网迅猛的时刻，但是国内大多数博客平台都覆灭了，很可惜。</li>
</ol>
<p>最后，为了写笔记，自己弄了这个博客，主要是对外的，可以被搜索引擎抓取。QQ空间就是熟人间的交流了，有生之年，应该是不会放弃QQ空间这个产品（除非倒闭），它是一段记忆的象征。</p>
]]></content>
      
        <categories>
            
            <category> 碎碎念 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于博客改动]]></title>
      <url>/test.html</url>
      <content type="html"><![CDATA[<p>来到这个世界，被筛选，被挑剔，被赋予使命。我们被杀死，中途夭折，轻易放弃，多次失败，多次重头再来。变成暴躁的炸弹，变成美丽的花，我们恶心难堪，又美丽动人，充满希望，却又满是不堪。你用悲伤去看，这是一个充满死亡的地方。你用努力去看，这里充满了永不停歇的希望，人们都带着笑。诸君共勉<br><a id="more"></a></p>
<h4 id="关于改动"><a href="#关于改动" class="headerlink" title="关于改动"></a>关于改动</h4><p>20170902将改成.com域名wuwii</p>
<p>update20171009 以前这个用这个页面测试和调整一些样式，现在把它调整下，记录博客相关的设置改动。</p>
<p>博客图床使用的是<code>七牛云</code>，每月免费10G流量。我外链音乐也是放上面的，当然什么Js，css也可以使用它的CDN加速。</p>
<p>20171022 将一部分文章转入到个人位置，不再展示，一部分链接即将失效，会报错404，等到搜索引擎删除。</p>
<p>20171027 删除故事一栏，存入草稿箱，个人位置，以后整理再展示，链接失效。</p>
<p>20171102 突然发现10月17号手误把360验证网站权限删除了，360收录全没了，哭瞎。</p>
<p>20171108 隐藏掉一部分以前的日记，嘿嘿，私人日志不给看。</p>
<p>20171124 又发现了几个免费的图床，速度很好，推荐使用：</p>
<ol>
<li><a rel="external nofollow" target="_blank" href="https://sm.ms/">https://sm.ms/</a></li>
<li><a rel="external nofollow" target="_blank" href="https://jiantuku.com/#/">极简图床</a><br>但是七牛还是最稳定的，但是如果图片多而且大的话，特别是那种gif，很容易欠费的，扎心。</li>
</ol>
<p>20171125 发现站内搜索挂了，准备更换，这个太不稳定了，即将删除评论系统，发现都是广告，没时间打理了。</p>
<p>20171126 网上查了下。最后决定使用algolia，把algolia搜索集成进来了，搜索的老毛病总算解决了。</p>
<p>Good things should last forever. </p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/hello-world.html</url>
      <content type="html"><![CDATA[<p>Welcome to <a rel="external nofollow" target="_blank" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a rel="external nofollow" target="_blank" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a rel="external nofollow" target="_blank" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a rel="external nofollow" target="_blank" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a rel="external nofollow" target="_blank" href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a rel="external nofollow" target="_blank" href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a rel="external nofollow" target="_blank" href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a rel="external nofollow" target="_blank" href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 测试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试下 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
